/**
 * Copyright (C) 2008-2016, RESOL - Elektronische Regelungen GmbH.
 * Copyright (C) 2016-2017, Daniel Wippermann.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.resol.vbus;

import static org.junit.Assert.*;

import java.io.InputStream;
import java.util.Locale;

import org.junit.Test;

import de.resol.vbus.SpecificationFile.DeviceTemplate;
import de.resol.vbus.SpecificationFile.Enum;
import de.resol.vbus.SpecificationFile.EnumVariant;
import de.resol.vbus.SpecificationFile.Language;
import de.resol.vbus.SpecificationFile.LocalizedText;
import de.resol.vbus.SpecificationFile.PacketTemplate;
import de.resol.vbus.SpecificationFile.PacketTemplateField;
import de.resol.vbus.SpecificationFile.Type;
import de.resol.vbus.SpecificationFile.Unit;
import de.resol.vbus.SpecificationFile.UnitFamily;

public class SpecificationFileTest {

	SpecificationFile specFile;
	
	public SpecificationFileTest() {
		InputStream is = SpecificationFileTest.class.getResourceAsStream("vbus_specification.vsf");
		specFile = SpecificationFile.fromStream(is);
	}

	@Test
	public void testGetLanguageForLocale() throws Exception {
		assertEquals(Language.En, SpecificationFile.getLanguageForLocale(Locale.ENGLISH));
		assertEquals(Language.En, SpecificationFile.getLanguageForLocale(Locale.UK));
		assertEquals(Language.En, SpecificationFile.getLanguageForLocale(Locale.US));
		assertEquals(Language.En, SpecificationFile.getLanguageForLocale(Locale.CANADA));
		
		assertEquals(Language.De, SpecificationFile.getLanguageForLocale(Locale.GERMAN));
		assertEquals(Language.De, SpecificationFile.getLanguageForLocale(Locale.GERMANY));
		
		assertEquals(Language.Fr, SpecificationFile.getLanguageForLocale(Locale.FRENCH));
		assertEquals(Language.Fr, SpecificationFile.getLanguageForLocale(Locale.FRANCE));

		assertEquals(Language.En, SpecificationFile.getLanguageForLocale(Locale.ITALIAN));
		assertEquals(Language.En, SpecificationFile.getLanguageForLocale(Locale.ITALY));

		assertEquals(Language.En, SpecificationFile.getLanguageForLocale(Locale.SIMPLIFIED_CHINESE));
	}

	@Test
	public void testSpecificationFile() throws Exception {
		assertEquals(20180312, specFile.getDatecode());
		assertEquals(5596, specFile.getTexts().length);
		assertEquals(2311, specFile.getLocalizedTexts().length);
		assertEquals(48, specFile.getUnits().length);
		assertEquals(810, specFile.getDeviceTemplates().length);
		assertEquals(240, specFile.getPacketTemplates().length);
	}

	class TextTester {
		
		int index = 0;
		
		void assertNextTextEquals(String expected) {
			String actual = specFile.getTexts() [index++];
			assertEquals(expected, actual);
		}
		
		void assertEndOfTextTable() {
			assertEquals(index, specFile.getTexts().length);
		}

	}

	private void testTextsPart1(TextTester t) {
		t.assertNextTextEquals("");
		t.assertNextTextEquals(" BTU");
		t.assertNextTextEquals(" Hz");
		t.assertNextTextEquals(" K");
		t.assertNextTextEquals(" MBTU");
		t.assertNextTextEquals(" MMBTU");
		t.assertNextTextEquals(" MWh");
		t.assertNextTextEquals(" V");
		t.assertNextTextEquals(" W");
		t.assertNextTextEquals(" W/m²");
		t.assertNextTextEquals(" Wh");
		t.assertNextTextEquals(" bar");
		t.assertNextTextEquals(" d");
		t.assertNextTextEquals(" g CO₂ (Gas)");
		t.assertNextTextEquals(" g CO₂ (Oil)");
		t.assertNextTextEquals(" gal");
		t.assertNextTextEquals(" gal/h");
		t.assertNextTextEquals(" gal/min");
		t.assertNextTextEquals(" h");
		t.assertNextTextEquals(" hPa");
		t.assertNextTextEquals(" kW");
		t.assertNextTextEquals(" kWh");
		t.assertNextTextEquals(" kWh/(m²*d)");
		t.assertNextTextEquals(" kg CO₂ (Gas)");
		t.assertNextTextEquals(" kg CO₂ (Oil)");
		t.assertNextTextEquals(" kg/h");
		t.assertNextTextEquals(" kg/m³");
		t.assertNextTextEquals(" l");
		t.assertNextTextEquals(" l/(m²*d)");
		t.assertNextTextEquals(" l/h");
		t.assertNextTextEquals(" l/min");
		t.assertNextTextEquals(" m/s");
		t.assertNextTextEquals(" mA");
		t.assertNextTextEquals(" min");
		t.assertNextTextEquals(" ms");
		t.assertNextTextEquals(" m²");
		t.assertNextTextEquals(" m³");
		t.assertNextTextEquals(" m³/h");
		t.assertNextTextEquals(" psi");
		t.assertNextTextEquals(" s");
		t.assertNextTextEquals(" t CO₂ (Gas)");
		t.assertNextTextEquals(" t CO₂ (Oil)");
		t.assertNextTextEquals(" °");
		t.assertNextTextEquals(" °C");
		t.assertNextTextEquals(" °F");
		t.assertNextTextEquals(" Ω");
		t.assertNextTextEquals("!Datum/Uhrzeit");
		t.assertNextTextEquals("!Erreur sonde court-circuit");
		t.assertNextTextEquals("!Erreur sonde rupture câble");
		t.assertNextTextEquals("!Lüfterfehler");
		t.assertNextTextEquals("!Lüfterwarnung");
		t.assertNextTextEquals("!Max. Temp. Regler");
		t.assertNextTextEquals("!Module Power Communication bus interrompue");
		t.assertNextTextEquals("!Module Sensor Communication bus interrompue");
		t.assertNextTextEquals("!Power module bus communication disturbed");
		t.assertNextTextEquals("!Powermodul Bus-Kommunikation gestört");
		t.assertNextTextEquals("!Sensor fault line break");
		t.assertNextTextEquals("!Sensor fault short circuit");
		t.assertNextTextEquals("!Sensor module bus communication disturbed");
		t.assertNextTextEquals("!Sensorfehler");
		t.assertNextTextEquals("!Sensorfehler Kurzschluss");
		t.assertNextTextEquals("!Sensorfehler Leitungsbruch");
		t.assertNextTextEquals("!Sensormodul Bus-Kommunikation gestört");
		t.assertNextTextEquals("%");
		t.assertNextTextEquals("%RH");
		t.assertNextTextEquals("0-10V In");
		t.assertNextTextEquals("000_1_0");
		t.assertNextTextEquals("000_1_1");
		t.assertNextTextEquals("000_1_128");
		t.assertNextTextEquals("000_1_16");
		t.assertNextTextEquals("000_1_2");
		t.assertNextTextEquals("000_1_2048");
		t.assertNextTextEquals("000_1_32");
		t.assertNextTextEquals("000_1_4");
		t.assertNextTextEquals("000_1_64");
		t.assertNextTextEquals("000_1_8");
		t.assertNextTextEquals("000_2_0");
		t.assertNextTextEquals("000_4_0");
		t.assertNextTextEquals("001_1_0");
		t.assertNextTextEquals("001_2_0");
		t.assertNextTextEquals("001_3_0");
		t.assertNextTextEquals("002_1_0");
		t.assertNextTextEquals("002_2_0");
		t.assertNextTextEquals("002_4_0");
		t.assertNextTextEquals("003_1_0");
		t.assertNextTextEquals("003_1_1");
		t.assertNextTextEquals("003_1_16");
		t.assertNextTextEquals("003_1_2");
		t.assertNextTextEquals("003_1_32");
		t.assertNextTextEquals("003_1_4");
		t.assertNextTextEquals("003_1_8");
		t.assertNextTextEquals("004_1_0");
		t.assertNextTextEquals("004_2_0");
		t.assertNextTextEquals("004_4_0");
		t.assertNextTextEquals("005_1_0");
		t.assertNextTextEquals("005_3_0");
		t.assertNextTextEquals("006_1_0");
		t.assertNextTextEquals("006_2_0");
		t.assertNextTextEquals("006_2_0_1");
		t.assertNextTextEquals("006_4_0");
		t.assertNextTextEquals("007_1_0");
		t.assertNextTextEquals("008_1_0");
		t.assertNextTextEquals("008_1_16");
		t.assertNextTextEquals("008_1_2");
		t.assertNextTextEquals("008_1_4");
		t.assertNextTextEquals("008_1_8");
		t.assertNextTextEquals("008_2_0");
		t.assertNextTextEquals("008_4_0");
		t.assertNextTextEquals("009_1_0");
		t.assertNextTextEquals("009_3_0");
		t.assertNextTextEquals("010_1_0");
		t.assertNextTextEquals("010_1_1");
		t.assertNextTextEquals("010_1_16");
		t.assertNextTextEquals("010_1_2");
		t.assertNextTextEquals("010_1_32");
		t.assertNextTextEquals("010_1_4");
		t.assertNextTextEquals("010_1_8");
		t.assertNextTextEquals("010_2_0");
		t.assertNextTextEquals("011_1_0");
		t.assertNextTextEquals("011_1_1");
		t.assertNextTextEquals("011_1_2");
		t.assertNextTextEquals("012_1_0");
		t.assertNextTextEquals("012_1_1");
		t.assertNextTextEquals("012_1_16");
		t.assertNextTextEquals("012_1_2");
		t.assertNextTextEquals("012_1_32");
		t.assertNextTextEquals("012_1_4");
		t.assertNextTextEquals("012_1_8");
		t.assertNextTextEquals("012_2_0");
		t.assertNextTextEquals("012_4_0");
		t.assertNextTextEquals("013_1_0");
		t.assertNextTextEquals("013_1_1");
		t.assertNextTextEquals("013_1_128");
		t.assertNextTextEquals("013_1_16");
		t.assertNextTextEquals("013_1_2");
		t.assertNextTextEquals("013_1_32");
		t.assertNextTextEquals("013_1_4");
		t.assertNextTextEquals("013_1_64");
		t.assertNextTextEquals("013_1_8");
		t.assertNextTextEquals("013_3_0");
		t.assertNextTextEquals("014_1_0");
		t.assertNextTextEquals("014_1_1");
		t.assertNextTextEquals("014_1_16");
		t.assertNextTextEquals("014_1_2");
		t.assertNextTextEquals("014_1_32");
		t.assertNextTextEquals("014_1_4");
		t.assertNextTextEquals("014_1_64");
		t.assertNextTextEquals("014_1_8");
		t.assertNextTextEquals("014_2_0");
		t.assertNextTextEquals("015_1_0");
		t.assertNextTextEquals("015_1_1");
		t.assertNextTextEquals("015_1_16");
		t.assertNextTextEquals("015_1_2");
		t.assertNextTextEquals("015_1_32");
		t.assertNextTextEquals("015_1_4");
		t.assertNextTextEquals("015_1_8");
		t.assertNextTextEquals("016_1_0");
		t.assertNextTextEquals("016_1_128");
		t.assertNextTextEquals("016_1_16");
		t.assertNextTextEquals("016_1_32");
		t.assertNextTextEquals("016_1_4");
		t.assertNextTextEquals("016_1_64");
		t.assertNextTextEquals("016_1_8");
		t.assertNextTextEquals("016_2_0");
		t.assertNextTextEquals("016_2_0_1");
		t.assertNextTextEquals("016_3_0");
		t.assertNextTextEquals("016_4_0");
		t.assertNextTextEquals("017_1_0");
		t.assertNextTextEquals("017_1_1");
		t.assertNextTextEquals("017_3_0");
		t.assertNextTextEquals("018_1_0");
		t.assertNextTextEquals("018_1_1");
		t.assertNextTextEquals("018_1_2");
		t.assertNextTextEquals("018_1_4");
		t.assertNextTextEquals("018_1_8");
		t.assertNextTextEquals("018_2_0");
		t.assertNextTextEquals("019_1_0");
		t.assertNextTextEquals("020_1_0");
		t.assertNextTextEquals("020_1_1");
		t.assertNextTextEquals("020_1_16");
		t.assertNextTextEquals("020_1_2");
		t.assertNextTextEquals("020_1_32");
		t.assertNextTextEquals("020_1_4");
		t.assertNextTextEquals("020_1_64");
		t.assertNextTextEquals("020_1_8");
		t.assertNextTextEquals("020_2_0");
		t.assertNextTextEquals("020_4_0");
		t.assertNextTextEquals("021_1_0");
		t.assertNextTextEquals("021_2_0");
		t.assertNextTextEquals("021_3_0");
		t.assertNextTextEquals("022_1_0");
		t.assertNextTextEquals("022_1_1");
		t.assertNextTextEquals("022_1_1024");
		t.assertNextTextEquals("022_1_128");
		t.assertNextTextEquals("022_1_16");
		t.assertNextTextEquals("022_1_2");
		t.assertNextTextEquals("022_1_2048");
		t.assertNextTextEquals("022_1_256");
		t.assertNextTextEquals("022_1_32");
		t.assertNextTextEquals("022_1_4");
		t.assertNextTextEquals("022_1_4096");
		t.assertNextTextEquals("022_1_512");
		t.assertNextTextEquals("022_1_64");
		t.assertNextTextEquals("022_1_8");
		t.assertNextTextEquals("022_1_8192");
		t.assertNextTextEquals("022_2_0");
		t.assertNextTextEquals("022_2_0_1");
		t.assertNextTextEquals("023_1_0");
		t.assertNextTextEquals("023_1_1");
		t.assertNextTextEquals("023_1_2");
		t.assertNextTextEquals("023_1_4");
		t.assertNextTextEquals("023_1_8");
		t.assertNextTextEquals("024_1_0");
		t.assertNextTextEquals("024_2_0");
		t.assertNextTextEquals("024_4_0");
		t.assertNextTextEquals("025_1_0");
		t.assertNextTextEquals("025_1_1");
		t.assertNextTextEquals("025_1_16");
		t.assertNextTextEquals("025_1_2");
		t.assertNextTextEquals("025_1_32");
		t.assertNextTextEquals("025_1_4");
		t.assertNextTextEquals("025_1_64");
		t.assertNextTextEquals("025_1_8");
		t.assertNextTextEquals("025_1_8_1");
		t.assertNextTextEquals("025_2_0");
		t.assertNextTextEquals("025_3_0");
		t.assertNextTextEquals("026_1_0");
		t.assertNextTextEquals("026_1_1");
		t.assertNextTextEquals("026_1_128");
		t.assertNextTextEquals("026_1_16");
		t.assertNextTextEquals("026_1_2");
		t.assertNextTextEquals("026_1_32");
		t.assertNextTextEquals("026_1_4");
		t.assertNextTextEquals("026_1_64");
		t.assertNextTextEquals("026_2_0");
		t.assertNextTextEquals("027_1_0");
		t.assertNextTextEquals("027_1_1");
		t.assertNextTextEquals("027_1_16");
		t.assertNextTextEquals("027_1_2");
		t.assertNextTextEquals("027_1_32");
		t.assertNextTextEquals("027_1_4");
		t.assertNextTextEquals("027_1_8");
		t.assertNextTextEquals("028_1_0");
		t.assertNextTextEquals("028_1_1");
		t.assertNextTextEquals("028_1_128");
		t.assertNextTextEquals("028_1_16");
		t.assertNextTextEquals("028_1_2");
		t.assertNextTextEquals("028_1_32");
		t.assertNextTextEquals("028_1_4");
		t.assertNextTextEquals("028_1_64");
		t.assertNextTextEquals("028_1_8");
		t.assertNextTextEquals("028_2_0");
		t.assertNextTextEquals("028_4_0");
		t.assertNextTextEquals("029_1_0");
		t.assertNextTextEquals("029_1_1");
		t.assertNextTextEquals("029_1_2");
		t.assertNextTextEquals("029_1_4");
		t.assertNextTextEquals("029_1_8");
		t.assertNextTextEquals("029_3_0");
		t.assertNextTextEquals("030_1_0");
		t.assertNextTextEquals("030_2_0");
		t.assertNextTextEquals("031_1_0");
		t.assertNextTextEquals("032_1_0");
		t.assertNextTextEquals("032_1_1");
		t.assertNextTextEquals("032_1_16");
		t.assertNextTextEquals("032_1_2");
		t.assertNextTextEquals("032_1_32");
		t.assertNextTextEquals("032_1_4");
		t.assertNextTextEquals("032_1_8");
		t.assertNextTextEquals("032_2_0");
		t.assertNextTextEquals("032_4_0");
		t.assertNextTextEquals("033_1_0");
		t.assertNextTextEquals("033_2_0");
		t.assertNextTextEquals("033_3_0");
		t.assertNextTextEquals("034_1_0");
		t.assertNextTextEquals("034_2_0");
		t.assertNextTextEquals("035_1_0");
		t.assertNextTextEquals("036_1_0");
		t.assertNextTextEquals("036_1_1");
		t.assertNextTextEquals("036_1_1024");
		t.assertNextTextEquals("036_1_1048576");
		t.assertNextTextEquals("036_1_128");
		t.assertNextTextEquals("036_1_16");
		t.assertNextTextEquals("036_1_16384");
		t.assertNextTextEquals("036_1_16777216");
		t.assertNextTextEquals("036_1_2");
		t.assertNextTextEquals("036_1_2048");
		t.assertNextTextEquals("036_1_2097152");
		t.assertNextTextEquals("036_1_256");
		t.assertNextTextEquals("036_1_262144");
		t.assertNextTextEquals("036_1_32");
		t.assertNextTextEquals("036_1_32768");
		t.assertNextTextEquals("036_1_4");
		t.assertNextTextEquals("036_1_4096");
		t.assertNextTextEquals("036_1_4194304");
		t.assertNextTextEquals("036_1_512");
		t.assertNextTextEquals("036_1_524288");
		t.assertNextTextEquals("036_1_524288_1");
		t.assertNextTextEquals("036_1_64");
		t.assertNextTextEquals("036_1_65536");
		t.assertNextTextEquals("036_1_67108864");
		t.assertNextTextEquals("036_1_8");
		t.assertNextTextEquals("036_1_8192");
		t.assertNextTextEquals("036_1_8388608");
		t.assertNextTextEquals("036_2_0");
		t.assertNextTextEquals("036_4_0");
		t.assertNextTextEquals("037_1_0");
		t.assertNextTextEquals("037_1_1");
		t.assertNextTextEquals("037_3_0");
		t.assertNextTextEquals("038_1_0");
		t.assertNextTextEquals("038_1_1");
		t.assertNextTextEquals("038_1_1024");
		t.assertNextTextEquals("038_1_128");
		t.assertNextTextEquals("038_1_16");
		t.assertNextTextEquals("038_1_1_1");
		t.assertNextTextEquals("038_1_2");
		t.assertNextTextEquals("038_1_2048");
		t.assertNextTextEquals("038_1_256");
		t.assertNextTextEquals("038_1_32");
		t.assertNextTextEquals("038_1_4");
		t.assertNextTextEquals("038_1_512");
		t.assertNextTextEquals("038_1_64");
		t.assertNextTextEquals("038_1_8");
		t.assertNextTextEquals("038_2_0");
		t.assertNextTextEquals("038_4_0");
		t.assertNextTextEquals("039_1_0");
		t.assertNextTextEquals("040_1_0");
		t.assertNextTextEquals("040_1_1");
		t.assertNextTextEquals("040_1_1024");
		t.assertNextTextEquals("040_1_128");
		t.assertNextTextEquals("040_1_16");
		t.assertNextTextEquals("040_1_2");
		t.assertNextTextEquals("040_1_2048");
		t.assertNextTextEquals("040_1_256");
		t.assertNextTextEquals("040_1_32");
		t.assertNextTextEquals("040_1_4");
		t.assertNextTextEquals("040_1_512");
		t.assertNextTextEquals("040_1_64");
		t.assertNextTextEquals("040_1_8");
		t.assertNextTextEquals("040_2_0");
		t.assertNextTextEquals("040_4_0");
		t.assertNextTextEquals("041_1_0");
		t.assertNextTextEquals("041_2_0");
		t.assertNextTextEquals("042_1_0");
		t.assertNextTextEquals("042_2_0");
		t.assertNextTextEquals("042_2_0_1");
		t.assertNextTextEquals("043_1_0");
		t.assertNextTextEquals("044_1_0");
		t.assertNextTextEquals("044_1_0_1");
		t.assertNextTextEquals("044_1_1");
		t.assertNextTextEquals("044_1_128");
		t.assertNextTextEquals("044_1_16");
		t.assertNextTextEquals("044_1_2");
		t.assertNextTextEquals("044_1_32");
		t.assertNextTextEquals("044_1_4");
		t.assertNextTextEquals("044_1_64");
		t.assertNextTextEquals("044_1_8");
		t.assertNextTextEquals("044_2_0");
		t.assertNextTextEquals("044_4_0");
		t.assertNextTextEquals("045_1_0");
		t.assertNextTextEquals("045_1_1");
		t.assertNextTextEquals("045_1_16");
		t.assertNextTextEquals("045_1_2");
		t.assertNextTextEquals("045_1_4");
		t.assertNextTextEquals("045_1_8");
		t.assertNextTextEquals("046_1_0");
		t.assertNextTextEquals("046_1_1");
		t.assertNextTextEquals("046_1_128");
		t.assertNextTextEquals("046_1_16");
		t.assertNextTextEquals("046_1_2");
		t.assertNextTextEquals("046_1_32");
		t.assertNextTextEquals("046_1_4");
		t.assertNextTextEquals("046_1_64");
		t.assertNextTextEquals("046_1_8");
		t.assertNextTextEquals("046_2_0");
		t.assertNextTextEquals("047_1_0");
		t.assertNextTextEquals("047_1_1");
		t.assertNextTextEquals("047_1_128");
		t.assertNextTextEquals("047_1_16");
		t.assertNextTextEquals("047_1_2");
		t.assertNextTextEquals("047_1_32");
		t.assertNextTextEquals("047_1_4");
		t.assertNextTextEquals("047_1_64");
		t.assertNextTextEquals("047_1_8");
		t.assertNextTextEquals("048_1_0");
		t.assertNextTextEquals("048_1_1");
		t.assertNextTextEquals("048_1_128");
		t.assertNextTextEquals("048_1_16");
		t.assertNextTextEquals("048_1_16384");
		t.assertNextTextEquals("048_1_2");
		t.assertNextTextEquals("048_1_32");
		t.assertNextTextEquals("048_1_4");
		t.assertNextTextEquals("048_1_64");
		t.assertNextTextEquals("048_1_8");
		t.assertNextTextEquals("048_1_8192");
		t.assertNextTextEquals("048_2_0");
		t.assertNextTextEquals("048_4_0");
		t.assertNextTextEquals("049_1_0");
		t.assertNextTextEquals("049_1_1");
		t.assertNextTextEquals("049_1_128");
		t.assertNextTextEquals("049_1_16");
		t.assertNextTextEquals("049_1_2");
		t.assertNextTextEquals("049_1_32");
		t.assertNextTextEquals("049_1_4");
		t.assertNextTextEquals("049_1_64");
		t.assertNextTextEquals("049_1_8");
		t.assertNextTextEquals("050_1_0");
		t.assertNextTextEquals("050_1_1");
		t.assertNextTextEquals("050_2_0");
		t.assertNextTextEquals("051_1_0");
		t.assertNextTextEquals("051_1_1");
		t.assertNextTextEquals("051_1_2");
		t.assertNextTextEquals("051_1_4");
		t.assertNextTextEquals("052_1_0");
		t.assertNextTextEquals("052_1_1");
		t.assertNextTextEquals("052_1_16");
		t.assertNextTextEquals("052_1_2");
		t.assertNextTextEquals("052_1_4");
		t.assertNextTextEquals("052_1_8");
		t.assertNextTextEquals("052_2_0");
		t.assertNextTextEquals("052_2_0_1");
		t.assertNextTextEquals("052_4_0");
		t.assertNextTextEquals("053_1_0");
		t.assertNextTextEquals("054_1_0");
		t.assertNextTextEquals("054_2_0");
		t.assertNextTextEquals("054_4_0");
		t.assertNextTextEquals("055_1_0");
		t.assertNextTextEquals("056_1_0");
		t.assertNextTextEquals("056_1_1");
		t.assertNextTextEquals("056_1_2");
		t.assertNextTextEquals("056_1_4");
		t.assertNextTextEquals("056_1_8");
		t.assertNextTextEquals("056_2_0");
		t.assertNextTextEquals("056_4_0");
		t.assertNextTextEquals("057_1_0");
		t.assertNextTextEquals("057_1_1");
		t.assertNextTextEquals("057_1_2");
		t.assertNextTextEquals("057_1_4");
		t.assertNextTextEquals("057_1_8");
		t.assertNextTextEquals("058_1_0");
		t.assertNextTextEquals("058_1_1");
		t.assertNextTextEquals("058_1_16");
		t.assertNextTextEquals("058_1_2");
		t.assertNextTextEquals("058_1_32");
		t.assertNextTextEquals("058_1_4");
		t.assertNextTextEquals("058_1_64");
		t.assertNextTextEquals("058_1_8");
		t.assertNextTextEquals("058_2_0");
		t.assertNextTextEquals("059_1_0");
		t.assertNextTextEquals("060_1_0");
		t.assertNextTextEquals("060_2_0");
		t.assertNextTextEquals("060_4_0");
		t.assertNextTextEquals("061_1_0");
		t.assertNextTextEquals("061_1_1");
		t.assertNextTextEquals("062_1_0");
		t.assertNextTextEquals("062_2_0");
		t.assertNextTextEquals("063_1_0");
		t.assertNextTextEquals("064_1_0");
		t.assertNextTextEquals("064_1_1");
		t.assertNextTextEquals("064_1_1024");
		t.assertNextTextEquals("064_1_128");
		t.assertNextTextEquals("064_1_16");
		t.assertNextTextEquals("064_1_2");
		t.assertNextTextEquals("064_1_256");
		t.assertNextTextEquals("064_1_32");
		t.assertNextTextEquals("064_1_4");
		t.assertNextTextEquals("064_1_512");
		t.assertNextTextEquals("064_1_64");
		t.assertNextTextEquals("064_1_8");
		t.assertNextTextEquals("064_2_0");
		t.assertNextTextEquals("064_4_0");
		t.assertNextTextEquals("065_1_0");
		t.assertNextTextEquals("065_1_1");
		t.assertNextTextEquals("066_1_0");
		t.assertNextTextEquals("066_2_0");
		t.assertNextTextEquals("067_1_0");
		t.assertNextTextEquals("067_1_1");
		t.assertNextTextEquals("068_1_0");
		t.assertNextTextEquals("068_1_1");
		t.assertNextTextEquals("068_2_0");
		t.assertNextTextEquals("068_4_0");
		t.assertNextTextEquals("069_1_0");
		t.assertNextTextEquals("069_1_1");
		t.assertNextTextEquals("070_1_0");
		t.assertNextTextEquals("070_1_1");
		t.assertNextTextEquals("070_2_0");
		t.assertNextTextEquals("071_1_0");
		t.assertNextTextEquals("071_1_1");
		t.assertNextTextEquals("072_1_0");
		t.assertNextTextEquals("072_1_1");
		t.assertNextTextEquals("072_1_128");
		t.assertNextTextEquals("072_1_2097152");
		t.assertNextTextEquals("072_1_4");
		t.assertNextTextEquals("072_1_65536");
		t.assertNextTextEquals("072_2_0");
		t.assertNextTextEquals("072_4_0");
		t.assertNextTextEquals("073_1_0");
		t.assertNextTextEquals("074_1_0");
		t.assertNextTextEquals("074_2_0");
		t.assertNextTextEquals("075_1_0");
		t.assertNextTextEquals("076_1_0");
		t.assertNextTextEquals("076_2_0");
		t.assertNextTextEquals("076_4_0");
		t.assertNextTextEquals("077_1_0");
		t.assertNextTextEquals("078_1_0");
		t.assertNextTextEquals("078_2_0");
		t.assertNextTextEquals("079_1_0");
		t.assertNextTextEquals("080_1_0");
		t.assertNextTextEquals("080_1_1");
		t.assertNextTextEquals("080_2_0");
		t.assertNextTextEquals("080_4_0");
		t.assertNextTextEquals("081_1_0");
		t.assertNextTextEquals("081_1_1");
		t.assertNextTextEquals("082_1_0");
		t.assertNextTextEquals("082_2_0");
		t.assertNextTextEquals("083_1_0");
		t.assertNextTextEquals("084_1_0");
		t.assertNextTextEquals("084_1_1");
		t.assertNextTextEquals("084_4_0");
		t.assertNextTextEquals("085_1_0");
		t.assertNextTextEquals("085_1_1");
		t.assertNextTextEquals("086_1_0");
		t.assertNextTextEquals("087_1_0");
		t.assertNextTextEquals("088_1_0");
		t.assertNextTextEquals("088_1_1");
		t.assertNextTextEquals("088_2_0");
		t.assertNextTextEquals("088_4_0");
		t.assertNextTextEquals("089_1_0");
		t.assertNextTextEquals("089_1_1");
		t.assertNextTextEquals("090_1_1");
		t.assertNextTextEquals("090_2_0");
		t.assertNextTextEquals("091_1_1");
		t.assertNextTextEquals("092_1_1");
		t.assertNextTextEquals("092_4_0");
		t.assertNextTextEquals("093_1_1");
		t.assertNextTextEquals("094_1_1");
		t.assertNextTextEquals("095_1_1");
		t.assertNextTextEquals("096_1_1");
		t.assertNextTextEquals("096_1_1024");
		t.assertNextTextEquals("096_1_128");
		t.assertNextTextEquals("096_1_131072");
		t.assertNextTextEquals("096_1_16");
		t.assertNextTextEquals("096_1_16384");
		t.assertNextTextEquals("096_1_2");
		t.assertNextTextEquals("096_1_2048");
		t.assertNextTextEquals("096_1_262144");
		t.assertNextTextEquals("096_1_32");
		t.assertNextTextEquals("096_1_4");
		t.assertNextTextEquals("096_1_4096");
		t.assertNextTextEquals("096_1_512");
		t.assertNextTextEquals("096_1_64");
		t.assertNextTextEquals("096_1_65536");
		t.assertNextTextEquals("096_1_8");
		t.assertNextTextEquals("096_1_8192");
		t.assertNextTextEquals("096_4_0");
		t.assertNextTextEquals("096_4_0_1");
		t.assertNextTextEquals("096_4_0_2");
		t.assertNextTextEquals("100_1_0");
		t.assertNextTextEquals("100_4_0");
		t.assertNextTextEquals("100_4_0_1");
		t.assertNextTextEquals("101_1_0");
		t.assertNextTextEquals("102_1_0");
		t.assertNextTextEquals("103_1_0");
		t.assertNextTextEquals("104_2_0");
		t.assertNextTextEquals("104_4_0");
		t.assertNextTextEquals("104_4_0_1");
		t.assertNextTextEquals("108_2_0");
		t.assertNextTextEquals("108_4_0");
		t.assertNextTextEquals("108_4_0_1");
		t.assertNextTextEquals("110_1_0");
		t.assertNextTextEquals("112_4_0");
		t.assertNextTextEquals("112_4_0_1");
		t.assertNextTextEquals("116_2_0");
		t.assertNextTextEquals("116_4_0");
		t.assertNextTextEquals("116_4_0_1");
		t.assertNextTextEquals("118_1_0");
		t.assertNextTextEquals("119_1_0");
		t.assertNextTextEquals("120_2_0");
		t.assertNextTextEquals("120_4_0");
		t.assertNextTextEquals("120_4_0_1");
		t.assertNextTextEquals("122_2_0");
		t.assertNextTextEquals("124_2_0");
		t.assertNextTextEquals("124_4_0");
		t.assertNextTextEquals("124_4_0_1");
		t.assertNextTextEquals("128_4_0");
		t.assertNextTextEquals("128_4_0_1");
		t.assertNextTextEquals("132_4_0");
		t.assertNextTextEquals("5 min error code");
		t.assertNextTextEquals("5-Min-Fehlercode");
		t.assertNextTextEquals("ANBL 1");
		t.assertNextTextEquals("ANBL 2");
		t.assertNextTextEquals("ANBL 3");
		t.assertNextTextEquals("ANBL 4");
		t.assertNextTextEquals("Abaissement de nuit");
		t.assertNextTextEquals("Abgastemperatur");
		t.assertNextTextEquals("Absorbertemperatur (S1)");
		t.assertNextTextEquals("Adaptation valeur nominale");
		t.assertNextTextEquals("Air density");
		t.assertNextTextEquals("Air duct diamter");
		t.assertNextTextEquals("Air flow mass");
		t.assertNextTextEquals("Air flow volume");
		t.assertNextTextEquals("Air pressure");
		t.assertNextTextEquals("Aktuellen Sollwert (T-SET):");
		t.assertNextTextEquals("Aktuellen Sollwert:");
		t.assertNextTextEquals("Anforderung");
		t.assertNextTextEquals("Anforderungszirkulation");
		t.assertNextTextEquals("Angle d'incidence");
		t.assertNextTextEquals("Anlage:");
		t.assertNextTextEquals("Anlagenoptionen 1");
		t.assertNextTextEquals("Anlagenoptionen 2");
		t.assertNextTextEquals("Ann. Temperatur Erdspeicher");
		t.assertNextTextEquals("Année");
		t.assertNextTextEquals("Année :");
		t.assertNextTextEquals("Ansteuerung 1");
		t.assertNextTextEquals("Ansteuerung 2");
		t.assertNextTextEquals("Antiblocage 1");
		t.assertNextTextEquals("Antiblocage 2");
		t.assertNextTextEquals("Antiblocage 3");
		t.assertNextTextEquals("Antiblocage 4");
		t.assertNextTextEquals("Antiblocage R2");
		t.assertNextTextEquals("Antiblocage R4");
		t.assertNextTextEquals("Antiblocage actif");
		t.assertNextTextEquals("Antifreeze");
		t.assertNextTextEquals("Antifreeze ratio");
		t.assertNextTextEquals("Antifreeze type");
		t.assertNextTextEquals("Antigel");
		t.assertNextTextEquals("Antigel Echangeur");
		t.assertNextTextEquals("Antigel capteur");
		t.assertNextTextEquals("Anzahl Schaltspiele");
		t.assertNextTextEquals("Anzahl TD-Funktionen");
		t.assertNextTextEquals("Anzahl WP-Starts");
		t.assertNextTextEquals("Anzahl Zyklen (Summe):");
		t.assertNextTextEquals("Anzahl Zyklen (seit Start):");
		t.assertNextTextEquals("Anzahl Zyklen:");
		t.assertNextTextEquals("Anzeige-Status");
		t.assertNextTextEquals("Arrangement options 1");
		t.assertNextTextEquals("Arrangement options 2");
		t.assertNextTextEquals("Arrangement:");
		t.assertNextTextEquals("Arrêt du capteur");
		t.assertNextTextEquals("Atlantic SOLERIO V3");
		t.assertNextTextEquals("Aton DeltaSol BS");
		t.assertNextTextEquals("Aufsummierte Besprühungzeit:");
		t.assertNextTextEquals("Ausgang A");
		t.assertNextTextEquals("Ausgang B");
		t.assertNextTextEquals("Ausgang C");
		t.assertNextTextEquals("Ausgang D");
		t.assertNextTextEquals("Ausschaltschwelle");
		t.assertNextTextEquals("Ausschalttemperaturdifferenz");
		t.assertNextTextEquals("Aussentemperatur");
		t.assertNextTextEquals("Aussentemperatur Bus");
		t.assertNextTextEquals("Autorisation externe régulateur");
		t.assertNextTextEquals("Außentemperatur");
		t.assertNextTextEquals("Average pump speed");
		t.assertNextTextEquals("Avertissement : Carte mémoire SD");
		t.assertNextTextEquals("Avertissement : Circulation nocturne");
		t.assertNextTextEquals("Avertissement : Départ/retour inversés");
		t.assertNextTextEquals("Avertissement : Température maximale du réservoir");
		t.assertNextTextEquals("Avertissement : ΔT trop élevée");
		t.assertNextTextEquals("BH demand");
		t.assertNextTextEquals("BLPR 1");
		t.assertNextTextEquals("BLPR 2");
		t.assertNextTextEquals("BLPR 3");
		t.assertNextTextEquals("BLPR 4");
		t.assertNextTextEquals("BLSC 1");
		t.assertNextTextEquals("BLSC 2");
		t.assertNextTextEquals("BLSC 3");
		t.assertNextTextEquals("BLSC 4");
		t.assertNextTextEquals("BS Solex US");
		t.assertNextTextEquals("BS: Betriebsstunden Relais 1");
		t.assertNextTextEquals("BS: Betriebsstunden Relais 2");
		t.assertNextTextEquals("BS: Heures de fonctionnement relais 1");
		t.assertNextTextEquals("BS: Heures de fonctionnement relais 2");
		t.assertNextTextEquals("BS: Operating hours relay 1");
		t.assertNextTextEquals("BS: Operating hours relay 2");
		t.assertNextTextEquals("BSR 1");
		t.assertNextTextEquals("BSR 2");
		t.assertNextTextEquals("BSR 3");
		t.assertNextTextEquals("BSR 4");
		t.assertNextTextEquals("BW-Ladepumpe");
		t.assertNextTextEquals("Backup heating");
		t.assertNextTextEquals("Backup heating normal");
		t.assertNextTextEquals("Balance Duration P1 on");
		t.assertNextTextEquals("Balance Duration P2 on");
		t.assertNextTextEquals("Bars");
		t.assertNextTextEquals("Beckenmax.");
		t.assertNextTextEquals("Befüllung");
		t.assertNextTextEquals("Beladung");
		t.assertNextTextEquals("Betriebsart");
		t.assertNextTextEquals("Betriebsart (Kühlen/Heizen)");
		t.assertNextTextEquals("Betriebsmeldung");
		t.assertNextTextEquals("Betriebsrelais ein");
		t.assertNextTextEquals("Betriebssekunden");
		t.assertNextTextEquals("Betriebssekunden Ausgang PWM 1");
		t.assertNextTextEquals("Betriebssekunden Ausgang PWM 2");
		t.assertNextTextEquals("Betriebssekunden R1");
		t.assertNextTextEquals("Betriebssekunden R2");
		t.assertNextTextEquals("Betriebssekunden R3");
		t.assertNextTextEquals("Betriebssekunden R4");
		t.assertNextTextEquals("Betriebssekunden R5");
		t.assertNextTextEquals("Betriebssekunden R6");
		t.assertNextTextEquals("Betriebssekunden R7");
		t.assertNextTextEquals("Betriebssekunden R8");
		t.assertNextTextEquals("Betriebssekunden R9");
		t.assertNextTextEquals("Betriebssekunden Relais 1");
		t.assertNextTextEquals("Betriebssekunden Relais 2");
		t.assertNextTextEquals("Betriebssekunden Relais 3");
		t.assertNextTextEquals("Betriebssekunden Relais 4");
		t.assertNextTextEquals("Betriebssekunden Relais 5");
		t.assertNextTextEquals("Betriebssekunden Relais FastOff");
		t.assertNextTextEquals("Betriebssekunden Relais Pumpe");
		t.assertNextTextEquals("Betriebssekunden Relais pot.frei");
		t.assertNextTextEquals("Betriebssekunden WP");
		t.assertNextTextEquals("Betriebsstatus");
		t.assertNextTextEquals("Betriebsstunden");
		t.assertNextTextEquals("Betriebsstunden 1");
		t.assertNextTextEquals("Betriebsstunden 2");
		t.assertNextTextEquals("Betriebsstunden 3");
		t.assertNextTextEquals("Betriebsstunden 4");
		t.assertNextTextEquals("Betriebsstunden 5");
		t.assertNextTextEquals("Betriebsstunden 6");
		t.assertNextTextEquals("Betriebsstunden Heizung");
		t.assertNextTextEquals("Betriebsstunden Nachheizung");
		t.assertNextTextEquals("Betriebsstunden R1");
		t.assertNextTextEquals("Betriebsstunden R2");
		t.assertNextTextEquals("Betriebsstunden Relais");
		t.assertNextTextEquals("Betriebsstunden Relais 1");
		t.assertNextTextEquals("Betriebsstunden Relais 2");
		t.assertNextTextEquals("Betriebsstunden Relais 3");
		t.assertNextTextEquals("Betriebsstunden Relais 4");
		t.assertNextTextEquals("Betriebsstunden Relais1");
		t.assertNextTextEquals("Betriebsstunden Relais2");
		t.assertNextTextEquals("Betriebsstunden-Flag");
		t.assertNextTextEquals("Betriebstage");
		t.assertNextTextEquals("Betriebszeit Gesamt");
		t.assertNextTextEquals("Betriebszeit Primärp.");
		t.assertNextTextEquals("Betriebszeit Zirkulation");
		t.assertNextTextEquals("Bilan durée P1 off");
		t.assertNextTextEquals("Bilan durée P1 on");
		t.assertNextTextEquals("Bilan quantité de chauleur");
		t.assertNextTextEquals("Bilanz Dauer P1 an");
		t.assertNextTextEquals("Bilanz Dauer P2 an");
		t.assertNextTextEquals("Bilanz Heat quantity");
		t.assertNextTextEquals("Bilanz Wärmemenge");
		t.assertNextTextEquals("Bloc de fonctions 1");
		t.assertNextTextEquals("Bloc de fonctions 2");
		t.assertNextTextEquals("Bloc. brûleur 2");
		t.assertNextTextEquals("Blockierschutz 1");
		t.assertNextTextEquals("Blockierschutz 2");
		t.assertNextTextEquals("Blockierschutz 3");
		t.assertNextTextEquals("Blockierschutz 4");
		t.assertNextTextEquals("Blockierschutz R2");
		t.assertNextTextEquals("Blockierschutz R4");
		t.assertNextTextEquals("Blockierschutz aktiv");
		t.assertNextTextEquals("Blocking protection 1");
		t.assertNextTextEquals("Blocking protection 2");
		t.assertNextTextEquals("Blocking protection 3");
		t.assertNextTextEquals("Blocking protection 4");
		t.assertNextTextEquals("Blocking protection R2");
		t.assertNextTextEquals("Blocking protection R4");
		t.assertNextTextEquals("Blocking protection active");
		t.assertNextTextEquals("Boiler block");
		t.assertNextTextEquals("Boiler starts");
		t.assertNextTextEquals("Boiler temperature");
		t.assertNextTextEquals("Brauchwasserspeicher");
		t.assertNextTextEquals("Brennersperre 2");
		t.assertNextTextEquals("Brennerstarts");
		t.assertNextTextEquals("Broadcast");
		t.assertNextTextEquals("Btus");
		t.assertNextTextEquals("Buffer temperature");
		t.assertNextTextEquals("Byte relais");
		t.assertNextTextEquals("C1");
		t.assertNextTextEquals("CC Courbe de chauffe");
		t.assertNextTextEquals("CC1-DE-nom.");
		t.assertNextTextEquals("CC2-DE-nom.");
		t.assertNextTextEquals("CC3-DE-nom.");
		t.assertNextTextEquals("CC_1_T_Départnom.");
		t.assertNextTextEquals("CC_2_T_Départnom.");
		t.assertNextTextEquals("CC_3_T_Départnom.");
		t.assertNextTextEquals("CC_4_T_Départnom.");
		t.assertNextTextEquals("CC_5_T_Départnom.");
		t.assertNextTextEquals("CD");
		t.assertNextTextEquals("COSMO Multi HC 1 Concrete drying [Module 1]");
		t.assertNextTextEquals("COSMO Multi HC 2 Concrete drying [Module 2]");
		t.assertNextTextEquals("COSMO Multi HC 3 Concrete drying [Module 3]");
		t.assertNextTextEquals("COSMO Multi HK 1 Estrichtrockung [Modul 1]");
		t.assertNextTextEquals("COSMO Multi HK 2 Estrichtrockung [Modul 2]");
		t.assertNextTextEquals("COSMO Multi HK 3 Estrichtrockung [Modul 3]");
		t.assertNextTextEquals("COSMO Multi HK Estrichtrockung [Lokal]");
		t.assertNextTextEquals("COSMO Multi [Controller]");
		t.assertNextTextEquals("COSMO Multi [HQM]");
		t.assertNextTextEquals("COSMO Multi [Regler]");
		t.assertNextTextEquals("COSMO Multi [WMZ]");
		t.assertNextTextEquals("COSMO UNO");
		t.assertNextTextEquals("COSMO UNO [HQM1]");
		t.assertNextTextEquals("COSMO UNO [WMZ1]");
		t.assertNextTextEquals("CS ein");
		t.assertNextTextEquals("CS on");
		t.assertNextTextEquals("CS1.2");
		t.assertNextTextEquals("CS2.2");
		t.assertNextTextEquals("CU");
		t.assertNextTextEquals("Caleffi Biomassa");
		t.assertNextTextEquals("Caleffi WP");
		t.assertNextTextEquals("Capteur");
		t.assertNextTextEquals("Capteur minimal.");
		t.assertNextTextEquals("Capteurs tubulaires");
		t.assertNextTextEquals("Cell temperature");
		t.assertNextTextEquals("Chaleur");
		t.assertNextTextEquals("Chaleur 2");
		t.assertNextTextEquals("Chaleur 3");
		t.assertNextTextEquals("Chaleur MWh");
		t.assertNextTextEquals("Chaleur Wh");
		t.assertNextTextEquals("Chaleur année");
		t.assertNextTextEquals("Chaleur année dernière");
		t.assertNextTextEquals("Chaleur au total");
		t.assertNextTextEquals("Chaleur aujourd'hui");
		t.assertNextTextEquals("Chaleur hier");
		t.assertNextTextEquals("Chaleur kWh");
		t.assertNextTextEquals("Chaleur mois");
		t.assertNextTextEquals("Chaleur mois dernier");
		t.assertNextTextEquals("Chaleur semaine");
		t.assertNextTextEquals("Chaleur semaine dernière");
		t.assertNextTextEquals("Chaleur solaire");
		t.assertNextTextEquals("Chaleur solaire_1s");
		t.assertNextTextEquals("Chaleur2");
		t.assertNextTextEquals("Chaleur3");
		t.assertNextTextEquals("Chaleur4");
		t.assertNextTextEquals("Chaleur5");
		t.assertNextTextEquals("Changeover valve boiler");
		t.assertNextTextEquals("Chauffage");
		t.assertNextTextEquals("Chauffage Wh");
		t.assertNextTextEquals("Chauffage app. normal");
		t.assertNextTextEquals("Chauffage d'appoint");
		t.assertNextTextEquals("Chauffage d'appoint désinfection");
		t.assertNextTextEquals("Chauffage_Circuit de chauffage1_Dém. brûl.");
		t.assertNextTextEquals("Chauffage_Circuit de chauffage1_Etat fonc.");
		t.assertNextTextEquals("Chauffage_Circuit de chauffage1_Mode fonc.");
		t.assertNextTextEquals("Chauffage_Circuit de chauffage1_Tdép.nom._C");
		t.assertNextTextEquals("Circ. permanente");
		t.assertNextTextEquals("Circuit solaire actif");
		t.assertNextTextEquals("Circuit solaire on");
		t.assertNextTextEquals("Circulating pump");
		t.assertNextTextEquals("Circulation");
		t.assertNextTextEquals("Circulation ");
		t.assertNextTextEquals("Circulation active");
		t.assertNextTextEquals("Circulation blocking period");
		t.assertNextTextEquals("Circulation demand");
		t.assertNextTextEquals("Circulation detection");
		t.assertNextTextEquals("Circulation désinfection");
		t.assertNextTextEquals("Circulation nocturne");
		t.assertNextTextEquals("Circulation sensor");
		t.assertNextTextEquals("Circulation switch-on time");
		t.assertNextTextEquals("Circulation temperature");
		t.assertNextTextEquals("Circulation thermique");
		t.assertNextTextEquals("Circulation time counter");
		t.assertNextTextEquals("Code erreur");
		t.assertNextTextEquals("Code erreur 5 min");
		t.assertNextTextEquals("Code erreur jour");
		t.assertNextTextEquals("Code système :");
		t.assertNextTextEquals("Cold start");
		t.assertNextTextEquals("Cold water ");
		t.assertNextTextEquals("Cold water temperature");
		t.assertNextTextEquals("Cold water temperature ");
		t.assertNextTextEquals("Collective error message");
		t.assertNextTextEquals("Collector");
		t.assertNextTextEquals("Collector antifreeze");
		t.assertNextTextEquals("Collector cooling");
		t.assertNextTextEquals("Collector emergency temperature");
		t.assertNextTextEquals("Collector minimum");
		t.assertNextTextEquals("Collector minimum temperature");
		t.assertNextTextEquals("Collector shutdown");
		t.assertNextTextEquals("Collector temperature");
		t.assertNextTextEquals("Collector temperature (TC)");
		t.assertNextTextEquals("Commande 1");
		t.assertNextTextEquals("Commande 2");
		t.assertNextTextEquals("Commande vanne mélangeuse");
		t.assertNextTextEquals("Compte à rebours Blocage");
		t.assertNextTextEquals("Compteur d'impulsions 1 (volume 1/2)");
		t.assertNextTextEquals("Compteur d'impulsions 2 (volume 3)");
		t.assertNextTextEquals("Compteur d'impulsions 3 (volume 4)");
		t.assertNextTextEquals("Compteur d'impulsions 4 (volume 5)");
		t.assertNextTextEquals("Compteur d'impulsions 5 (courant 1)");
		t.assertNextTextEquals("Compteur d'impulsions 6 (courant 2)");
		t.assertNextTextEquals("Compteur d'impulsions 7 (énergie th. 1)");
		t.assertNextTextEquals("Compteur d'impulsions 8 (énergie th. 2)");
		t.assertNextTextEquals("Compteur d'impulsions 9 (gaz 1)");
		t.assertNextTextEquals("Compteur horaire circulation");
		t.assertNextTextEquals("Compteur impulsions 1");
		t.assertNextTextEquals("Compteur impulsions 2");
		t.assertNextTextEquals("Computer");
		t.assertNextTextEquals("Concentration d'antigel");
		t.assertNextTextEquals("ConergyDT5");
		t.assertNextTextEquals("Control 1");
		t.assertNextTextEquals("Control 2");
		t.assertNextTextEquals("Control flags");
		t.assertNextTextEquals("Control register");
		t.assertNextTextEquals("Control status");
		t.assertNextTextEquals("Control time (tc)");
		t.assertNextTextEquals("Controller output 1");
		t.assertNextTextEquals("Controller output 2");
		t.assertNextTextEquals("Controller variant");
		t.assertNextTextEquals("Controller version");
		t.assertNextTextEquals("Contrôle Pompe");
		t.assertNextTextEquals("Contrôle flags");
		t.assertNextTextEquals("Contrôle réglage");
		t.assertNextTextEquals("Core: ");
		t.assertNextTextEquals("Correction jour");
		t.assertNextTextEquals("Countdown Sperrung");
		t.assertNextTextEquals("Countdown blockage");
		t.assertNextTextEquals("Courbe");
		t.assertNextTextEquals("Court-circuit sonde");
		t.assertNextTextEquals("Court-circuit sonde S1");
		t.assertNextTextEquals("Court-circuit sonde S10");
		t.assertNextTextEquals("Court-circuit sonde S11");
		t.assertNextTextEquals("Court-circuit sonde S12");
		t.assertNextTextEquals("Court-circuit sonde S2");
		t.assertNextTextEquals("Court-circuit sonde S3");
		t.assertNextTextEquals("Court-circuit sonde S4");
		t.assertNextTextEquals("Court-circuit sonde S5");
		t.assertNextTextEquals("Court-circuit sonde S6");
		t.assertNextTextEquals("Court-circuit sonde S7");
		t.assertNextTextEquals("Court-circuit sonde S8");
		t.assertNextTextEquals("Court-circuit sonde S9");
		t.assertNextTextEquals("CubicMeters");
		t.assertNextTextEquals("CubicMetersPerHour");
		t.assertNextTextEquals("Current Impulse Interval Sensor 1");
		t.assertNextTextEquals("Current Impulse Interval Sensor 2");
		t.assertNextTextEquals("Current Impulse Interval Sensor 3");
		t.assertNextTextEquals("Current Impulse Interval Sonde 1");
		t.assertNextTextEquals("Current Impulse Interval Sonde 2");
		t.assertNextTextEquals("Current Impulse Interval Sonde 3");
		t.assertNextTextEquals("Current Sensor 4");
		t.assertNextTextEquals("Current sensor 4");
		t.assertNextTextEquals("Current set value (T-SET)");
		t.assertNextTextEquals("Current set value:");
		t.assertNextTextEquals("Current1");
		t.assertNextTextEquals("Current2");
		t.assertNextTextEquals("Curve");
		t.assertNextTextEquals("Cycles de fonctionnement");
		t.assertNextTextEquals("D-Impulsion");
		t.assertNextTextEquals("D-US");
		t.assertNextTextEquals("DDS-Crawler");
		t.assertNextTextEquals("DFA");
		t.assertNextTextEquals("DHW controller");
		t.assertNextTextEquals("DHW demand temperature (off)");
		t.assertNextTextEquals("DHW demand temperature (on)");
		t.assertNextTextEquals("DHW heating");
		t.assertNextTextEquals("DHW loading p.");
		t.assertNextTextEquals("DHW production active");
		t.assertNextTextEquals("DHW set temperature");
		t.assertNextTextEquals("DHW store");
		t.assertNextTextEquals("DHW temperature");
		t.assertNextTextEquals("DHW temperature (Control)");
		t.assertNextTextEquals("DHW temperature (Display)");
		t.assertNextTextEquals("DL2");
		t.assertNextTextEquals("DL3");
		t.assertNextTextEquals("DR 1");
		t.assertNextTextEquals("DR 2");
		t.assertNextTextEquals("DR 3");
		t.assertNextTextEquals("DR 4");
		t.assertNextTextEquals("DSPlus UMSYS [Controller]");
		t.assertNextTextEquals("DSPlus UMSYS [Regler]");
		t.assertNextTextEquals("DT4 (B)");
		t.assertNextTextEquals("DT4 (MS)");
		t.assertNextTextEquals("DZ: Drehzahl 1");
		t.assertNextTextEquals("DZ: Drehzahl 2");
		t.assertNextTextEquals("Date");
		t.assertNextTextEquals("Date measured values");
		t.assertNextTextEquals("Date système");
		t.assertNextTextEquals("Date valeurs de mesure");
		t.assertNextTextEquals("Date/Heure");
		t.assertNextTextEquals("Date/Time");
		t.assertNextTextEquals("Datum");
		t.assertNextTextEquals("Datum/Uhrzeit");
		t.assertNextTextEquals("Datum_Messdaten");
		t.assertNextTextEquals("Dauer Regelungsblock");
		t.assertNextTextEquals("Dauerzirkulation");
		t.assertNextTextEquals("Day");
		t.assertNextTextEquals("Day correction");
		t.assertNextTextEquals("Day error code");
		t.assertNextTextEquals("Day:");
		t.assertNextTextEquals("Days");
		t.assertNextTextEquals("DeDietrich Diemasol Ai v2");
		t.assertNextTextEquals("DeDietrich Diemasol C v2007");
		t.assertNextTextEquals("DeDietrich DrainBack");
		t.assertNextTextEquals("DeDietrich Drainback (Control)");
		t.assertNextTextEquals("DeDietrich Sol Plus ER 709");
		t.assertNextTextEquals("DeDietrich Sol Plus Trio");
		t.assertNextTextEquals("Debug1");
		t.assertNextTextEquals("Debug2");
		t.assertNextTextEquals("Debug3");
		t.assertNextTextEquals("Debug4");
		t.assertNextTextEquals("Debug5");
		t.assertNextTextEquals("DegreesAngular");
		t.assertNextTextEquals("DegreesCelsius");
		t.assertNextTextEquals("DegreesFahrenheit");
		t.assertNextTextEquals("DegreesKelvin");
		t.assertNextTextEquals("DeltaSol AL");
		t.assertNextTextEquals("DeltaSol AL E HE");
		t.assertNextTextEquals("DeltaSol AL-E");
		t.assertNextTextEquals("DeltaSol B");
	}

	private void testTextsPart2(TextTester t) {
		t.assertNextTextEquals("DeltaSol BS");
		t.assertNextTextEquals("DeltaSol BS (DT4)");
		t.assertNextTextEquals("DeltaSol BS 2009");
		t.assertNextTextEquals("DeltaSol BS Plus");
		t.assertNextTextEquals("DeltaSol BS Plus BTU");
		t.assertNextTextEquals("DeltaSol BS/2 HE");
		t.assertNextTextEquals("DeltaSol BS/2 HE [HQM]");
		t.assertNextTextEquals("DeltaSol BS/2 HE [WMZ]");
		t.assertNextTextEquals("DeltaSol BS/4 HE");
		t.assertNextTextEquals("DeltaSol BS/4 HE [HQM]");
		t.assertNextTextEquals("DeltaSol BS/4 HE [WMZ]");
		t.assertNextTextEquals("DeltaSol BS/DrainBack");
		t.assertNextTextEquals("DeltaSol BS/DrainBack (Fahrenheit)");
		t.assertNextTextEquals("DeltaSol BS/DrainBack (Fahrenheit/BTU)");
		t.assertNextTextEquals("DeltaSol BX");
		t.assertNextTextEquals("DeltaSol BX Plus V2A [Controller]");
		t.assertNextTextEquals("DeltaSol BX Plus V2A [HQM 1]");
		t.assertNextTextEquals("DeltaSol BX Plus V2A [HQM 2]");
		t.assertNextTextEquals("DeltaSol BX Plus V2A [Heating circuit 1]");
		t.assertNextTextEquals("DeltaSol BX Plus V2A [Heating circuit 2]");
		t.assertNextTextEquals("DeltaSol BX Plus V2A [Heizkreis 1]");
		t.assertNextTextEquals("DeltaSol BX Plus V2A [Heizkreis 2]");
		t.assertNextTextEquals("DeltaSol BX Plus V2A [Module]");
		t.assertNextTextEquals("DeltaSol BX Plus V2A [Modules]");
		t.assertNextTextEquals("DeltaSol BX Plus V2A [Regler]");
		t.assertNextTextEquals("DeltaSol BX Plus V2A [WMZ 1]");
		t.assertNextTextEquals("DeltaSol BX Plus V2A [WMZ 2]");
		t.assertNextTextEquals("DeltaSol BX Plus [Controller]");
		t.assertNextTextEquals("DeltaSol BX Plus [HQM #0]");
		t.assertNextTextEquals("DeltaSol BX Plus [HQM #10]");
		t.assertNextTextEquals("DeltaSol BX Plus [HQM #11]");
		t.assertNextTextEquals("DeltaSol BX Plus [HQM #12]");
		t.assertNextTextEquals("DeltaSol BX Plus [HQM #13]");
		t.assertNextTextEquals("DeltaSol BX Plus [HQM #14]");
		t.assertNextTextEquals("DeltaSol BX Plus [HQM #15]");
		t.assertNextTextEquals("DeltaSol BX Plus [HQM #1]");
		t.assertNextTextEquals("DeltaSol BX Plus [HQM #2]");
		t.assertNextTextEquals("DeltaSol BX Plus [HQM #3]");
		t.assertNextTextEquals("DeltaSol BX Plus [HQM #4]");
		t.assertNextTextEquals("DeltaSol BX Plus [HQM #5]");
		t.assertNextTextEquals("DeltaSol BX Plus [HQM #6]");
		t.assertNextTextEquals("DeltaSol BX Plus [HQM #7]");
		t.assertNextTextEquals("DeltaSol BX Plus [HQM #8]");
		t.assertNextTextEquals("DeltaSol BX Plus [HQM #9]");
		t.assertNextTextEquals("DeltaSol BX Plus [HQM #]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heating circuit #0]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heating circuit #10]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heating circuit #11]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heating circuit #12]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heating circuit #13]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heating circuit #14]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heating circuit #15]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heating circuit #1]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heating circuit #2]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heating circuit #3]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heating circuit #4]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heating circuit #5]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heating circuit #6]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heating circuit #7]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heating circuit #8]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heating circuit #9]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heating circuit #]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heizkreis #0]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heizkreis #10]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heizkreis #11]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heizkreis #12]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heizkreis #13]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heizkreis #14]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heizkreis #15]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heizkreis #1]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heizkreis #2]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heizkreis #3]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heizkreis #4]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heizkreis #5]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heizkreis #6]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heizkreis #7]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heizkreis #8]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heizkreis #9]");
		t.assertNextTextEquals("DeltaSol BX Plus [Heizkreis #]");
		t.assertNextTextEquals("DeltaSol BX Plus [Modul #0]");
		t.assertNextTextEquals("DeltaSol BX Plus [Modul #10]");
		t.assertNextTextEquals("DeltaSol BX Plus [Modul #11]");
		t.assertNextTextEquals("DeltaSol BX Plus [Modul #12]");
		t.assertNextTextEquals("DeltaSol BX Plus [Modul #13]");
		t.assertNextTextEquals("DeltaSol BX Plus [Modul #14]");
		t.assertNextTextEquals("DeltaSol BX Plus [Modul #15]");
		t.assertNextTextEquals("DeltaSol BX Plus [Modul #1]");
		t.assertNextTextEquals("DeltaSol BX Plus [Modul #2]");
		t.assertNextTextEquals("DeltaSol BX Plus [Modul #3]");
		t.assertNextTextEquals("DeltaSol BX Plus [Modul #4]");
		t.assertNextTextEquals("DeltaSol BX Plus [Modul #5]");
		t.assertNextTextEquals("DeltaSol BX Plus [Modul #6]");
		t.assertNextTextEquals("DeltaSol BX Plus [Modul #7]");
		t.assertNextTextEquals("DeltaSol BX Plus [Modul #8]");
		t.assertNextTextEquals("DeltaSol BX Plus [Modul #9]");
		t.assertNextTextEquals("DeltaSol BX Plus [Modul #]");
		t.assertNextTextEquals("DeltaSol BX Plus [Module #0]");
		t.assertNextTextEquals("DeltaSol BX Plus [Module #10]");
		t.assertNextTextEquals("DeltaSol BX Plus [Module #11]");
		t.assertNextTextEquals("DeltaSol BX Plus [Module #12]");
		t.assertNextTextEquals("DeltaSol BX Plus [Module #13]");
		t.assertNextTextEquals("DeltaSol BX Plus [Module #14]");
		t.assertNextTextEquals("DeltaSol BX Plus [Module #15]");
		t.assertNextTextEquals("DeltaSol BX Plus [Module #1]");
		t.assertNextTextEquals("DeltaSol BX Plus [Module #2]");
		t.assertNextTextEquals("DeltaSol BX Plus [Module #3]");
		t.assertNextTextEquals("DeltaSol BX Plus [Module #4]");
		t.assertNextTextEquals("DeltaSol BX Plus [Module #5]");
		t.assertNextTextEquals("DeltaSol BX Plus [Module #6]");
		t.assertNextTextEquals("DeltaSol BX Plus [Module #7]");
		t.assertNextTextEquals("DeltaSol BX Plus [Module #8]");
		t.assertNextTextEquals("DeltaSol BX Plus [Module #9]");
		t.assertNextTextEquals("DeltaSol BX Plus [Module #]");
		t.assertNextTextEquals("DeltaSol BX Plus [Module]");
		t.assertNextTextEquals("DeltaSol BX Plus [Modules]");
		t.assertNextTextEquals("DeltaSol BX Plus [Regler]");
		t.assertNextTextEquals("DeltaSol BX Plus [WMZ #0]");
		t.assertNextTextEquals("DeltaSol BX Plus [WMZ #10]");
		t.assertNextTextEquals("DeltaSol BX Plus [WMZ #11]");
		t.assertNextTextEquals("DeltaSol BX Plus [WMZ #12]");
		t.assertNextTextEquals("DeltaSol BX Plus [WMZ #13]");
		t.assertNextTextEquals("DeltaSol BX Plus [WMZ #14]");
		t.assertNextTextEquals("DeltaSol BX Plus [WMZ #15]");
		t.assertNextTextEquals("DeltaSol BX Plus [WMZ #1]");
		t.assertNextTextEquals("DeltaSol BX Plus [WMZ #2]");
		t.assertNextTextEquals("DeltaSol BX Plus [WMZ #3]");
		t.assertNextTextEquals("DeltaSol BX Plus [WMZ #4]");
		t.assertNextTextEquals("DeltaSol BX Plus [WMZ #5]");
		t.assertNextTextEquals("DeltaSol BX Plus [WMZ #6]");
		t.assertNextTextEquals("DeltaSol BX Plus [WMZ #7]");
		t.assertNextTextEquals("DeltaSol BX Plus [WMZ #8]");
		t.assertNextTextEquals("DeltaSol BX Plus [WMZ #9]");
		t.assertNextTextEquals("DeltaSol BX Plus [WMZ #]");
		t.assertNextTextEquals("DeltaSol BX Pro [Controller]");
		t.assertNextTextEquals("DeltaSol BX Pro [HQM #0]");
		t.assertNextTextEquals("DeltaSol BX Pro [HQM #10]");
		t.assertNextTextEquals("DeltaSol BX Pro [HQM #11]");
		t.assertNextTextEquals("DeltaSol BX Pro [HQM #12]");
		t.assertNextTextEquals("DeltaSol BX Pro [HQM #13]");
		t.assertNextTextEquals("DeltaSol BX Pro [HQM #14]");
		t.assertNextTextEquals("DeltaSol BX Pro [HQM #15]");
		t.assertNextTextEquals("DeltaSol BX Pro [HQM #1]");
		t.assertNextTextEquals("DeltaSol BX Pro [HQM #2]");
		t.assertNextTextEquals("DeltaSol BX Pro [HQM #3]");
		t.assertNextTextEquals("DeltaSol BX Pro [HQM #4]");
		t.assertNextTextEquals("DeltaSol BX Pro [HQM #5]");
		t.assertNextTextEquals("DeltaSol BX Pro [HQM #6]");
		t.assertNextTextEquals("DeltaSol BX Pro [HQM #7]");
		t.assertNextTextEquals("DeltaSol BX Pro [HQM #8]");
		t.assertNextTextEquals("DeltaSol BX Pro [HQM #9]");
		t.assertNextTextEquals("DeltaSol BX Pro [HQM #]");
		t.assertNextTextEquals("DeltaSol BX Pro [Regler]");
		t.assertNextTextEquals("DeltaSol BX Pro [WMZ #0]");
		t.assertNextTextEquals("DeltaSol BX Pro [WMZ #10]");
		t.assertNextTextEquals("DeltaSol BX Pro [WMZ #11]");
		t.assertNextTextEquals("DeltaSol BX Pro [WMZ #12]");
		t.assertNextTextEquals("DeltaSol BX Pro [WMZ #13]");
		t.assertNextTextEquals("DeltaSol BX Pro [WMZ #14]");
		t.assertNextTextEquals("DeltaSol BX Pro [WMZ #15]");
		t.assertNextTextEquals("DeltaSol BX Pro [WMZ #1]");
		t.assertNextTextEquals("DeltaSol BX Pro [WMZ #2]");
		t.assertNextTextEquals("DeltaSol BX Pro [WMZ #3]");
		t.assertNextTextEquals("DeltaSol BX Pro [WMZ #4]");
		t.assertNextTextEquals("DeltaSol BX Pro [WMZ #5]");
		t.assertNextTextEquals("DeltaSol BX Pro [WMZ #6]");
		t.assertNextTextEquals("DeltaSol BX Pro [WMZ #7]");
		t.assertNextTextEquals("DeltaSol BX Pro [WMZ #8]");
		t.assertNextTextEquals("DeltaSol BX Pro [WMZ #9]");
		t.assertNextTextEquals("DeltaSol BX Pro [WMZ #]");
		t.assertNextTextEquals("DeltaSol BX WMZ");
		t.assertNextTextEquals("DeltaSol BXL");
		t.assertNextTextEquals("DeltaSol C");
		t.assertNextTextEquals("DeltaSol CS Plus");
		t.assertNextTextEquals("DeltaSol CS Plus 2.x");
		t.assertNextTextEquals("DeltaSol CS2");
		t.assertNextTextEquals("DeltaSol CS4");
		t.assertNextTextEquals("DeltaSol D");
		t.assertNextTextEquals("DeltaSol E Fahrenheit [Controller]");
		t.assertNextTextEquals("DeltaSol E Fahrenheit [HQM]");
		t.assertNextTextEquals("DeltaSol E Fahrenheit [Regler]");
		t.assertNextTextEquals("DeltaSol E Fahrenheit [WMZ]");
		t.assertNextTextEquals("DeltaSol E SorTech [Controller]");
		t.assertNextTextEquals("DeltaSol E SorTech [Regler]");
		t.assertNextTextEquals("DeltaSol E V2 HC 1 Concrete drying [Module 1]");
		t.assertNextTextEquals("DeltaSol E V2 HC 2 Concrete drying [Module 2]");
		t.assertNextTextEquals("DeltaSol E V2 HC 3 Concrete drying [Module 3]");
		t.assertNextTextEquals("DeltaSol E V2 HK 1 Estrichtrockung [Modul 1]");
		t.assertNextTextEquals("DeltaSol E V2 HK 2 Estrichtrockung [Modul 2]");
		t.assertNextTextEquals("DeltaSol E V2 HK 3 Estrichtrockung [Modul 3]");
		t.assertNextTextEquals("DeltaSol E V2 HK Estrichtrockung [Lokal]");
		t.assertNextTextEquals("DeltaSol E V2 [Controller]");
		t.assertNextTextEquals("DeltaSol E V2 [HQM]");
		t.assertNextTextEquals("DeltaSol E V2 [Regler]");
		t.assertNextTextEquals("DeltaSol E V2 [WMZ]");
		t.assertNextTextEquals("DeltaSol E [Controller]");
		t.assertNextTextEquals("DeltaSol E [HQM]");
		t.assertNextTextEquals("DeltaSol E [Regler]");
		t.assertNextTextEquals("DeltaSol E [WMZ]");
		t.assertNextTextEquals("DeltaSol ES");
		t.assertNextTextEquals("DeltaSol FCS");
		t.assertNextTextEquals("DeltaSol M [Controller]");
		t.assertNextTextEquals("DeltaSol M [HC1]");
		t.assertNextTextEquals("DeltaSol M [HC2]");
		t.assertNextTextEquals("DeltaSol M [HK1]");
		t.assertNextTextEquals("DeltaSol M [HK2]");
		t.assertNextTextEquals("DeltaSol M [HQM1]");
		t.assertNextTextEquals("DeltaSol M [HQM2]");
		t.assertNextTextEquals("DeltaSol M [Regler]");
		t.assertNextTextEquals("DeltaSol M [Volume]");
		t.assertNextTextEquals("DeltaSol M [Volumen]");
		t.assertNextTextEquals("DeltaSol M [WMZ1]");
		t.assertNextTextEquals("DeltaSol M [WMZ2]");
		t.assertNextTextEquals("DeltaSol MX - SorTech - eCoo [Controller]");
		t.assertNextTextEquals("DeltaSol MX - SorTech - eCoo [Regler]");
		t.assertNextTextEquals("DeltaSol MX [Controller]");
		t.assertNextTextEquals("DeltaSol MX [HQM #0]");
		t.assertNextTextEquals("DeltaSol MX [HQM #10]");
		t.assertNextTextEquals("DeltaSol MX [HQM #11]");
		t.assertNextTextEquals("DeltaSol MX [HQM #12]");
		t.assertNextTextEquals("DeltaSol MX [HQM #13]");
		t.assertNextTextEquals("DeltaSol MX [HQM #14]");
		t.assertNextTextEquals("DeltaSol MX [HQM #15]");
		t.assertNextTextEquals("DeltaSol MX [HQM #1]");
		t.assertNextTextEquals("DeltaSol MX [HQM #2]");
		t.assertNextTextEquals("DeltaSol MX [HQM #3]");
		t.assertNextTextEquals("DeltaSol MX [HQM #4]");
		t.assertNextTextEquals("DeltaSol MX [HQM #5]");
		t.assertNextTextEquals("DeltaSol MX [HQM #6]");
		t.assertNextTextEquals("DeltaSol MX [HQM #7]");
		t.assertNextTextEquals("DeltaSol MX [HQM #8]");
		t.assertNextTextEquals("DeltaSol MX [HQM #9]");
		t.assertNextTextEquals("DeltaSol MX [HQM #]");
		t.assertNextTextEquals("DeltaSol MX [Heating circuit #0]");
		t.assertNextTextEquals("DeltaSol MX [Heating circuit #10]");
		t.assertNextTextEquals("DeltaSol MX [Heating circuit #11]");
		t.assertNextTextEquals("DeltaSol MX [Heating circuit #12]");
		t.assertNextTextEquals("DeltaSol MX [Heating circuit #13]");
		t.assertNextTextEquals("DeltaSol MX [Heating circuit #14]");
		t.assertNextTextEquals("DeltaSol MX [Heating circuit #15]");
		t.assertNextTextEquals("DeltaSol MX [Heating circuit #1]");
		t.assertNextTextEquals("DeltaSol MX [Heating circuit #2]");
		t.assertNextTextEquals("DeltaSol MX [Heating circuit #3]");
		t.assertNextTextEquals("DeltaSol MX [Heating circuit #4]");
		t.assertNextTextEquals("DeltaSol MX [Heating circuit #5]");
		t.assertNextTextEquals("DeltaSol MX [Heating circuit #6]");
		t.assertNextTextEquals("DeltaSol MX [Heating circuit #7]");
		t.assertNextTextEquals("DeltaSol MX [Heating circuit #8]");
		t.assertNextTextEquals("DeltaSol MX [Heating circuit #9]");
		t.assertNextTextEquals("DeltaSol MX [Heating circuit #]");
		t.assertNextTextEquals("DeltaSol MX [Heizkreis #0]");
		t.assertNextTextEquals("DeltaSol MX [Heizkreis #10]");
		t.assertNextTextEquals("DeltaSol MX [Heizkreis #11]");
		t.assertNextTextEquals("DeltaSol MX [Heizkreis #12]");
		t.assertNextTextEquals("DeltaSol MX [Heizkreis #13]");
		t.assertNextTextEquals("DeltaSol MX [Heizkreis #14]");
		t.assertNextTextEquals("DeltaSol MX [Heizkreis #15]");
		t.assertNextTextEquals("DeltaSol MX [Heizkreis #1]");
		t.assertNextTextEquals("DeltaSol MX [Heizkreis #2]");
		t.assertNextTextEquals("DeltaSol MX [Heizkreis #3]");
		t.assertNextTextEquals("DeltaSol MX [Heizkreis #4]");
		t.assertNextTextEquals("DeltaSol MX [Heizkreis #5]");
		t.assertNextTextEquals("DeltaSol MX [Heizkreis #6]");
		t.assertNextTextEquals("DeltaSol MX [Heizkreis #7]");
		t.assertNextTextEquals("DeltaSol MX [Heizkreis #8]");
		t.assertNextTextEquals("DeltaSol MX [Heizkreis #9]");
		t.assertNextTextEquals("DeltaSol MX [Heizkreis #]");
		t.assertNextTextEquals("DeltaSol MX [Modul #0]");
		t.assertNextTextEquals("DeltaSol MX [Modul #10]");
		t.assertNextTextEquals("DeltaSol MX [Modul #11]");
		t.assertNextTextEquals("DeltaSol MX [Modul #12]");
		t.assertNextTextEquals("DeltaSol MX [Modul #13]");
		t.assertNextTextEquals("DeltaSol MX [Modul #14]");
		t.assertNextTextEquals("DeltaSol MX [Modul #15]");
		t.assertNextTextEquals("DeltaSol MX [Modul #1]");
		t.assertNextTextEquals("DeltaSol MX [Modul #2]");
		t.assertNextTextEquals("DeltaSol MX [Modul #3]");
		t.assertNextTextEquals("DeltaSol MX [Modul #4]");
		t.assertNextTextEquals("DeltaSol MX [Modul #5]");
		t.assertNextTextEquals("DeltaSol MX [Modul #6]");
		t.assertNextTextEquals("DeltaSol MX [Modul #7]");
		t.assertNextTextEquals("DeltaSol MX [Modul #8]");
		t.assertNextTextEquals("DeltaSol MX [Modul #9]");
		t.assertNextTextEquals("DeltaSol MX [Modul #]");
		t.assertNextTextEquals("DeltaSol MX [Module #0]");
		t.assertNextTextEquals("DeltaSol MX [Module #10]");
		t.assertNextTextEquals("DeltaSol MX [Module #11]");
		t.assertNextTextEquals("DeltaSol MX [Module #12]");
		t.assertNextTextEquals("DeltaSol MX [Module #13]");
		t.assertNextTextEquals("DeltaSol MX [Module #14]");
		t.assertNextTextEquals("DeltaSol MX [Module #15]");
		t.assertNextTextEquals("DeltaSol MX [Module #1]");
		t.assertNextTextEquals("DeltaSol MX [Module #2]");
		t.assertNextTextEquals("DeltaSol MX [Module #3]");
		t.assertNextTextEquals("DeltaSol MX [Module #4]");
		t.assertNextTextEquals("DeltaSol MX [Module #5]");
		t.assertNextTextEquals("DeltaSol MX [Module #6]");
		t.assertNextTextEquals("DeltaSol MX [Module #7]");
		t.assertNextTextEquals("DeltaSol MX [Module #8]");
		t.assertNextTextEquals("DeltaSol MX [Module #9]");
		t.assertNextTextEquals("DeltaSol MX [Module #]");
		t.assertNextTextEquals("DeltaSol MX [Module]");
		t.assertNextTextEquals("DeltaSol MX [Modules]");
		t.assertNextTextEquals("DeltaSol MX [Regler]");
		t.assertNextTextEquals("DeltaSol MX [WMZ #0]");
		t.assertNextTextEquals("DeltaSol MX [WMZ #10]");
		t.assertNextTextEquals("DeltaSol MX [WMZ #11]");
		t.assertNextTextEquals("DeltaSol MX [WMZ #12]");
		t.assertNextTextEquals("DeltaSol MX [WMZ #13]");
		t.assertNextTextEquals("DeltaSol MX [WMZ #14]");
		t.assertNextTextEquals("DeltaSol MX [WMZ #15]");
		t.assertNextTextEquals("DeltaSol MX [WMZ #1]");
		t.assertNextTextEquals("DeltaSol MX [WMZ #2]");
		t.assertNextTextEquals("DeltaSol MX [WMZ #3]");
		t.assertNextTextEquals("DeltaSol MX [WMZ #4]");
		t.assertNextTextEquals("DeltaSol MX [WMZ #5]");
		t.assertNextTextEquals("DeltaSol MX [WMZ #6]");
		t.assertNextTextEquals("DeltaSol MX [WMZ #7]");
		t.assertNextTextEquals("DeltaSol MX [WMZ #8]");
		t.assertNextTextEquals("DeltaSol MX [WMZ #9]");
		t.assertNextTextEquals("DeltaSol MX [WMZ #]");
		t.assertNextTextEquals("DeltaSol MiniPool");
		t.assertNextTextEquals("DeltaSol Plus");
		t.assertNextTextEquals("DeltaSol Pool");
		t.assertNextTextEquals("DeltaSol Pool [HQM]");
		t.assertNextTextEquals("DeltaSol Pool [WMZ]");
		t.assertNextTextEquals("DeltaSol Pro");
		t.assertNextTextEquals("DeltaSol SL [Controller]");
		t.assertNextTextEquals("DeltaSol SL [HQM1]");
		t.assertNextTextEquals("DeltaSol SL [Regler]");
		t.assertNextTextEquals("DeltaSol SL [WMZ1]");
		t.assertNextTextEquals("DeltaSol SLL [Controller]");
		t.assertNextTextEquals("DeltaSol SLL [HQM1]");
		t.assertNextTextEquals("DeltaSol SLL [Regler]");
		t.assertNextTextEquals("DeltaSol SLL [WMZ1]");
		t.assertNextTextEquals("DeltaSol SLT [Controller]");
		t.assertNextTextEquals("DeltaSol SLT [HQM #0]");
		t.assertNextTextEquals("DeltaSol SLT [HQM #10]");
		t.assertNextTextEquals("DeltaSol SLT [HQM #11]");
		t.assertNextTextEquals("DeltaSol SLT [HQM #12]");
		t.assertNextTextEquals("DeltaSol SLT [HQM #13]");
		t.assertNextTextEquals("DeltaSol SLT [HQM #14]");
		t.assertNextTextEquals("DeltaSol SLT [HQM #15]");
		t.assertNextTextEquals("DeltaSol SLT [HQM #1]");
		t.assertNextTextEquals("DeltaSol SLT [HQM #2]");
		t.assertNextTextEquals("DeltaSol SLT [HQM #3]");
		t.assertNextTextEquals("DeltaSol SLT [HQM #4]");
		t.assertNextTextEquals("DeltaSol SLT [HQM #5]");
		t.assertNextTextEquals("DeltaSol SLT [HQM #6]");
		t.assertNextTextEquals("DeltaSol SLT [HQM #7]");
		t.assertNextTextEquals("DeltaSol SLT [HQM #8]");
		t.assertNextTextEquals("DeltaSol SLT [HQM #9]");
		t.assertNextTextEquals("DeltaSol SLT [HQM #]");
		t.assertNextTextEquals("DeltaSol SLT [Regler]");
		t.assertNextTextEquals("DeltaSol SLT [WMZ #0]");
		t.assertNextTextEquals("DeltaSol SLT [WMZ #10]");
		t.assertNextTextEquals("DeltaSol SLT [WMZ #11]");
		t.assertNextTextEquals("DeltaSol SLT [WMZ #12]");
		t.assertNextTextEquals("DeltaSol SLT [WMZ #13]");
		t.assertNextTextEquals("DeltaSol SLT [WMZ #14]");
		t.assertNextTextEquals("DeltaSol SLT [WMZ #15]");
		t.assertNextTextEquals("DeltaSol SLT [WMZ #1]");
		t.assertNextTextEquals("DeltaSol SLT [WMZ #2]");
		t.assertNextTextEquals("DeltaSol SLT [WMZ #3]");
		t.assertNextTextEquals("DeltaSol SLT [WMZ #4]");
		t.assertNextTextEquals("DeltaSol SLT [WMZ #5]");
		t.assertNextTextEquals("DeltaSol SLT [WMZ #6]");
		t.assertNextTextEquals("DeltaSol SLT [WMZ #7]");
		t.assertNextTextEquals("DeltaSol SLT [WMZ #8]");
		t.assertNextTextEquals("DeltaSol SLT [WMZ #9]");
		t.assertNextTextEquals("DeltaSol SLT [WMZ #]");
		t.assertNextTextEquals("DeltaT-FCT");
		t.assertNextTextEquals("DeltaT-FKT");
		t.assertNextTextEquals("DeltaTherm FK");
		t.assertNextTextEquals("DeltaTherm HC [Controller]");
		t.assertNextTextEquals("DeltaTherm HC [HQM #0]");
		t.assertNextTextEquals("DeltaTherm HC [HQM #10]");
		t.assertNextTextEquals("DeltaTherm HC [HQM #11]");
		t.assertNextTextEquals("DeltaTherm HC [HQM #12]");
		t.assertNextTextEquals("DeltaTherm HC [HQM #13]");
		t.assertNextTextEquals("DeltaTherm HC [HQM #14]");
		t.assertNextTextEquals("DeltaTherm HC [HQM #15]");
		t.assertNextTextEquals("DeltaTherm HC [HQM #1]");
		t.assertNextTextEquals("DeltaTherm HC [HQM #2]");
		t.assertNextTextEquals("DeltaTherm HC [HQM #3]");
		t.assertNextTextEquals("DeltaTherm HC [HQM #4]");
		t.assertNextTextEquals("DeltaTherm HC [HQM #5]");
		t.assertNextTextEquals("DeltaTherm HC [HQM #6]");
		t.assertNextTextEquals("DeltaTherm HC [HQM #7]");
		t.assertNextTextEquals("DeltaTherm HC [HQM #8]");
		t.assertNextTextEquals("DeltaTherm HC [HQM #9]");
		t.assertNextTextEquals("DeltaTherm HC [HQM #]");
		t.assertNextTextEquals("DeltaTherm HC [Heating circuit #0]");
		t.assertNextTextEquals("DeltaTherm HC [Heating circuit #10]");
		t.assertNextTextEquals("DeltaTherm HC [Heating circuit #11]");
		t.assertNextTextEquals("DeltaTherm HC [Heating circuit #12]");
		t.assertNextTextEquals("DeltaTherm HC [Heating circuit #13]");
		t.assertNextTextEquals("DeltaTherm HC [Heating circuit #14]");
		t.assertNextTextEquals("DeltaTherm HC [Heating circuit #15]");
		t.assertNextTextEquals("DeltaTherm HC [Heating circuit #1]");
		t.assertNextTextEquals("DeltaTherm HC [Heating circuit #2]");
		t.assertNextTextEquals("DeltaTherm HC [Heating circuit #3]");
		t.assertNextTextEquals("DeltaTherm HC [Heating circuit #4]");
		t.assertNextTextEquals("DeltaTherm HC [Heating circuit #5]");
		t.assertNextTextEquals("DeltaTherm HC [Heating circuit #6]");
		t.assertNextTextEquals("DeltaTherm HC [Heating circuit #7]");
		t.assertNextTextEquals("DeltaTherm HC [Heating circuit #8]");
		t.assertNextTextEquals("DeltaTherm HC [Heating circuit #9]");
		t.assertNextTextEquals("DeltaTherm HC [Heating circuit #]");
		t.assertNextTextEquals("DeltaTherm HC [Heizkreis #0]");
		t.assertNextTextEquals("DeltaTherm HC [Heizkreis #10]");
		t.assertNextTextEquals("DeltaTherm HC [Heizkreis #11]");
		t.assertNextTextEquals("DeltaTherm HC [Heizkreis #12]");
		t.assertNextTextEquals("DeltaTherm HC [Heizkreis #13]");
		t.assertNextTextEquals("DeltaTherm HC [Heizkreis #14]");
		t.assertNextTextEquals("DeltaTherm HC [Heizkreis #15]");
		t.assertNextTextEquals("DeltaTherm HC [Heizkreis #1]");
		t.assertNextTextEquals("DeltaTherm HC [Heizkreis #2]");
		t.assertNextTextEquals("DeltaTherm HC [Heizkreis #3]");
		t.assertNextTextEquals("DeltaTherm HC [Heizkreis #4]");
		t.assertNextTextEquals("DeltaTherm HC [Heizkreis #5]");
		t.assertNextTextEquals("DeltaTherm HC [Heizkreis #6]");
		t.assertNextTextEquals("DeltaTherm HC [Heizkreis #7]");
		t.assertNextTextEquals("DeltaTherm HC [Heizkreis #8]");
		t.assertNextTextEquals("DeltaTherm HC [Heizkreis #9]");
		t.assertNextTextEquals("DeltaTherm HC [Heizkreis #]");
		t.assertNextTextEquals("DeltaTherm HC [Modul #0]");
		t.assertNextTextEquals("DeltaTherm HC [Modul #10]");
		t.assertNextTextEquals("DeltaTherm HC [Modul #11]");
		t.assertNextTextEquals("DeltaTherm HC [Modul #12]");
		t.assertNextTextEquals("DeltaTherm HC [Modul #13]");
		t.assertNextTextEquals("DeltaTherm HC [Modul #14]");
		t.assertNextTextEquals("DeltaTherm HC [Modul #15]");
		t.assertNextTextEquals("DeltaTherm HC [Modul #1]");
		t.assertNextTextEquals("DeltaTherm HC [Modul #2]");
		t.assertNextTextEquals("DeltaTherm HC [Modul #3]");
		t.assertNextTextEquals("DeltaTherm HC [Modul #4]");
		t.assertNextTextEquals("DeltaTherm HC [Modul #5]");
		t.assertNextTextEquals("DeltaTherm HC [Modul #6]");
		t.assertNextTextEquals("DeltaTherm HC [Modul #7]");
		t.assertNextTextEquals("DeltaTherm HC [Modul #8]");
		t.assertNextTextEquals("DeltaTherm HC [Modul #9]");
		t.assertNextTextEquals("DeltaTherm HC [Modul #]");
		t.assertNextTextEquals("DeltaTherm HC [Module #0]");
		t.assertNextTextEquals("DeltaTherm HC [Module #10]");
		t.assertNextTextEquals("DeltaTherm HC [Module #11]");
		t.assertNextTextEquals("DeltaTherm HC [Module #12]");
		t.assertNextTextEquals("DeltaTherm HC [Module #13]");
		t.assertNextTextEquals("DeltaTherm HC [Module #14]");
		t.assertNextTextEquals("DeltaTherm HC [Module #15]");
		t.assertNextTextEquals("DeltaTherm HC [Module #1]");
		t.assertNextTextEquals("DeltaTherm HC [Module #2]");
		t.assertNextTextEquals("DeltaTherm HC [Module #3]");
		t.assertNextTextEquals("DeltaTherm HC [Module #4]");
		t.assertNextTextEquals("DeltaTherm HC [Module #5]");
		t.assertNextTextEquals("DeltaTherm HC [Module #6]");
		t.assertNextTextEquals("DeltaTherm HC [Module #7]");
		t.assertNextTextEquals("DeltaTherm HC [Module #8]");
		t.assertNextTextEquals("DeltaTherm HC [Module #9]");
		t.assertNextTextEquals("DeltaTherm HC [Module #]");
		t.assertNextTextEquals("DeltaTherm HC [Regler]");
		t.assertNextTextEquals("DeltaTherm HC [WMZ #0]");
		t.assertNextTextEquals("DeltaTherm HC [WMZ #10]");
		t.assertNextTextEquals("DeltaTherm HC [WMZ #11]");
		t.assertNextTextEquals("DeltaTherm HC [WMZ #12]");
		t.assertNextTextEquals("DeltaTherm HC [WMZ #13]");
		t.assertNextTextEquals("DeltaTherm HC [WMZ #14]");
		t.assertNextTextEquals("DeltaTherm HC [WMZ #15]");
		t.assertNextTextEquals("DeltaTherm HC [WMZ #1]");
		t.assertNextTextEquals("DeltaTherm HC [WMZ #2]");
		t.assertNextTextEquals("DeltaTherm HC [WMZ #3]");
		t.assertNextTextEquals("DeltaTherm HC [WMZ #4]");
		t.assertNextTextEquals("DeltaTherm HC [WMZ #5]");
		t.assertNextTextEquals("DeltaTherm HC [WMZ #6]");
		t.assertNextTextEquals("DeltaTherm HC [WMZ #7]");
		t.assertNextTextEquals("DeltaTherm HC [WMZ #8]");
		t.assertNextTextEquals("DeltaTherm HC [WMZ #9]");
		t.assertNextTextEquals("DeltaTherm HC [WMZ #]");
		t.assertNextTextEquals("DeltaTherm HC max [Controller]");
		t.assertNextTextEquals("DeltaTherm HC max [HQM #0]");
		t.assertNextTextEquals("DeltaTherm HC max [HQM #10]");
		t.assertNextTextEquals("DeltaTherm HC max [HQM #11]");
		t.assertNextTextEquals("DeltaTherm HC max [HQM #12]");
		t.assertNextTextEquals("DeltaTherm HC max [HQM #13]");
		t.assertNextTextEquals("DeltaTherm HC max [HQM #14]");
		t.assertNextTextEquals("DeltaTherm HC max [HQM #15]");
		t.assertNextTextEquals("DeltaTherm HC max [HQM #1]");
		t.assertNextTextEquals("DeltaTherm HC max [HQM #2]");
		t.assertNextTextEquals("DeltaTherm HC max [HQM #3]");
		t.assertNextTextEquals("DeltaTherm HC max [HQM #4]");
		t.assertNextTextEquals("DeltaTherm HC max [HQM #5]");
		t.assertNextTextEquals("DeltaTherm HC max [HQM #6]");
		t.assertNextTextEquals("DeltaTherm HC max [HQM #7]");
		t.assertNextTextEquals("DeltaTherm HC max [HQM #8]");
		t.assertNextTextEquals("DeltaTherm HC max [HQM #9]");
		t.assertNextTextEquals("DeltaTherm HC max [HQM #]");
		t.assertNextTextEquals("DeltaTherm HC max [Heating circuit #0]");
		t.assertNextTextEquals("DeltaTherm HC max [Heating circuit #10]");
		t.assertNextTextEquals("DeltaTherm HC max [Heating circuit #11]");
		t.assertNextTextEquals("DeltaTherm HC max [Heating circuit #12]");
		t.assertNextTextEquals("DeltaTherm HC max [Heating circuit #13]");
		t.assertNextTextEquals("DeltaTherm HC max [Heating circuit #14]");
		t.assertNextTextEquals("DeltaTherm HC max [Heating circuit #15]");
		t.assertNextTextEquals("DeltaTherm HC max [Heating circuit #1]");
		t.assertNextTextEquals("DeltaTherm HC max [Heating circuit #2]");
		t.assertNextTextEquals("DeltaTherm HC max [Heating circuit #3]");
		t.assertNextTextEquals("DeltaTherm HC max [Heating circuit #4]");
		t.assertNextTextEquals("DeltaTherm HC max [Heating circuit #5]");
		t.assertNextTextEquals("DeltaTherm HC max [Heating circuit #6]");
		t.assertNextTextEquals("DeltaTherm HC max [Heating circuit #7]");
		t.assertNextTextEquals("DeltaTherm HC max [Heating circuit #8]");
		t.assertNextTextEquals("DeltaTherm HC max [Heating circuit #9]");
		t.assertNextTextEquals("DeltaTherm HC max [Heating circuit #]");
		t.assertNextTextEquals("DeltaTherm HC max [Heizkreis #0]");
		t.assertNextTextEquals("DeltaTherm HC max [Heizkreis #10]");
		t.assertNextTextEquals("DeltaTherm HC max [Heizkreis #11]");
		t.assertNextTextEquals("DeltaTherm HC max [Heizkreis #12]");
		t.assertNextTextEquals("DeltaTherm HC max [Heizkreis #13]");
		t.assertNextTextEquals("DeltaTherm HC max [Heizkreis #14]");
		t.assertNextTextEquals("DeltaTherm HC max [Heizkreis #15]");
		t.assertNextTextEquals("DeltaTherm HC max [Heizkreis #1]");
		t.assertNextTextEquals("DeltaTherm HC max [Heizkreis #2]");
		t.assertNextTextEquals("DeltaTherm HC max [Heizkreis #3]");
		t.assertNextTextEquals("DeltaTherm HC max [Heizkreis #4]");
		t.assertNextTextEquals("DeltaTherm HC max [Heizkreis #5]");
		t.assertNextTextEquals("DeltaTherm HC max [Heizkreis #6]");
		t.assertNextTextEquals("DeltaTherm HC max [Heizkreis #7]");
		t.assertNextTextEquals("DeltaTherm HC max [Heizkreis #8]");
		t.assertNextTextEquals("DeltaTherm HC max [Heizkreis #9]");
		t.assertNextTextEquals("DeltaTherm HC max [Heizkreis #]");
		t.assertNextTextEquals("DeltaTherm HC max [Modul #0]");
		t.assertNextTextEquals("DeltaTherm HC max [Modul #10]");
		t.assertNextTextEquals("DeltaTherm HC max [Modul #11]");
		t.assertNextTextEquals("DeltaTherm HC max [Modul #12]");
		t.assertNextTextEquals("DeltaTherm HC max [Modul #13]");
		t.assertNextTextEquals("DeltaTherm HC max [Modul #14]");
		t.assertNextTextEquals("DeltaTherm HC max [Modul #15]");
		t.assertNextTextEquals("DeltaTherm HC max [Modul #1]");
		t.assertNextTextEquals("DeltaTherm HC max [Modul #2]");
		t.assertNextTextEquals("DeltaTherm HC max [Modul #3]");
		t.assertNextTextEquals("DeltaTherm HC max [Modul #4]");
		t.assertNextTextEquals("DeltaTherm HC max [Modul #5]");
		t.assertNextTextEquals("DeltaTherm HC max [Modul #6]");
		t.assertNextTextEquals("DeltaTherm HC max [Modul #7]");
		t.assertNextTextEquals("DeltaTherm HC max [Modul #8]");
		t.assertNextTextEquals("DeltaTherm HC max [Modul #9]");
		t.assertNextTextEquals("DeltaTherm HC max [Modul #]");
		t.assertNextTextEquals("DeltaTherm HC max [Module #0]");
		t.assertNextTextEquals("DeltaTherm HC max [Module #10]");
		t.assertNextTextEquals("DeltaTherm HC max [Module #11]");
		t.assertNextTextEquals("DeltaTherm HC max [Module #12]");
		t.assertNextTextEquals("DeltaTherm HC max [Module #13]");
		t.assertNextTextEquals("DeltaTherm HC max [Module #14]");
		t.assertNextTextEquals("DeltaTherm HC max [Module #15]");
		t.assertNextTextEquals("DeltaTherm HC max [Module #1]");
		t.assertNextTextEquals("DeltaTherm HC max [Module #2]");
		t.assertNextTextEquals("DeltaTherm HC max [Module #3]");
		t.assertNextTextEquals("DeltaTherm HC max [Module #4]");
		t.assertNextTextEquals("DeltaTherm HC max [Module #5]");
		t.assertNextTextEquals("DeltaTherm HC max [Module #6]");
		t.assertNextTextEquals("DeltaTherm HC max [Module #7]");
		t.assertNextTextEquals("DeltaTherm HC max [Module #8]");
		t.assertNextTextEquals("DeltaTherm HC max [Module #9]");
		t.assertNextTextEquals("DeltaTherm HC max [Module #]");
		t.assertNextTextEquals("DeltaTherm HC max [Regler]");
		t.assertNextTextEquals("DeltaTherm HC max [WMZ #0]");
		t.assertNextTextEquals("DeltaTherm HC max [WMZ #10]");
		t.assertNextTextEquals("DeltaTherm HC max [WMZ #11]");
		t.assertNextTextEquals("DeltaTherm HC max [WMZ #12]");
		t.assertNextTextEquals("DeltaTherm HC max [WMZ #13]");
		t.assertNextTextEquals("DeltaTherm HC max [WMZ #14]");
		t.assertNextTextEquals("DeltaTherm HC max [WMZ #15]");
		t.assertNextTextEquals("DeltaTherm HC max [WMZ #1]");
		t.assertNextTextEquals("DeltaTherm HC max [WMZ #2]");
		t.assertNextTextEquals("DeltaTherm HC max [WMZ #3]");
		t.assertNextTextEquals("DeltaTherm HC max [WMZ #4]");
		t.assertNextTextEquals("DeltaTherm HC max [WMZ #5]");
		t.assertNextTextEquals("DeltaTherm HC max [WMZ #6]");
		t.assertNextTextEquals("DeltaTherm HC max [WMZ #7]");
		t.assertNextTextEquals("DeltaTherm HC max [WMZ #8]");
		t.assertNextTextEquals("DeltaTherm HC max [WMZ #9]");
		t.assertNextTextEquals("DeltaTherm HC max [WMZ #]");
		t.assertNextTextEquals("DeltaTherm HC mini [Controller]");
		t.assertNextTextEquals("DeltaTherm HC mini [Heating circuit 1]");
		t.assertNextTextEquals("DeltaTherm HC mini [Heizkreis 1]");
		t.assertNextTextEquals("DeltaTherm HC mini [Regler]");
		t.assertNextTextEquals("DeltaTherm PV");
		t.assertNextTextEquals("Demande CA");
		t.assertNextTextEquals("Demande ECS (off)");
		t.assertNextTextEquals("Demande ECS (on)");
		t.assertNextTextEquals("Demande circulation");
		t.assertNextTextEquals("Desinf. Phase");
		t.assertNextTextEquals("Desinfektion: Fehlgeschlagen");
		t.assertNextTextEquals("Desinfektion: Vorlauf zu niedrig");
		t.assertNextTextEquals("Desinfektionsnachheizung");
		t.assertNextTextEquals("Desinfektionsspülung");
		t.assertNextTextEquals("Desinfektionszirkulation");
		t.assertNextTextEquals("Diamètre conduit à air");
		t.assertNextTextEquals("Diemasol C");
		t.assertNextTextEquals("Diff. TSs/1h");
		t.assertNextTextEquals("Diff. TSs/8h");
		t.assertNextTextEquals("Diff. TUmg/24h");
		t.assertNextTextEquals("Diff. Text/24h");
		t.assertNextTextEquals("Diff. Toutd/24h");
		t.assertNextTextEquals("Diffuse radiation");
		t.assertNextTextEquals("Diffusstrahlung");
		t.assertNextTextEquals("Différence de température d'enclenchement");
		t.assertNextTextEquals("Différence de température de déclenchement");
		t.assertNextTextEquals("Digital Input");
		t.assertNextTextEquals("Digital Sensor #");
		t.assertNextTextEquals("Digital Sensor #0");
		t.assertNextTextEquals("Digital Sensor #1");
		t.assertNextTextEquals("Digital Sensor #10");
		t.assertNextTextEquals("Digital Sensor #100");
		t.assertNextTextEquals("Digital Sensor #101");
		t.assertNextTextEquals("Digital Sensor #102");
		t.assertNextTextEquals("Digital Sensor #103");
		t.assertNextTextEquals("Digital Sensor #104");
		t.assertNextTextEquals("Digital Sensor #105");
		t.assertNextTextEquals("Digital Sensor #106");
		t.assertNextTextEquals("Digital Sensor #107");
		t.assertNextTextEquals("Digital Sensor #108");
		t.assertNextTextEquals("Digital Sensor #109");
		t.assertNextTextEquals("Digital Sensor #11");
		t.assertNextTextEquals("Digital Sensor #110");
		t.assertNextTextEquals("Digital Sensor #111");
		t.assertNextTextEquals("Digital Sensor #112");
		t.assertNextTextEquals("Digital Sensor #113");
		t.assertNextTextEquals("Digital Sensor #114");
		t.assertNextTextEquals("Digital Sensor #115");
		t.assertNextTextEquals("Digital Sensor #116");
		t.assertNextTextEquals("Digital Sensor #117");
		t.assertNextTextEquals("Digital Sensor #118");
		t.assertNextTextEquals("Digital Sensor #119");
		t.assertNextTextEquals("Digital Sensor #12");
		t.assertNextTextEquals("Digital Sensor #120");
		t.assertNextTextEquals("Digital Sensor #121");
		t.assertNextTextEquals("Digital Sensor #122");
		t.assertNextTextEquals("Digital Sensor #123");
		t.assertNextTextEquals("Digital Sensor #124");
		t.assertNextTextEquals("Digital Sensor #125");
		t.assertNextTextEquals("Digital Sensor #126");
		t.assertNextTextEquals("Digital Sensor #127");
		t.assertNextTextEquals("Digital Sensor #13");
		t.assertNextTextEquals("Digital Sensor #14");
		t.assertNextTextEquals("Digital Sensor #15");
		t.assertNextTextEquals("Digital Sensor #16");
		t.assertNextTextEquals("Digital Sensor #17");
		t.assertNextTextEquals("Digital Sensor #18");
		t.assertNextTextEquals("Digital Sensor #19");
		t.assertNextTextEquals("Digital Sensor #2");
		t.assertNextTextEquals("Digital Sensor #20");
		t.assertNextTextEquals("Digital Sensor #21");
		t.assertNextTextEquals("Digital Sensor #22");
		t.assertNextTextEquals("Digital Sensor #23");
		t.assertNextTextEquals("Digital Sensor #24");
		t.assertNextTextEquals("Digital Sensor #25");
		t.assertNextTextEquals("Digital Sensor #26");
		t.assertNextTextEquals("Digital Sensor #27");
		t.assertNextTextEquals("Digital Sensor #28");
		t.assertNextTextEquals("Digital Sensor #29");
		t.assertNextTextEquals("Digital Sensor #3");
		t.assertNextTextEquals("Digital Sensor #30");
		t.assertNextTextEquals("Digital Sensor #31");
		t.assertNextTextEquals("Digital Sensor #32");
		t.assertNextTextEquals("Digital Sensor #33");
		t.assertNextTextEquals("Digital Sensor #34");
		t.assertNextTextEquals("Digital Sensor #35");
		t.assertNextTextEquals("Digital Sensor #36");
		t.assertNextTextEquals("Digital Sensor #37");
		t.assertNextTextEquals("Digital Sensor #38");
		t.assertNextTextEquals("Digital Sensor #39");
		t.assertNextTextEquals("Digital Sensor #4");
		t.assertNextTextEquals("Digital Sensor #40");
		t.assertNextTextEquals("Digital Sensor #41");
		t.assertNextTextEquals("Digital Sensor #42");
		t.assertNextTextEquals("Digital Sensor #43");
		t.assertNextTextEquals("Digital Sensor #44");
		t.assertNextTextEquals("Digital Sensor #45");
		t.assertNextTextEquals("Digital Sensor #46");
		t.assertNextTextEquals("Digital Sensor #47");
		t.assertNextTextEquals("Digital Sensor #48");
		t.assertNextTextEquals("Digital Sensor #49");
		t.assertNextTextEquals("Digital Sensor #5");
		t.assertNextTextEquals("Digital Sensor #50");
		t.assertNextTextEquals("Digital Sensor #51");
		t.assertNextTextEquals("Digital Sensor #52");
		t.assertNextTextEquals("Digital Sensor #53");
		t.assertNextTextEquals("Digital Sensor #54");
		t.assertNextTextEquals("Digital Sensor #55");
		t.assertNextTextEquals("Digital Sensor #56");
		t.assertNextTextEquals("Digital Sensor #57");
		t.assertNextTextEquals("Digital Sensor #58");
		t.assertNextTextEquals("Digital Sensor #59");
		t.assertNextTextEquals("Digital Sensor #6");
		t.assertNextTextEquals("Digital Sensor #60");
		t.assertNextTextEquals("Digital Sensor #61");
		t.assertNextTextEquals("Digital Sensor #62");
		t.assertNextTextEquals("Digital Sensor #63");
		t.assertNextTextEquals("Digital Sensor #64");
		t.assertNextTextEquals("Digital Sensor #65");
		t.assertNextTextEquals("Digital Sensor #66");
		t.assertNextTextEquals("Digital Sensor #67");
		t.assertNextTextEquals("Digital Sensor #68");
		t.assertNextTextEquals("Digital Sensor #69");
		t.assertNextTextEquals("Digital Sensor #7");
		t.assertNextTextEquals("Digital Sensor #70");
		t.assertNextTextEquals("Digital Sensor #71");
		t.assertNextTextEquals("Digital Sensor #72");
		t.assertNextTextEquals("Digital Sensor #73");
		t.assertNextTextEquals("Digital Sensor #74");
		t.assertNextTextEquals("Digital Sensor #75");
		t.assertNextTextEquals("Digital Sensor #76");
		t.assertNextTextEquals("Digital Sensor #77");
		t.assertNextTextEquals("Digital Sensor #78");
		t.assertNextTextEquals("Digital Sensor #79");
		t.assertNextTextEquals("Digital Sensor #8");
		t.assertNextTextEquals("Digital Sensor #80");
		t.assertNextTextEquals("Digital Sensor #81");
		t.assertNextTextEquals("Digital Sensor #82");
		t.assertNextTextEquals("Digital Sensor #83");
		t.assertNextTextEquals("Digital Sensor #84");
		t.assertNextTextEquals("Digital Sensor #85");
		t.assertNextTextEquals("Digital Sensor #86");
		t.assertNextTextEquals("Digital Sensor #87");
		t.assertNextTextEquals("Digital Sensor #88");
		t.assertNextTextEquals("Digital Sensor #89");
		t.assertNextTextEquals("Digital Sensor #9");
		t.assertNextTextEquals("Digital Sensor #90");
		t.assertNextTextEquals("Digital Sensor #91");
		t.assertNextTextEquals("Digital Sensor #92");
		t.assertNextTextEquals("Digital Sensor #93");
		t.assertNextTextEquals("Digital Sensor #94");
		t.assertNextTextEquals("Digital Sensor #95");
		t.assertNextTextEquals("Digital Sensor #96");
		t.assertNextTextEquals("Digital Sensor #97");
		t.assertNextTextEquals("Digital Sensor #98");
		t.assertNextTextEquals("Digital Sensor #99");
		t.assertNextTextEquals("Digital input 9");
		t.assertNextTextEquals("Digitaler Eingang 9");
		t.assertNextTextEquals("DipSwitch");
		t.assertNextTextEquals("Disinf. Phase");
		t.assertNextTextEquals("Disinfection backup heating");
		t.assertNextTextEquals("Disinfection circulation");
		t.assertNextTextEquals("Disinfection flushing");
		t.assertNextTextEquals("Disinfection: failed");
		t.assertNextTextEquals("Disinfection: flow to low");
		t.assertNextTextEquals("Dispositif de commande à distance");
		t.assertNextTextEquals("DrainBloC");
		t.assertNextTextEquals("Drainback DeDietrich");
		t.assertNextTextEquals("Draw-off");
		t.assertNextTextEquals("Draw-off active");
		t.assertNextTextEquals("Draw-off flow rate");
		t.assertNextTextEquals("Draw-off impulse active");
		t.assertNextTextEquals("Draw-off quantity");
		t.assertNextTextEquals("Draw-off quantity in total");
		t.assertNextTextEquals("Drehzahl");
		t.assertNextTextEquals("Drehzahl 1");
		t.assertNextTextEquals("Drehzahl 1 R1");
		t.assertNextTextEquals("Drehzahl 1 R2");
		t.assertNextTextEquals("Drehzahl 1 R3");
		t.assertNextTextEquals("Drehzahl 1 R4");
		t.assertNextTextEquals("Drehzahl 1 R5");
		t.assertNextTextEquals("Drehzahl 2");
		t.assertNextTextEquals("Drehzahl 2 R1");
		t.assertNextTextEquals("Drehzahl 2 R2");
		t.assertNextTextEquals("Drehzahl 2 R3");
		t.assertNextTextEquals("Drehzahl 2 R4");
		t.assertNextTextEquals("Drehzahl 2 R5");
		t.assertNextTextEquals("Drehzahl 3");
		t.assertNextTextEquals("Drehzahl A");
		t.assertNextTextEquals("Drehzahl A1");
		t.assertNextTextEquals("Drehzahl A2");
		t.assertNextTextEquals("Drehzahl A3");
		t.assertNextTextEquals("Drehzahl Ausgang PWM 1");
		t.assertNextTextEquals("Drehzahl Ausgang PWM 2");
		t.assertNextTextEquals("Drehzahl Ladepumpe");
		t.assertNextTextEquals("Drehzahl Primaerpumpe");
		t.assertNextTextEquals("Drehzahl Primärpumpe");
		t.assertNextTextEquals("Drehzahl Pumpe 1");
		t.assertNextTextEquals("Drehzahl Pumpe 2");
		t.assertNextTextEquals("Drehzahl R1");
		t.assertNextTextEquals("Drehzahl R10");
		t.assertNextTextEquals("Drehzahl R11");
		t.assertNextTextEquals("Drehzahl R12");
		t.assertNextTextEquals("Drehzahl R13");
		t.assertNextTextEquals("Drehzahl R14");
		t.assertNextTextEquals("Drehzahl R15");
		t.assertNextTextEquals("Drehzahl R16");
		t.assertNextTextEquals("Drehzahl R17");
		t.assertNextTextEquals("Drehzahl R18");
		t.assertNextTextEquals("Drehzahl R19");
		t.assertNextTextEquals("Drehzahl R2");
		t.assertNextTextEquals("Drehzahl R20");
		t.assertNextTextEquals("Drehzahl R21");
		t.assertNextTextEquals("Drehzahl R22");
		t.assertNextTextEquals("Drehzahl R23");
		t.assertNextTextEquals("Drehzahl R24");
		t.assertNextTextEquals("Drehzahl R25");
		t.assertNextTextEquals("Drehzahl R26");
		t.assertNextTextEquals("Drehzahl R27");
		t.assertNextTextEquals("Drehzahl R28");
		t.assertNextTextEquals("Drehzahl R29");
		t.assertNextTextEquals("Drehzahl R3");
		t.assertNextTextEquals("Drehzahl R30");
		t.assertNextTextEquals("Drehzahl R31");
		t.assertNextTextEquals("Drehzahl R32");
		t.assertNextTextEquals("Drehzahl R33");
		t.assertNextTextEquals("Drehzahl R4");
		t.assertNextTextEquals("Drehzahl R5");
		t.assertNextTextEquals("Drehzahl R6");
		t.assertNextTextEquals("Drehzahl R7");
		t.assertNextTextEquals("Drehzahl R8");
		t.assertNextTextEquals("Drehzahl R9");
		t.assertNextTextEquals("Drehzahl Relais");
		t.assertNextTextEquals("Drehzahl Relais 1");
		t.assertNextTextEquals("Drehzahl Relais 1 (<= v1.01)");
		t.assertNextTextEquals("Drehzahl Relais 1 (>= v1.02)");
		t.assertNextTextEquals("Drehzahl Relais 1.1");
		t.assertNextTextEquals("Drehzahl Relais 1.2");
		t.assertNextTextEquals("Drehzahl Relais 10");
		t.assertNextTextEquals("Drehzahl Relais 11");
		t.assertNextTextEquals("Drehzahl Relais 12");
		t.assertNextTextEquals("Drehzahl Relais 13");
		t.assertNextTextEquals("Drehzahl Relais 14");
		t.assertNextTextEquals("Drehzahl Relais 2");
		t.assertNextTextEquals("Drehzahl Relais 2 (<= v1.01)");
		t.assertNextTextEquals("Drehzahl Relais 2 (>= v1.02)");
		t.assertNextTextEquals("Drehzahl Relais 2.1");
		t.assertNextTextEquals("Drehzahl Relais 2.2");
		t.assertNextTextEquals("Drehzahl Relais 3");
		t.assertNextTextEquals("Drehzahl Relais 3.1");
		t.assertNextTextEquals("Drehzahl Relais 3.2");
		t.assertNextTextEquals("Drehzahl Relais 4");
		t.assertNextTextEquals("Drehzahl Relais 4.1");
		t.assertNextTextEquals("Drehzahl Relais 4.2");
		t.assertNextTextEquals("Drehzahl Relais 5");
		t.assertNextTextEquals("Drehzahl Relais 5.1");
		t.assertNextTextEquals("Drehzahl Relais 5.2");
		t.assertNextTextEquals("Drehzahl Relais 6");
		t.assertNextTextEquals("Drehzahl Relais 7");
		t.assertNextTextEquals("Drehzahl Relais 8");
		t.assertNextTextEquals("Drehzahl Relais 9");
		t.assertNextTextEquals("Drehzahl Relais FastOff");
		t.assertNextTextEquals("Drehzahl Relais Pumpe");
		t.assertNextTextEquals("Drehzahl Relais pot.frei");
		t.assertNextTextEquals("Drehzahl Sekundaerpumpe");
		t.assertNextTextEquals("Drehzahl Wärmepumpe");
		t.assertNextTextEquals("Drehzahl Zirkulation");
		t.assertNextTextEquals("Drehzahl Zirkulationspumpe");
		t.assertNextTextEquals("Drehzahl1");
		t.assertNextTextEquals("Drehzahl2");
		t.assertNextTextEquals("Druck");
		t.assertNextTextEquals("Druck RPS");
		t.assertNextTextEquals("Druck RPS (S6)");
		t.assertNextTextEquals("Druck Sensor 11");
		t.assertNextTextEquals("Druck Sensor 12");
		t.assertNextTextEquals("Druck Sensor 17");
		t.assertNextTextEquals("Druck Sensor 18");
		t.assertNextTextEquals("Druck Sensor 19");
		t.assertNextTextEquals("Druck Sensor 20");
		t.assertNextTextEquals("Druck Sensor Ga1");
		t.assertNextTextEquals("Druck Sensor Ga2");
		t.assertNextTextEquals("Druck Sensor Gds1");
		t.assertNextTextEquals("Druck Sensor Gds2");
		t.assertNextTextEquals("Druck Sensor RPS");
		t.assertNextTextEquals("Druck(S6) defekt");
		t.assertNextTextEquals("Duration controlling period");
		t.assertNextTextEquals("Durchfluss");
		t.assertNextTextEquals("Durchfluss FlowRotor");
		t.assertNextTextEquals("Durchfluss Sensor 10");
		t.assertNextTextEquals("Durchfluss Sensor 5");
		t.assertNextTextEquals("Durchfluss Sensor 8");
		t.assertNextTextEquals("Durchfluss Sensor DDS");
		t.assertNextTextEquals("Durchfluss Sensor VFS/US");
		t.assertNextTextEquals("Durchfluss V40");
		t.assertNextTextEquals("Durchfluss VFS");
		t.assertNextTextEquals("Durchfluss erwartet");
		t.assertNextTextEquals("Durchflussfehler");
		t.assertNextTextEquals("DurchschnittsDrehzahl");
		t.assertNextTextEquals("Durée période réglage");
		t.assertNextTextEquals("Débit");
		t.assertNextTextEquals("Débit 1");
		t.assertNextTextEquals("Débit 2");
		t.assertNextTextEquals("Débit 3");
		t.assertNextTextEquals("Débit FlowRotor");
		t.assertNextTextEquals("Débit FlowRotor (S7)");
		t.assertNextTextEquals("Débit US au total");
		t.assertNextTextEquals("Débit US1");
		t.assertNextTextEquals("Débit US2");
		t.assertNextTextEquals("Débit V40");
		t.assertNextTextEquals("Débit VFD1");
		t.assertNextTextEquals("Débit VFS");
		t.assertNextTextEquals("Débit VFS (S6)");
		t.assertNextTextEquals("Débit capteur");
		t.assertNextTextEquals("Débit circuit eau froide (dV_LT)");
		t.assertNextTextEquals("Débit de charge");
		t.assertNextTextEquals("Débit estimé");
		t.assertNextTextEquals("Débit max.");
		t.assertNextTextEquals("Débit puisage");
		t.assertNextTextEquals("Débit sonde 1");
		t.assertNextTextEquals("Débit sonde 10");
		t.assertNextTextEquals("Débit sonde 11");
		t.assertNextTextEquals("Débit sonde 12");
		t.assertNextTextEquals("Débit sonde 2");
		t.assertNextTextEquals("Débit sonde 3");
		t.assertNextTextEquals("Débit sonde 5");
		t.assertNextTextEquals("Débit sonde 9");
		t.assertNextTextEquals("Débit sonde DDS");
		t.assertNextTextEquals("Débit sonde FlowRotor");
		t.assertNextTextEquals("Débit sonde Ga1");
		t.assertNextTextEquals("Débit sonde Ga2");
		t.assertNextTextEquals("Débit sonde Gd1");
		t.assertNextTextEquals("Débit sonde Gd2");
		t.assertNextTextEquals("Débit sonde S10/V40");
		t.assertNextTextEquals("Débit sonde V40");
		t.assertNextTextEquals("Débit sonde VFS");
		t.assertNextTextEquals("Débit sonde VFS/US");
		t.assertNextTextEquals("Débit-est");
		t.assertNextTextEquals("Débit1_1s");
		t.assertNextTextEquals("Débit2");
		t.assertNextTextEquals("Débit2_1s");
		t.assertNextTextEquals("Débit3");
		t.assertNextTextEquals("Débit4");
		t.assertNextTextEquals("Débit5");
		t.assertNextTextEquals("Dém.froid");
		t.assertNextTextEquals("Démarr. brûleur");
		t.assertNextTextEquals("Démarrage à chaud");
		t.assertNextTextEquals("Départ différé de la pompe");
		t.assertNextTextEquals("Départ du réservoir");
		t.assertNextTextEquals("Départ nominale CC sonde 11");
		t.assertNextTextEquals("Départ nominale module CC1 sonde 18");
		t.assertNextTextEquals("Départ nominale module CC2 sonde 25");
		t.assertNextTextEquals("Départ nominale module CC3 sonde 32");
		t.assertNextTextEquals("Désinfection : départ trop basse");
		t.assertNextTextEquals("Désinfection : échec");
		t.assertNextTextEquals("Désinfection therm.");
		t.assertNextTextEquals("Désinfection thermique");
		t.assertNextTextEquals("Détection circulation");
		t.assertNextTextEquals("Détection puisage R1");
		t.assertNextTextEquals("Détection puisage R2");
		t.assertNextTextEquals("Détection puisage R3");
		t.assertNextTextEquals("Détection puisage R4");
		t.assertNextTextEquals("Détection puisage relais");
		t.assertNextTextEquals("EC1");
		t.assertNextTextEquals("EEPROM error");
		t.assertNextTextEquals("EEPROM-Fehler");
		t.assertNextTextEquals("EL1");
		t.assertNextTextEquals("EL2/3");
		t.assertNextTextEquals("EM #");
		t.assertNextTextEquals("EM #0");
		t.assertNextTextEquals("EM #1");
		t.assertNextTextEquals("EM #10");
		t.assertNextTextEquals("EM #11");
		t.assertNextTextEquals("EM #12");
		t.assertNextTextEquals("EM #13");
		t.assertNextTextEquals("EM #14");
		t.assertNextTextEquals("EM #15");
		t.assertNextTextEquals("EM #2");
		t.assertNextTextEquals("EM #3");
		t.assertNextTextEquals("EM #4");
		t.assertNextTextEquals("EM #5");
		t.assertNextTextEquals("EM #6");
		t.assertNextTextEquals("EM #7");
		t.assertNextTextEquals("EM #8");
		t.assertNextTextEquals("EM #9");
		t.assertNextTextEquals("EMC software");
		t.assertNextTextEquals("EMV-Software");
		t.assertNextTextEquals("EMZ/CME");
		t.assertNextTextEquals("ERR: Erro rmask");
		t.assertNextTextEquals("ERR: Error mask");
		t.assertNextTextEquals("ERR: Errormask");
		t.assertNextTextEquals("ETHERM");
		t.assertNextTextEquals("ETHERM 2");
		t.assertNextTextEquals("EXT Volt (T-SET):");
		t.assertNextTextEquals("EXT-Volt (T-SET):");
		t.assertNextTextEquals("Eau chaude nominale");
		t.assertNextTextEquals("Eau froide");
		t.assertNextTextEquals("Ecart");
		t.assertNextTextEquals("Eff. minimum speed");
		t.assertNextTextEquals("Eff_Min-Drehzahl");
		t.assertNextTextEquals("Einfallswinkel");
		t.assertNextTextEquals("Einheit");
		t.assertNextTextEquals("Einheit Druck");
		t.assertNextTextEquals("Einheit Durchfluss");
		t.assertNextTextEquals("Einheit Energie");
		t.assertNextTextEquals("Einheit Leistung");
		t.assertNextTextEquals("Einheit Temperatur");
		t.assertNextTextEquals("Einschaltschwelle");
		t.assertNextTextEquals("Einschalttemperaturdifferenz");
		t.assertNextTextEquals("Einstrahlung");
		t.assertNextTextEquals("Einstrahlung CS");
		t.assertNextTextEquals("Einstrahlung Sensor");
		t.assertNextTextEquals("Einstrahlung Sensor 10");
		t.assertNextTextEquals("Einstrahlung Sensor 11");
		t.assertNextTextEquals("Einstrahlung Sensor 16");
		t.assertNextTextEquals("Einstrahlung Sensor 5");
		t.assertNextTextEquals("Einstrahlung Sensor 9");
		t.assertNextTextEquals("Einstrahlung Sensor CS10");
		t.assertNextTextEquals("Einstrahlung_1s");
		t.assertNextTextEquals("Emergency operation active");
	}

	@Test
	public void testTexts() {
		TextTester t = new TextTester();
		testTextsPart1(t);
		testTextsPart2(t);
		t.assertNextTextEquals("Emergency store temperature");
		t.assertNextTextEquals("Energie Gesamt");
		t.assertNextTextEquals("Energie Heute");
		t.assertNextTextEquals("Energie therm.1");
		t.assertNextTextEquals("Energie therm.2");
		t.assertNextTextEquals("Energy today");
		t.assertNextTextEquals("Entrée d'impulsions 1");
		t.assertNextTextEquals("Entrée d'impulsions 2");
		t.assertNextTextEquals("Entrée numérique");
		t.assertNextTextEquals("Entrée numérique 9");
		t.assertNextTextEquals("Erdspeicher Maximaltemperatur");
		t.assertNextTextEquals("Erdspeicher voll");
		t.assertNextTextEquals("Erreur");
		t.assertNextTextEquals("Erreur : Annulation évacuation de l'excès de chaleur ");
		t.assertNextTextEquals("Erreur : Basse pression");
		t.assertNextTextEquals("Erreur : Câble sonde court-circuit");
		t.assertNextTextEquals("Erreur : Câble sonde interrompu");
		t.assertNextTextEquals("Erreur : Désinfection thermique annulée");
		t.assertNextTextEquals("Erreur : Erreur carte mémoire SD");
		t.assertNextTextEquals("Erreur : Erreur module");
		t.assertNextTextEquals("Erreur : Erreur sonde");
		t.assertNextTextEquals("Erreur : Erreur sonde ou surveillance du débit");
		t.assertNextTextEquals("Erreur : Horloge temps réel");
		t.assertNextTextEquals("Erreur : Mémoire de données");
		t.assertNextTextEquals("Erreur : Pompe double");
		t.assertNextTextEquals("Erreur : Protection contre le surchauffe");
		t.assertNextTextEquals("Erreur : Refroidissement CC inférieur à la temp. minimale du départ");
		t.assertNextTextEquals("Erreur : Surpression");
		t.assertNextTextEquals("Erreur : Surveillance du débit");
		t.assertNextTextEquals("Erreur : ΔT trop élevée");
		t.assertNextTextEquals("Erreur EEPROM");
		t.assertNextTextEquals("Erreur RTC");
		t.assertNextTextEquals("Erreur S1");
		t.assertNextTextEquals("Erreur S2");
		t.assertNextTextEquals("Erreur S3");
		t.assertNextTextEquals("Erreur S4");
		t.assertNextTextEquals("Erreur S5");
		t.assertNextTextEquals("Erreur S6");
		t.assertNextTextEquals("Erreur S7");
		t.assertNextTextEquals("Erreur S8");
		t.assertNextTextEquals("Erreur S9");
		t.assertNextTextEquals("Erreur V40");
		t.assertNextTextEquals("Erreur cellule solaire");
		t.assertNextTextEquals("Erreur contacteur de débit");
		t.assertNextTextEquals("Erreur débit");
		t.assertNextTextEquals("Erreur détection puisage R1");
		t.assertNextTextEquals("Erreur détection puisage R2");
		t.assertNextTextEquals("Erreur détection puisage R3");
		t.assertNextTextEquals("Erreur détection puisage R4");
		t.assertNextTextEquals("Erreur détection puisage relais");
		t.assertNextTextEquals("Erreur pompe");
		t.assertNextTextEquals("Erreur pompe à chaleur");
		t.assertNextTextEquals("Erreur sonde S1");
		t.assertNextTextEquals("Erreur sonde S12 VFD");
		t.assertNextTextEquals("Erreur sonde S2");
		t.assertNextTextEquals("Erreur sonde S3");
		t.assertNextTextEquals("Erreur sonde S4");
		t.assertNextTextEquals("Erreur sonde S5");
		t.assertNextTextEquals("Erreur sonde S6");
		t.assertNextTextEquals("Erreur sonde S7");
		t.assertNextTextEquals("Erreur sonde S8");
		t.assertNextTextEquals("Erreur sonde extérieure");
		t.assertNextTextEquals("Erreur sonde réservoir");
		t.assertNextTextEquals("Error");
		t.assertNextTextEquals("Error S1");
		t.assertNextTextEquals("Error S2");
		t.assertNextTextEquals("Error S3");
		t.assertNextTextEquals("Error S4");
		t.assertNextTextEquals("Error S5");
		t.assertNextTextEquals("Error S6");
		t.assertNextTextEquals("Error S7");
		t.assertNextTextEquals("Error S8");
		t.assertNextTextEquals("Error S9");
		t.assertNextTextEquals("Error SensorBruch bit 0..31");
		t.assertNextTextEquals("Error SensorBruch bit 31..63");
		t.assertNextTextEquals("Error SensorKurzschluss bit 0..31");
		t.assertNextTextEquals("Error SensorKurzschluss bit 31..63");
		t.assertNextTextEquals("Error V40");
		t.assertNextTextEquals("Error code");
		t.assertNextTextEquals("Error flow switch");
		t.assertNextTextEquals("Error heat pump");
		t.assertNextTextEquals("Error info");
		t.assertNextTextEquals("Error info 1");
		t.assertNextTextEquals("Error info 2");
		t.assertNextTextEquals("Error info 3");
		t.assertNextTextEquals("Error info 4");
		t.assertNextTextEquals("Error load detection R1");
		t.assertNextTextEquals("Error load detection R2");
		t.assertNextTextEquals("Error load detection R3");
		t.assertNextTextEquals("Error load detection R4");
		t.assertNextTextEquals("Error load detection relay");
		t.assertNextTextEquals("Error mask");
		t.assertNextTextEquals("Error mask (>= v1.02)");
		t.assertNextTextEquals("Error message");
		t.assertNextTextEquals("Error number");
		t.assertNextTextEquals("Error outdoor sensor");
		t.assertNextTextEquals("Error pump");
		t.assertNextTextEquals("Error relay");
		t.assertNextTextEquals("Error solar cell");
		t.assertNextTextEquals("Error status");
		t.assertNextTextEquals("Error store sensor");
		t.assertNextTextEquals("Error: Cancellation heat dump");
		t.assertNextTextEquals("Error: Data memory");
		t.assertNextTextEquals("Error: Flow rate monitoring");
		t.assertNextTextEquals("Error: HC cooling below flow minimum temperature");
		t.assertNextTextEquals("Error: Low pressure");
		t.assertNextTextEquals("Error: Module error");
		t.assertNextTextEquals("Error: Overloading protection");
		t.assertNextTextEquals("Error: Overpressure");
		t.assertNextTextEquals("Error: Real-time clock");
		t.assertNextTextEquals("Error: SD card");
		t.assertNextTextEquals("Error: Sensor fault");
		t.assertNextTextEquals("Error: Sensor fault or flow rate monitoring");
		t.assertNextTextEquals("Error: Sensor line broken");
		t.assertNextTextEquals("Error: Sensor line short-circuited");
		t.assertNextTextEquals("Error: Thermal disinfection cancelled");
		t.assertNextTextEquals("Error: Twin pump");
		t.assertNextTextEquals("Error: ΔT too high");
		t.assertNextTextEquals("ErrorMask");
		t.assertNextTextEquals("Errormask");
		t.assertNextTextEquals("Estim. temperature underground tank");
		t.assertNextTextEquals("Etat");
		t.assertNextTextEquals("Etat CC");
		t.assertNextTextEquals("Etat CC1");
		t.assertNextTextEquals("Etat CC2");
		t.assertNextTextEquals("Etat CC3");
		t.assertNextTextEquals("Etat Pompe à chaleur");
		t.assertNextTextEquals("Etat affichage");
		t.assertNextTextEquals("Etat circuit chauffage");
		t.assertNextTextEquals("Etat de charge");
		t.assertNextTextEquals("Etat de fonc. CC1");
		t.assertNextTextEquals("Etat de fonc. CC2");
		t.assertNextTextEquals("Etat de fonc. CC3");
		t.assertNextTextEquals("Etat de fonctionnement");
		t.assertNextTextEquals("Etat erreur");
		t.assertNextTextEquals("Etat info 1");
		t.assertNextTextEquals("Etat info 2");
		t.assertNextTextEquals("Etat module");
		t.assertNextTextEquals("Etat module CC1");
		t.assertNextTextEquals("Etat module CC2");
		t.assertNextTextEquals("Etat module CC3");
		t.assertNextTextEquals("Etat relais");
		t.assertNextTextEquals("Etat relais 1");
		t.assertNextTextEquals("Etat relais 2");
		t.assertNextTextEquals("Etat relais 3");
		t.assertNextTextEquals("Etat relais 4");
		t.assertNextTextEquals("Etat relais 5");
		t.assertNextTextEquals("Etat relais 6");
		t.assertNextTextEquals("Etat relais R4");
		t.assertNextTextEquals("Etat relais R5");
		t.assertNextTextEquals("Etat relais R6");
		t.assertNextTextEquals("Etat relais R7");
		t.assertNextTextEquals("Etat relais R8");
		t.assertNextTextEquals("Etat relais R9");
		t.assertNextTextEquals("Etat relais Relais 1");
		t.assertNextTextEquals("Etat relais Relais 2");
		t.assertNextTextEquals("Etat sonde 5");
		t.assertNextTextEquals("Etat sonde 8");
		t.assertNextTextEquals("Etat temps restant");
		t.assertNextTextEquals("Evacuation de l'excès de chaleur");
		t.assertNextTextEquals("Evap. temperature");
		t.assertNextTextEquals("Excess Wh");
		t.assertNextTextEquals("Excédent Wh");
		t.assertNextTextEquals("Exhaust temperature");
		t.assertNextTextEquals("External controller release");
		t.assertNextTextEquals("External set temperature (T-SET-EXT):");
		t.assertNextTextEquals("External set temperature:");
		t.assertNextTextEquals("Externe Reglerfreigabe");
		t.assertNextTextEquals("Externe Solltemperatur (T-SET-EXT):");
		t.assertNextTextEquals("Externe Solltemperatur:");
		t.assertNextTextEquals("Extra Filterlaufzeit");
		t.assertNextTextEquals("Extra filter runtime");
		t.assertNextTextEquals("Extra filter time");
		t.assertNextTextEquals("Extra-Filterzeit");
		t.assertNextTextEquals("F sensor errror");
		t.assertNextTextEquals("F-Impulse");
		t.assertNextTextEquals("F-US");
		t.assertNextTextEquals("FRISTA-mix");
		t.assertNextTextEquals("Fehler");
		t.assertNextTextEquals("Fehler Außensensor");
		t.assertNextTextEquals("Fehler Flussschalter");
		t.assertNextTextEquals("Fehler Lasterkennung R1");
		t.assertNextTextEquals("Fehler Lasterkennung R2");
		t.assertNextTextEquals("Fehler Lasterkennung R3");
		t.assertNextTextEquals("Fehler Lasterkennung R4");
		t.assertNextTextEquals("Fehler Lasterkennung Relais");
		t.assertNextTextEquals("Fehler Pumpe");
		t.assertNextTextEquals("Fehler S1");
		t.assertNextTextEquals("Fehler S2");
		t.assertNextTextEquals("Fehler S3");
		t.assertNextTextEquals("Fehler S4");
		t.assertNextTextEquals("Fehler S5");
		t.assertNextTextEquals("Fehler S6");
		t.assertNextTextEquals("Fehler S7");
		t.assertNextTextEquals("Fehler S8");
		t.assertNextTextEquals("Fehler S9");
		t.assertNextTextEquals("Fehler Solarzelle");
		t.assertNextTextEquals("Fehler Speichersensor");
		t.assertNextTextEquals("Fehler V40");
		t.assertNextTextEquals("Fehler Wärmepumpe");
		t.assertNextTextEquals("Fehler-Info");
		t.assertNextTextEquals("Fehler-Info 1");
		t.assertNextTextEquals("Fehler-Info 2");
		t.assertNextTextEquals("Fehler-Info 3");
		t.assertNextTextEquals("Fehler-Info 4");
		t.assertNextTextEquals("Fehler-Maske");
		t.assertNextTextEquals("Fehler: Abbruch Überwärmeabfuhr");
		t.assertNextTextEquals("Fehler: Datenspeicher");
		t.assertNextTextEquals("Fehler: Echtzeituhr");
		t.assertNextTextEquals("Fehler: HK-Kühlung unter Vorlaufminimaltemperatur");
		t.assertNextTextEquals("Fehler: Minderdruck");
		t.assertNextTextEquals("Fehler: Modulfehler");
		t.assertNextTextEquals("Fehler: SD-Karte");
		t.assertNextTextEquals("Fehler: Sensorfehler");
		t.assertNextTextEquals("Fehler: Sensorfehler oder Volumenstromüberwachung");
		t.assertNextTextEquals("Fehler: Sensorleitung kurzgeschlossen");
		t.assertNextTextEquals("Fehler: Sensorleitung unterbrochen");
		t.assertNextTextEquals("Fehler: Thermische Desinfektion abgebrochen");
		t.assertNextTextEquals("Fehler: Volumstromüberwachung");
		t.assertNextTextEquals("Fehler: Zwillingspumpe");
		t.assertNextTextEquals("Fehler: Überdruck");
		t.assertNextTextEquals("Fehler: Überladeschutz");
		t.assertNextTextEquals("Fehler: ΔT zu hoch");
		t.assertNextTextEquals("Fehlercode");
		t.assertNextTextEquals("Fehlermaske");
		t.assertNextTextEquals("Fehlermaske (>= v1.02)");
		t.assertNextTextEquals("Fehlermeldung");
		t.assertNextTextEquals("Fehlernummer");
		t.assertNextTextEquals("Fehlerrelais");
		t.assertNextTextEquals("Fehlerstatus");
		t.assertNextTextEquals("Fernversteller");
		t.assertNextTextEquals("Filling");
		t.assertNextTextEquals("Filter active");
		t.assertNextTextEquals("Filter eingeschaltet");
		t.assertNextTextEquals("Filter runtime");
		t.assertNextTextEquals("Filter runtime today");
		t.assertNextTextEquals("Filterlaufzeit");
		t.assertNextTextEquals("Filterlaufzeit heute");
		t.assertNextTextEquals("Filtermin.");
		t.assertNextTextEquals("Filtre actif");
		t.assertNextTextEquals("Filtre min.");
		t.assertNextTextEquals("Flag-Heures de fonctionnement");
		t.assertNextTextEquals("Flags");
		t.assertNextTextEquals("Flow V40");
		t.assertNextTextEquals("Flow limitation");
		t.assertNextTextEquals("Flow rate");
		t.assertNextTextEquals("Flow rate 1");
		t.assertNextTextEquals("Flow rate 2");
		t.assertNextTextEquals("Flow rate 3");
		t.assertNextTextEquals("Flow rate FlowRotor");
		t.assertNextTextEquals("Flow rate Flowrotor (S7)");
		t.assertNextTextEquals("Flow rate Sensor 1");
		t.assertNextTextEquals("Flow rate Sensor 10");
		t.assertNextTextEquals("Flow rate Sensor 11");
		t.assertNextTextEquals("Flow rate Sensor 12");
		t.assertNextTextEquals("Flow rate Sensor 2");
		t.assertNextTextEquals("Flow rate Sensor 3");
		t.assertNextTextEquals("Flow rate Sensor 9");
		t.assertNextTextEquals("Flow rate Sensor FlowRotor");
		t.assertNextTextEquals("Flow rate Sensor Ga1");
		t.assertNextTextEquals("Flow rate Sensor Ga2");
		t.assertNextTextEquals("Flow rate Sensor Gds1");
		t.assertNextTextEquals("Flow rate Sensor Gds2");
		t.assertNextTextEquals("Flow rate Sensor S10/V40");
		t.assertNextTextEquals("Flow rate Sensor V40");
		t.assertNextTextEquals("Flow rate Sensor VFS");
		t.assertNextTextEquals("Flow rate US in total");
		t.assertNextTextEquals("Flow rate US1");
		t.assertNextTextEquals("Flow rate US2");
		t.assertNextTextEquals("Flow rate V40");
		t.assertNextTextEquals("Flow rate VFD1");
		t.assertNextTextEquals("Flow rate VFS");
		t.assertNextTextEquals("Flow rate VFS (S6)");
		t.assertNextTextEquals("Flow rate cold water circuit (dV_LT)");
		t.assertNextTextEquals("Flow rate collector");
		t.assertNextTextEquals("Flow rate error");
		t.assertNextTextEquals("Flow rate estimated");
		t.assertNextTextEquals("Flow rate max.");
		t.assertNextTextEquals("Flow rate sensor 10");
		t.assertNextTextEquals("Flow rate sensor 13");
		t.assertNextTextEquals("Flow rate sensor 14");
		t.assertNextTextEquals("Flow rate sensor 15");
		t.assertNextTextEquals("Flow rate sensor 17");
		t.assertNextTextEquals("Flow rate sensor 18");
		t.assertNextTextEquals("Flow rate sensor 19");
		t.assertNextTextEquals("Flow rate sensor 20");
		t.assertNextTextEquals("Flow rate sensor 21");
		t.assertNextTextEquals("Flow rate sensor 5");
		t.assertNextTextEquals("Flow rate sensor 8");
		t.assertNextTextEquals("Flow rate sensor DDS");
		t.assertNextTextEquals("Flow rate sensor VFS/US");
		t.assertNextTextEquals("Flow rate(S7) defective");
		t.assertNextTextEquals("Flow rate-est");
		t.assertNextTextEquals("Flow rate1_1s");
		t.assertNextTextEquals("Flow rate2");
		t.assertNextTextEquals("Flow rate2_1s");
		t.assertNextTextEquals("Flow rate3");
		t.assertNextTextEquals("Flow rate4");
		t.assertNextTextEquals("Flow rate5");
		t.assertNextTextEquals("Flow s defective");
		t.assertNextTextEquals("Flow set HC1 module sensor 18");
		t.assertNextTextEquals("Flow set HC2 module sensor 25");
		t.assertNextTextEquals("Flow set HC3 module sensor 32");
		t.assertNextTextEquals("Flow set heating circuit Sensor 11");
		t.assertNextTextEquals("Flow set temperature");
		t.assertNextTextEquals("Flow temperature");
		t.assertNextTextEquals("Flow temperature HC1");
		t.assertNextTextEquals("Flow velocity");
		t.assertNextTextEquals("Fonc. DeltaT");
		t.assertNextTextEquals("Fonc. urgence actif");
		t.assertNextTextEquals("Fonction vacances");
		t.assertNextTextEquals("Fonctionnement total");
		t.assertNextTextEquals("Fonctions");
		t.assertNextTextEquals("FriWa Kaskadenmaster Version 1");
		t.assertNextTextEquals("Frischwasserbereitung aktiv");
		t.assertNextTextEquals("Frischwasserregler");
		t.assertNextTextEquals("Frista");
		t.assertNextTextEquals("Friwa");
		t.assertNextTextEquals("FriwaMini");
		t.assertNextTextEquals("Frostschutz");
		t.assertNextTextEquals("Frostschutzart");
		t.assertNextTextEquals("Frostschutzgehalt");
		t.assertNextTextEquals("Fréq. PFB1 ");
		t.assertNextTextEquals("Fréq. PFB2");
		t.assertNextTextEquals("Fuite");
		t.assertNextTextEquals("Function status SmartRemote Load ext.");
		t.assertNextTextEquals("Function status SmartRemote off");
		t.assertNextTextEquals("Function status SmartRemote on");
		t.assertNextTextEquals("Functions");
		t.assertNextTextEquals("Funktion block 1");
		t.assertNextTextEquals("Funktion block 2");
		t.assertNextTextEquals("Funktionen");
		t.assertNextTextEquals("Funktionsblock 1");
		t.assertNextTextEquals("Funktionsblock 2");
		t.assertNextTextEquals("Funktionsstatus Aus");
		t.assertNextTextEquals("Funktionsstatus Bereit");
		t.assertNextTextEquals("Funktionsstatus Fehler");
		t.assertNextTextEquals("Funktionsstatus Heizung");
		t.assertNextTextEquals("Funktionsstatus Lstg. reduziert");
		t.assertNextTextEquals("Funktionsstatus Max. Temp.");
		t.assertNextTextEquals("Funktionsstatus Max. Temp. RL");
		t.assertNextTextEquals("Funktionsstatus Max. Temp. VL");
		t.assertNextTextEquals("Funktionsstatus Nachheizung");
		t.assertNextTextEquals("Funktionsstatus SmartRemote Verbraucher extern");
		t.assertNextTextEquals("Funktionsstatus SmartRemote aus");
		t.assertNextTextEquals("Funktionsstatus SmartRemote ein");
		t.assertNextTextEquals("Funktionsstatus Spülen");
		t.assertNextTextEquals("GF-Display");
		t.assertNextTextEquals("GFD defective");
		t.assertNextTextEquals("GFD defekt");
		t.assertNextTextEquals("GFD défectueuse");
		t.assertNextTextEquals("Gallons");
		t.assertNextTextEquals("GallonsPerHour");
		t.assertNextTextEquals("GallonsPerMinute");
		t.assertNextTextEquals("Gas/Oil/Pellet stove");
		t.assertNextTextEquals("Gas/ÖL/Pelletofen");
		t.assertNextTextEquals("Gas1");
		t.assertNextTextEquals("Gaz/Fuel/Poêle pellet");
		t.assertNextTextEquals("Gaz1");
		t.assertNextTextEquals("Gesamtbetrieb");
		t.assertNextTextEquals("Gesamtbetriebsstunden");
		t.assertNextTextEquals("Gesamtvolumen");
		t.assertNextTextEquals("Glycol");
		t.assertNextTextEquals("Glykol");
		t.assertNextTextEquals("GramsCO2Gas");
		t.assertNextTextEquals("GramsCO2Oil");
		t.assertNextTextEquals("H-Day");
		t.assertNextTextEquals("HC characteristic curve");
		t.assertNextTextEquals("HC pump");
		t.assertNextTextEquals("HC status");
		t.assertNextTextEquals("HC1 flow set");
		t.assertNextTextEquals("HC1 operation status");
		t.assertNextTextEquals("HC1 status");
		t.assertNextTextEquals("HC2 flow set");
		t.assertNextTextEquals("HC2 operation status");
		t.assertNextTextEquals("HC2 status");
		t.assertNextTextEquals("HC3 flow set");
		t.assertNextTextEquals("HC3 operation status");
		t.assertNextTextEquals("HC3 status");
		t.assertNextTextEquals("HC_1_T_Flowset");
		t.assertNextTextEquals("HC_2_T_Flowset");
		t.assertNextTextEquals("HC_3_T_Flowset");
		t.assertNextTextEquals("HC_4_T_Flowset");
		t.assertNextTextEquals("HC_5_T_Flowset");
		t.assertNextTextEquals("HFR1");
		t.assertNextTextEquals("HFR2");
		t.assertNextTextEquals("HFR3");
		t.assertNextTextEquals("HFR4");
		t.assertNextTextEquals("HK-Kennlinie");
		t.assertNextTextEquals("HK-Pumpe");
		t.assertNextTextEquals("HK-Status");
		t.assertNextTextEquals("HK1-Betriebsstatus");
		t.assertNextTextEquals("HK1-Status");
		t.assertNextTextEquals("HK1-VL-Soll");
		t.assertNextTextEquals("HK2-Betriebsstatus");
		t.assertNextTextEquals("HK2-Status");
		t.assertNextTextEquals("HK2-VL-Soll");
		t.assertNextTextEquals("HK3-Betriebsstatus");
		t.assertNextTextEquals("HK3-Status");
		t.assertNextTextEquals("HK3-VL-Soll");
		t.assertNextTextEquals("HKM1 #");
		t.assertNextTextEquals("HKM1 #0");
		t.assertNextTextEquals("HKM1 #1");
		t.assertNextTextEquals("HKM1 #10");
		t.assertNextTextEquals("HKM1 #11");
		t.assertNextTextEquals("HKM1 #12");
		t.assertNextTextEquals("HKM1 #13");
		t.assertNextTextEquals("HKM1 #14");
		t.assertNextTextEquals("HKM1 #15");
		t.assertNextTextEquals("HKM1 #2");
		t.assertNextTextEquals("HKM1 #3");
		t.assertNextTextEquals("HKM1 #4");
		t.assertNextTextEquals("HKM1 #5");
		t.assertNextTextEquals("HKM1 #6");
		t.assertNextTextEquals("HKM1 #7");
		t.assertNextTextEquals("HKM1 #8");
		t.assertNextTextEquals("HKM1 #9");
		t.assertNextTextEquals("HKM2 #");
		t.assertNextTextEquals("HKM2 #0");
		t.assertNextTextEquals("HKM2 #1");
		t.assertNextTextEquals("HKM2 #10");
		t.assertNextTextEquals("HKM2 #11");
		t.assertNextTextEquals("HKM2 #12");
		t.assertNextTextEquals("HKM2 #13");
		t.assertNextTextEquals("HKM2 #14");
		t.assertNextTextEquals("HKM2 #15");
		t.assertNextTextEquals("HKM2 #2");
		t.assertNextTextEquals("HKM2 #3");
		t.assertNextTextEquals("HKM2 #4");
		t.assertNextTextEquals("HKM2 #5");
		t.assertNextTextEquals("HKM2 #6");
		t.assertNextTextEquals("HKM2 #7");
		t.assertNextTextEquals("HKM2 #8");
		t.assertNextTextEquals("HKM2 #9");
		t.assertNextTextEquals("HP flow temperature");
		t.assertNextTextEquals("HP return temperature");
		t.assertNextTextEquals("HR Solar ADVANCED controller [Controller]");
		t.assertNextTextEquals("HR Solar ADVANCED controller [HQM 1]");
		t.assertNextTextEquals("HR Solar ADVANCED controller [Regler]");
		t.assertNextTextEquals("HR Solar ADVANCED controller [WMZ 1]");
		t.assertNextTextEquals("HR Solar BASIC controller [Controller]");
		t.assertNextTextEquals("HR Solar BASIC controller [HQM 1]");
		t.assertNextTextEquals("HR Solar BASIC controller [Regler]");
		t.assertNextTextEquals("HR Solar BASIC controller [WMZ 1]");
		t.assertNextTextEquals("HT Pump");
		t.assertNextTextEquals("HT-Pumpe");
		t.assertNextTextEquals("HV_A1_IN:");
		t.assertNextTextEquals("HV_A2_IN:");
		t.assertNextTextEquals("HV_OUT:");
		t.assertNextTextEquals("Handbetrieb 1");
		t.assertNextTextEquals("Handbetrieb 2");
		t.assertNextTextEquals("Handbetrieb PWM1");
		t.assertNextTextEquals("Handbetrieb Relais Kaskade");
		t.assertNextTextEquals("Handbetrieb aktiv");
		t.assertNextTextEquals("Handebetrieb Relais Mischer Auf");
		t.assertNextTextEquals("Handebetrieb Relais Mischer Zu");
		t.assertNextTextEquals("Handebetrieb Relais Pumpe");
		t.assertNextTextEquals("Hardware");
		t.assertNextTextEquals("Heat");
		t.assertNextTextEquals("Heat 2");
		t.assertNextTextEquals("Heat 3");
		t.assertNextTextEquals("Heat In total");
		t.assertNextTextEquals("Heat MWh");
		t.assertNextTextEquals("Heat Month");
		t.assertNextTextEquals("Heat Previous week");
		t.assertNextTextEquals("Heat Previous year");
		t.assertNextTextEquals("Heat Previuos month");
		t.assertNextTextEquals("Heat Today");
		t.assertNextTextEquals("Heat Week");
		t.assertNextTextEquals("Heat Wh");
		t.assertNextTextEquals("Heat Year");
		t.assertNextTextEquals("Heat Yesterday");
		t.assertNextTextEquals("Heat dump");
		t.assertNextTextEquals("Heat exchanger antifreeze");
		t.assertNextTextEquals("Heat exchanger emergency temperature");
		t.assertNextTextEquals("Heat kWh");
		t.assertNextTextEquals("Heat pump");
		t.assertNextTextEquals("Heat pump Tcalc. ");
		t.assertNextTextEquals("Heat pump active");
		t.assertNextTextEquals("Heat pump operating mode");
		t.assertNextTextEquals("Heat pump runtime");
		t.assertNextTextEquals("Heat pump runtime / 24 h");
		t.assertNextTextEquals("Heat pump state");
		t.assertNextTextEquals("Heat quantity");
		t.assertNextTextEquals("Heat quantity (<= v1.01)");
		t.assertNextTextEquals("Heat quantity (>= v1.02)");
		t.assertNextTextEquals("Heat quantity 1");
		t.assertNextTextEquals("Heat quantity 2");
		t.assertNextTextEquals("Heat quantity MWh");
		t.assertNextTextEquals("Heat quantity S,p");
		t.assertNextTextEquals("Heat quantity S,s");
		t.assertNextTextEquals("Heat quantity kWh");
		t.assertNextTextEquals("Heat quantity month");
		t.assertNextTextEquals("Heat quantity today");
		t.assertNextTextEquals("Heat quantity week");
		t.assertNextTextEquals("Heat2");
		t.assertNextTextEquals("Heat3");
		t.assertNextTextEquals("Heat4");
		t.assertNextTextEquals("Heat5");
		t.assertNextTextEquals("Heating Wh");
		t.assertNextTextEquals("Heating circuit return");
		t.assertNextTextEquals("Heating circuit status");
		t.assertNextTextEquals("Heating mode:");
		t.assertNextTextEquals("Heating return temperature (TR)");
		t.assertNextTextEquals("Heating_Heating circuit1_Boiler starts");
		t.assertNextTextEquals("Heating_Heating circuit1_Operating mode");
		t.assertNextTextEquals("Heating_Heating circuit1_Operating state");
		t.assertNextTextEquals("Heating_Heating circuit1_Tflowset_C");
		t.assertNextTextEquals("Hectopascals");
		t.assertNextTextEquals("Heizmodus:");
		t.assertNextTextEquals("Heizstab 0 aktiv");
		t.assertNextTextEquals("Heizung");
		t.assertNextTextEquals("Heizung Wh");
		t.assertNextTextEquals("Heizung_Heizkreis1_Betriebsart");
		t.assertNextTextEquals("Heizung_Heizkreis1_Betriebsstatus");
		t.assertNextTextEquals("Heizung_Heizkreis1_Brennerstarts");
		t.assertNextTextEquals("Heizung_Heizkreis1_TVorlaufSoll_C");
		t.assertNextTextEquals("Heizungsrücklauf-Temperatur (TR)");
		t.assertNextTextEquals("Hertz");
		t.assertNextTextEquals("Heure");
		t.assertNextTextEquals("Heure Système");
		t.assertNextTextEquals("Heure Système :");
		t.assertNextTextEquals("Heure Système2");
		t.assertNextTextEquals("Heures de fonc.");
		t.assertNextTextEquals("Heures de fonc. 1");
		t.assertNextTextEquals("Heures de fonc. 2");
		t.assertNextTextEquals("Heures de fonc. 3");
		t.assertNextTextEquals("Heures de fonc. 4");
		t.assertNextTextEquals("Heures de fonc. 5");
		t.assertNextTextEquals("Heures de fonc. 6");
		t.assertNextTextEquals("Heures de fonc. R1");
		t.assertNextTextEquals("Heures de fonc. R2");
		t.assertNextTextEquals("Heures de fonc. relais");
		t.assertNextTextEquals("Heures de fonc. relais 1");
		t.assertNextTextEquals("Heures de fonc. relais 2");
		t.assertNextTextEquals("Heures de fonc. relais 3");
		t.assertNextTextEquals("Heures de fonc. relais 4");
		t.assertNextTextEquals("Heures de fonc. relais1");
		t.assertNextTextEquals("Heures de fonc. relais2");
		t.assertNextTextEquals("Heures de fonctionnement Chauffage");
		t.assertNextTextEquals("Heures de fonctionnement Chauffage d'appoint");
		t.assertNextTextEquals("Heures de fonctionnement au total");
		t.assertNextTextEquals("Hk1_T_VorlSoll");
		t.assertNextTextEquals("Hk2_T_VorlSoll");
		t.assertNextTextEquals("Hk3_T_VorlSoll");
		t.assertNextTextEquals("Hk4_T_VorlSoll");
		t.assertNextTextEquals("Hk5_T_VorlSoll");
		t.assertNextTextEquals("Holiday function");
		t.assertNextTextEquals("Horodatage dernière DT annulée");
		t.assertNextTextEquals("Horodatage dernière DT avec succès");
		t.assertNextTextEquals("Hot water set");
		t.assertNextTextEquals("Hot water temperature");
		t.assertNextTextEquals("Hours");
		t.assertNextTextEquals("Huber - REGLOfresh / Felix [Controller]");
		t.assertNextTextEquals("Huber - REGLOfresh / Felix [Regler]");
		t.assertNextTextEquals("Humidity sensor 17");
		t.assertNextTextEquals("Humidity sensor 18");
		t.assertNextTextEquals("Hydraulics");
		t.assertNextTextEquals("Hydraulik");
		t.assertNextTextEquals("Hydraulique");
		t.assertNextTextEquals("IAM");
		t.assertNextTextEquals("IOC-Modul [Debug-Werte]");
		t.assertNextTextEquals("IOC-Modul [Entnahmekreis]");
		t.assertNextTextEquals("IOC-Modul [Messwerte]");
		t.assertNextTextEquals("IOC-Modul [Messwerte_1s]");
		t.assertNextTextEquals("IOC-Modul [Tagesbilanz]");
		t.assertNextTextEquals("IZEN DTi2");
		t.assertNextTextEquals("Immersion heater 0 active");
		t.assertNextTextEquals("Impulse");
		t.assertNextTextEquals("Impulse 1 V40");
		t.assertNextTextEquals("Impulse Counter Sensor 1");
		t.assertNextTextEquals("Impulse Counter Sensor 2");
		t.assertNextTextEquals("Impulse Counter Sensor 3");
		t.assertNextTextEquals("Impulse counter 1");
		t.assertNextTextEquals("Impulse counter 1 (Volume 1/2)");
		t.assertNextTextEquals("Impulse counter 2");
		t.assertNextTextEquals("Impulse counter 2 (Volume 3)");
		t.assertNextTextEquals("Impulse counter 3 (Volume 4)");
		t.assertNextTextEquals("Impulse counter 4 (Volume 5)");
		t.assertNextTextEquals("Impulse counter 5 (Current 1)");
		t.assertNextTextEquals("Impulse counter 6 (Current 2)");
		t.assertNextTextEquals("Impulse counter 7 (Th. energy 1)");
		t.assertNextTextEquals("Impulse counter 8 (Th. energy 2)");
		t.assertNextTextEquals("Impulse counter 9 (Gas 1)");
		t.assertNextTextEquals("Impulse input 1");
		t.assertNextTextEquals("Impulse input 2");
		t.assertNextTextEquals("Impulseingang 1");
		t.assertNextTextEquals("Impulseingang 2");
		t.assertNextTextEquals("Impulsion puisage actif");
		t.assertNextTextEquals("Impulsions");
		t.assertNextTextEquals("Impulsions 1 V40");
		t.assertNextTextEquals("Impulszähler 1");
		t.assertNextTextEquals("Impulszähler 1 (Volumen 1/2)");
		t.assertNextTextEquals("Impulszähler 2");
		t.assertNextTextEquals("Impulszähler 2 (Volumen 3)");
		t.assertNextTextEquals("Impulszähler 3 (Volumen 4)");
		t.assertNextTextEquals("Impulszähler 4 (Volumen 5)");
		t.assertNextTextEquals("Impulszähler 5 (Strom 1)");
		t.assertNextTextEquals("Impulszähler 6 (Strom 2)");
		t.assertNextTextEquals("Impulszähler 7 (th. Energie 1)");
		t.assertNextTextEquals("Impulszähler 8 (th. Energie 2)");
		t.assertNextTextEquals("Impulszähler 9 (Gas 1)");
		t.assertNextTextEquals("Incidence angle");
		t.assertNextTextEquals("Info Schaltuhr");
		t.assertNextTextEquals("Info erreur");
		t.assertNextTextEquals("Info erreur 1");
		t.assertNextTextEquals("Info erreur 2");
		t.assertNextTextEquals("Info erreur 3");
		t.assertNextTextEquals("Info erreur 4");
		t.assertNextTextEquals("Info programmateur");
		t.assertNextTextEquals("Initalisieren");
		t.assertNextTextEquals("Initialisation");
		t.assertNextTextEquals("Initialise");
		t.assertNextTextEquals("Initialiser");
		t.assertNextTextEquals("Initialisierung");
		t.assertNextTextEquals("Installation:");
		t.assertNextTextEquals("Intensité du courant 1");
		t.assertNextTextEquals("Intensité du courant 2");
		t.assertNextTextEquals("Intensité du courant1_1s");
		t.assertNextTextEquals("Intensité du courant2_1s");
		t.assertNextTextEquals("Internal value");
		t.assertNextTextEquals("Interner Wert");
		t.assertNextTextEquals("Inverter active");
		t.assertNextTextEquals("Irradiation");
		t.assertNextTextEquals("Irradiation CS");
		t.assertNextTextEquals("Irradiation Sensor 4");
		t.assertNextTextEquals("Irradiation sensor");
		t.assertNextTextEquals("Irradiation sensor 10");
		t.assertNextTextEquals("Irradiation sensor 11");
		t.assertNextTextEquals("Irradiation sensor 16");
		t.assertNextTextEquals("Irradiation sensor 5");
		t.assertNextTextEquals("Irradiation sensor 9");
		t.assertNextTextEquals("Irradiation sensor CS10");
		t.assertNextTextEquals("Irradiation sonde ");
		t.assertNextTextEquals("Irradiation sonde 10");
		t.assertNextTextEquals("Irradiation sonde 11");
		t.assertNextTextEquals("Irradiation sonde 16");
		t.assertNextTextEquals("Irradiation sonde 4");
		t.assertNextTextEquals("Irradiation sonde CS10");
		t.assertNextTextEquals("Irradiation_1s");
		t.assertNextTextEquals("Jahr");
		t.assertNextTextEquals("Jahr:");
		t.assertNextTextEquals("Jour");
		t.assertNextTextEquals("Jour H");
		t.assertNextTextEquals("Jour:");
		t.assertNextTextEquals("Jours de fonctionnement");
		t.assertNextTextEquals("KS3");
		t.assertNextTextEquals("Kaltstart");
		t.assertNextTextEquals("Kaltwasser");
		t.assertNextTextEquals("Kaltwassertemperatur");
		t.assertNextTextEquals("Kaskade BasisAdr");
		t.assertNextTextEquals("Kaskade Master");
		t.assertNextTextEquals("Kaskade Slave  1");
		t.assertNextTextEquals("Kaskade Slave  2");
		t.assertNextTextEquals("Kaskade Slave  3");
		t.assertNextTextEquals("Kaskade Slave  4");
		t.assertNextTextEquals("Kaskade Slave  5");
		t.assertNextTextEquals("Kaskade Slave  6");
		t.assertNextTextEquals("Kaskade Slave  7");
		t.assertNextTextEquals("Kaskade Slave  8");
		t.assertNextTextEquals("Kaskade Slave  9");
		t.assertNextTextEquals("Kaskade Slave 10");
		t.assertNextTextEquals("Kaskade Slave 11");
		t.assertNextTextEquals("Kaskade Slave 12");
		t.assertNextTextEquals("Kaskade Slave 13");
		t.assertNextTextEquals("Kaskade Slave 14");
		t.assertNextTextEquals("Kennlinie");
		t.assertNextTextEquals("Kern:");
		t.assertNextTextEquals("KiloBtus");
		t.assertNextTextEquals("KiloWattHoursPerSquareMeterPerDay");
		t.assertNextTextEquals("KilogramsCO2Gas");
		t.assertNextTextEquals("KilogramsCO2Oil");
		t.assertNextTextEquals("KilogramsPerCubicMeter");
		t.assertNextTextEquals("KilogramsPerHour");
		t.assertNextTextEquals("KilowattHours");
		t.assertNextTextEquals("Kilowatts");
		t.assertNextTextEquals("Kioto BX Plus V2 [Controller]");
		t.assertNextTextEquals("Kioto BX Plus V2 [HQM 1]");
		t.assertNextTextEquals("Kioto BX Plus V2 [HQM 2]");
		t.assertNextTextEquals("Kioto BX Plus V2 [Heating circuit 1]");
		t.assertNextTextEquals("Kioto BX Plus V2 [Heating circuit 2]");
		t.assertNextTextEquals("Kioto BX Plus V2 [Heizkreis 1]");
		t.assertNextTextEquals("Kioto BX Plus V2 [Heizkreis 2]");
		t.assertNextTextEquals("Kioto BX Plus V2 [Module]");
		t.assertNextTextEquals("Kioto BX Plus V2 [Modules]");
		t.assertNextTextEquals("Kioto BX Plus V2 [Regler]");
		t.assertNextTextEquals("Kioto BX Plus V2 [WMZ 1]");
		t.assertNextTextEquals("Kioto BX Plus V2 [WMZ 2]");
		t.assertNextTextEquals("Kioto FWS");
		t.assertNextTextEquals("Kioto Laderegler");
		t.assertNextTextEquals("Kioto SLM");
		t.assertNextTextEquals("Kollektor");
		t.assertNextTextEquals("Kollektor-Frostschutz");
		t.assertNextTextEquals("Kollektor-Minimaltemperatur");
		t.assertNextTextEquals("Kollektor-Nottemperatur");
		t.assertNextTextEquals("Kollektor-Temperatur (TC)");
		t.assertNextTextEquals("Kollektorabschaltung");
		t.assertNextTextEquals("Kollektorkühlung");
		t.assertNextTextEquals("Kollektorminimal");
		t.assertNextTextEquals("Kälteleistung letzter Zyklus");
		t.assertNextTextEquals("LS");
		t.assertNextTextEquals("LT Pump");
		t.assertNextTextEquals("LT-Pumpe");
		t.assertNextTextEquals("Ladepumpe");
		t.assertNextTextEquals("Ladestatus");
		t.assertNextTextEquals("Ladetemperatur");
		t.assertNextTextEquals("Ladevolumenstrom");
		t.assertNextTextEquals("Last Impulse Interval Sensor 1");
		t.assertNextTextEquals("Last Impulse Interval Sensor 2");
		t.assertNextTextEquals("Last Impulse Interval Sensor 3");
		t.assertNextTextEquals("Last Impulse Interval Sonde 1");
		t.assertNextTextEquals("Last Impulse Interval Sonde 2");
		t.assertNextTextEquals("Last Impulse Interval Sonde 3");
		t.assertNextTextEquals("Lasterkennung R1");
		t.assertNextTextEquals("Lasterkennung R2");
		t.assertNextTextEquals("Lasterkennung R3");
		t.assertNextTextEquals("Lasterkennung R4");
		t.assertNextTextEquals("Lasterkennung Relais");
		t.assertNextTextEquals("Laufzeit 1 R1");
		t.assertNextTextEquals("Laufzeit 1 R2");
		t.assertNextTextEquals("Laufzeit 1 R3");
		t.assertNextTextEquals("Laufzeit 1 R4");
		t.assertNextTextEquals("Laufzeit 1 R5");
		t.assertNextTextEquals("Laufzeit 2 R1");
		t.assertNextTextEquals("Laufzeit 2 R2");
		t.assertNextTextEquals("Laufzeit 2 R3");
		t.assertNextTextEquals("Laufzeit 2 R4");
		t.assertNextTextEquals("Laufzeit 2 R5");
		t.assertNextTextEquals("Laufzeit WP");
		t.assertNextTextEquals("Laufzeit WP / 24h");
		t.assertNextTextEquals("Leakage");
		t.assertNextTextEquals("Leckage");
		t.assertNextTextEquals("Leistung");
		t.assertNextTextEquals("Leistung 2");
		t.assertNextTextEquals("Leistung 3");
		t.assertNextTextEquals("Leistung Heizung");
		t.assertNextTextEquals("Leistung P,Ko");
		t.assertNextTextEquals("Leistung P,S");
		t.assertNextTextEquals("Leistung Verbraucher extern");
		t.assertNextTextEquals("Leistung Überschuss");
		t.assertNextTextEquals("Limitation départ");
		t.assertNextTextEquals("Liters");
		t.assertNextTextEquals("LitersPerHour");
		t.assertNextTextEquals("LitersPerMinute");
		t.assertNextTextEquals("LitersPerSquareMeterPerDay");
		t.assertNextTextEquals("Load detection R1");
		t.assertNextTextEquals("Load detection R2");
		t.assertNextTextEquals("Load detection R3");
		t.assertNextTextEquals("Load detection R4");
		t.assertNextTextEquals("Load detection Relay");
		t.assertNextTextEquals("Loading");
		t.assertNextTextEquals("Loading break time");
		t.assertNextTextEquals("Loading flow rate");
		t.assertNextTextEquals("Loading status");
		t.assertNextTextEquals("Loading temperature");
		t.assertNextTextEquals("Luftdichte");
		t.assertNextTextEquals("Luftdruck");
		t.assertNextTextEquals("Luftfeuchtigkeit Sensor 17");
		t.assertNextTextEquals("Luftfeuchtigkeit Sensor 18");
		t.assertNextTextEquals("Luftkanal-Querschnitt");
		t.assertNextTextEquals("Luftstrom-Masse");
		t.assertNextTextEquals("Luftstrom-Volumen");
		t.assertNextTextEquals("M1_A_IN:");
		t.assertNextTextEquals("M1_A_OUT:");
		t.assertNextTextEquals("M1_E_IN:");
		t.assertNextTextEquals("M1_E_OUT:");
		t.assertNextTextEquals("M2_A_IN:");
		t.assertNextTextEquals("M2_A_OUT:");
		t.assertNextTextEquals("M2_E_IN:");
		t.assertNextTextEquals("M2_E_OUT:");
		t.assertNextTextEquals("MALA (Compteur)");
		t.assertNextTextEquals("MFR [Controller]");
		t.assertNextTextEquals("MFR [Domestic hot water]");
		t.assertNextTextEquals("MFR [Frischwasser]");
		t.assertNextTextEquals("MFR [HQM #0]");
		t.assertNextTextEquals("MFR [HQM #10]");
		t.assertNextTextEquals("MFR [HQM #11]");
		t.assertNextTextEquals("MFR [HQM #12]");
		t.assertNextTextEquals("MFR [HQM #13]");
		t.assertNextTextEquals("MFR [HQM #14]");
		t.assertNextTextEquals("MFR [HQM #15]");
		t.assertNextTextEquals("MFR [HQM #1]");
		t.assertNextTextEquals("MFR [HQM #2]");
		t.assertNextTextEquals("MFR [HQM #3]");
		t.assertNextTextEquals("MFR [HQM #4]");
		t.assertNextTextEquals("MFR [HQM #5]");
		t.assertNextTextEquals("MFR [HQM #6]");
		t.assertNextTextEquals("MFR [HQM #7]");
		t.assertNextTextEquals("MFR [HQM #8]");
		t.assertNextTextEquals("MFR [HQM #9]");
		t.assertNextTextEquals("MFR [HQM #]");
		t.assertNextTextEquals("MFR [Heating circuit #0]");
		t.assertNextTextEquals("MFR [Heating circuit #10]");
		t.assertNextTextEquals("MFR [Heating circuit #11]");
		t.assertNextTextEquals("MFR [Heating circuit #12]");
		t.assertNextTextEquals("MFR [Heating circuit #13]");
		t.assertNextTextEquals("MFR [Heating circuit #14]");
		t.assertNextTextEquals("MFR [Heating circuit #15]");
		t.assertNextTextEquals("MFR [Heating circuit #1]");
		t.assertNextTextEquals("MFR [Heating circuit #2]");
		t.assertNextTextEquals("MFR [Heating circuit #3]");
		t.assertNextTextEquals("MFR [Heating circuit #4]");
		t.assertNextTextEquals("MFR [Heating circuit #5]");
		t.assertNextTextEquals("MFR [Heating circuit #6]");
		t.assertNextTextEquals("MFR [Heating circuit #7]");
		t.assertNextTextEquals("MFR [Heating circuit #8]");
		t.assertNextTextEquals("MFR [Heating circuit #9]");
		t.assertNextTextEquals("MFR [Heating circuit #]");
		t.assertNextTextEquals("MFR [Heizkreis #0]");
		t.assertNextTextEquals("MFR [Heizkreis #10]");
		t.assertNextTextEquals("MFR [Heizkreis #11]");
		t.assertNextTextEquals("MFR [Heizkreis #12]");
		t.assertNextTextEquals("MFR [Heizkreis #13]");
		t.assertNextTextEquals("MFR [Heizkreis #14]");
		t.assertNextTextEquals("MFR [Heizkreis #15]");
		t.assertNextTextEquals("MFR [Heizkreis #1]");
		t.assertNextTextEquals("MFR [Heizkreis #2]");
		t.assertNextTextEquals("MFR [Heizkreis #3]");
		t.assertNextTextEquals("MFR [Heizkreis #4]");
		t.assertNextTextEquals("MFR [Heizkreis #5]");
		t.assertNextTextEquals("MFR [Heizkreis #6]");
		t.assertNextTextEquals("MFR [Heizkreis #7]");
		t.assertNextTextEquals("MFR [Heizkreis #8]");
		t.assertNextTextEquals("MFR [Heizkreis #9]");
		t.assertNextTextEquals("MFR [Heizkreis #]");
		t.assertNextTextEquals("MFR [Module]");
		t.assertNextTextEquals("MFR [Modules]");
		t.assertNextTextEquals("MFR [Regler]");
		t.assertNextTextEquals("MFR [WMZ #0]");
		t.assertNextTextEquals("MFR [WMZ #10]");
		t.assertNextTextEquals("MFR [WMZ #11]");
		t.assertNextTextEquals("MFR [WMZ #12]");
		t.assertNextTextEquals("MFR [WMZ #13]");
		t.assertNextTextEquals("MFR [WMZ #14]");
		t.assertNextTextEquals("MFR [WMZ #15]");
		t.assertNextTextEquals("MFR [WMZ #1]");
		t.assertNextTextEquals("MFR [WMZ #2]");
		t.assertNextTextEquals("MFR [WMZ #3]");
		t.assertNextTextEquals("MFR [WMZ #4]");
		t.assertNextTextEquals("MFR [WMZ #5]");
		t.assertNextTextEquals("MFR [WMZ #6]");
		t.assertNextTextEquals("MFR [WMZ #7]");
		t.assertNextTextEquals("MFR [WMZ #8]");
		t.assertNextTextEquals("MFR [WMZ #9]");
		t.assertNextTextEquals("MFR [WMZ #]");
		t.assertNextTextEquals("MSR44 #");
		t.assertNextTextEquals("MSR44 #0");
		t.assertNextTextEquals("MSR44 #1");
		t.assertNextTextEquals("MSR44 #10");
		t.assertNextTextEquals("MSR44 #11");
		t.assertNextTextEquals("MSR44 #12");
		t.assertNextTextEquals("MSR44 #13");
		t.assertNextTextEquals("MSR44 #14");
		t.assertNextTextEquals("MSR44 #15");
		t.assertNextTextEquals("MSR44 #2");
		t.assertNextTextEquals("MSR44 #3");
		t.assertNextTextEquals("MSR44 #4");
		t.assertNextTextEquals("MSR44 #5");
		t.assertNextTextEquals("MSR44 #6");
		t.assertNextTextEquals("MSR44 #7");
		t.assertNextTextEquals("MSR44 #8");
		t.assertNextTextEquals("MSR44 #9");
		t.assertNextTextEquals("MSR65 #");
		t.assertNextTextEquals("MSR65 #0");
		t.assertNextTextEquals("MSR65 #1");
		t.assertNextTextEquals("MSR65 #10");
		t.assertNextTextEquals("MSR65 #11");
		t.assertNextTextEquals("MSR65 #12");
		t.assertNextTextEquals("MSR65 #13");
		t.assertNextTextEquals("MSR65 #14");
		t.assertNextTextEquals("MSR65 #15");
		t.assertNextTextEquals("MSR65 #2");
		t.assertNextTextEquals("MSR65 #3");
		t.assertNextTextEquals("MSR65 #4");
		t.assertNextTextEquals("MSR65 #5");
		t.assertNextTextEquals("MSR65 #6");
		t.assertNextTextEquals("MSR65 #7");
		t.assertNextTextEquals("MSR65 #8");
		t.assertNextTextEquals("MSR65 #9");
		t.assertNextTextEquals("MT Pump");
		t.assertNextTextEquals("MT-Pumpe");
		t.assertNextTextEquals("MWh");
		t.assertNextTextEquals("Manual mode PWM1");
		t.assertNextTextEquals("Manual mode relay cascade");
		t.assertNextTextEquals("Manual mode relay mixer closed");
		t.assertNextTextEquals("Manual mode relay mixer open");
		t.assertNextTextEquals("Manual mode relay pump");
		t.assertNextTextEquals("Manual operation 1");
		t.assertNextTextEquals("Manual operation 2");
		t.assertNextTextEquals("Manual operation active");
		t.assertNextTextEquals("Marche prolongée");
		t.assertNextTextEquals("Marche prolongée filtre");
		t.assertNextTextEquals("Mask cancelled TD");
		t.assertNextTextEquals("Mask successful TD");
		t.assertNextTextEquals("Maske abgebrochene TD");
		t.assertNextTextEquals("Maske erfolgreiche TD");
		t.assertNextTextEquals("Masque DT annulée");
		t.assertNextTextEquals("Masque DT avec succès");
		t.assertNextTextEquals("Masque alarme");
		t.assertNextTextEquals("Masque avertisseur");
		t.assertNextTextEquals("Masque court-circuit sonde");
		t.assertNextTextEquals("Masque d'utilisation des relais");
		t.assertNextTextEquals("Masque d'utilisation des sondes");
		t.assertNextTextEquals("Masque d'état");
		t.assertNextTextEquals("Masque de rupture sonde");
		t.assertNextTextEquals("Masque dysfonctionnement sonde");
		t.assertNextTextEquals("Masque erreur");
		t.assertNextTextEquals("Masque erreur (>= v1.02)");
		t.assertNextTextEquals("Masque relais");
		t.assertNextTextEquals("Masque relais (>= v1.02)");
		t.assertNextTextEquals("Masque sonde");
		t.assertNextTextEquals("Masque utilisation sondes #1");
		t.assertNextTextEquals("Masque utilisation sondes #2");
		t.assertNextTextEquals("Masque état");
		t.assertNextTextEquals("MasqueErreur");
		t.assertNextTextEquals("Masse volumique de l'air");
		t.assertNextTextEquals("Masse écoulement d'air");
		t.assertNextTextEquals("Master / Station 1 vorhanden");
		t.assertNextTextEquals("Master: Fehlermaske");
		t.assertNextTextEquals("Master: Primärpumpe Betriebssekunden");
		t.assertNextTextEquals("Master: Primärpumpe Drehzahl");
		t.assertNextTextEquals("Master: Reglervariante");
		t.assertNextTextEquals("Master: Stationsbetriebssekunden");
		t.assertNextTextEquals("Master: Status");
		t.assertNextTextEquals("Master: Strangventil Zustand");
		t.assertNextTextEquals("Master: T-KW");
		t.assertNextTextEquals("Master: T-SpVL");
		t.assertNextTextEquals("Master: T-WW");
		t.assertNextTextEquals("Master: Version");
		t.assertNextTextEquals("Master: Volumenstrom");
		t.assertNextTextEquals("Matériel");
		t.assertNextTextEquals("Max. cold water temperature");
		t.assertNextTextEquals("Max. flow rate");
		t.assertNextTextEquals("Maximum draw-off quantity");
		t.assertNextTextEquals("Maximum flow temperature");
		t.assertNextTextEquals("Maximum store temperature");
		t.assertNextTextEquals("MegaBtus");
		t.assertNextTextEquals("MegawattHours");
		t.assertNextTextEquals("Melderelais");
		t.assertNextTextEquals("Meldung");
		t.assertNextTextEquals("Meldungen");
		t.assertNextTextEquals("Message");
		t.assertNextTextEquals("Message d'erreur");
		t.assertNextTextEquals("Message de fonctionnement");
		t.assertNextTextEquals("Message d’erreur centralisé");
		t.assertNextTextEquals("Message relay");
		t.assertNextTextEquals("Message système");
		t.assertNextTextEquals("Messages");
		t.assertNextTextEquals("Messfühler-Temperatur (TM)");
		t.assertNextTextEquals("MetersPerSecond");
		t.assertNextTextEquals("Midi Pro");
		t.assertNextTextEquals("Milliamperes");
		t.assertNextTextEquals("Milliseconds");
		t.assertNextTextEquals("Min. cold water temperature");
		t.assertNextTextEquals("Minimum filter runtime");
		t.assertNextTextEquals("Minimum store temperature");
		t.assertNextTextEquals("Minorversion");
		t.assertNextTextEquals("Minutes");
		t.assertNextTextEquals("Mischer Auf");
		t.assertNextTextEquals("Mischer Befehl");
		t.assertNextTextEquals("Mischer Zu");
		t.assertNextTextEquals("Mischer auf");
		t.assertNextTextEquals("Mischer dT");
		t.assertNextTextEquals("Mischer zu");
		t.assertNextTextEquals("Mischerlaufzeit");
		t.assertNextTextEquals("Mischerpausenzeit");
		t.assertNextTextEquals("Mischventil");
		t.assertNextTextEquals("Mixer break time");
		t.assertNextTextEquals("Mixer closed");
		t.assertNextTextEquals("Mixer command");
		t.assertNextTextEquals("Mixer dT");
		t.assertNextTextEquals("Mixer open");
		t.assertNextTextEquals("Mixer runtime");
		t.assertNextTextEquals("Mixing valve");
		t.assertNextTextEquals("Mixing valve temperature");
		t.assertNextTextEquals("Mode chauffage:");
		t.assertNextTextEquals("Mode de fonc. (refroidir/chauffer)");
		t.assertNextTextEquals("Mode de fonctionnement Pompe à chaleur");
		t.assertNextTextEquals("Mode f.");
		t.assertNextTextEquals("Mode manuel 1");
		t.assertNextTextEquals("Mode manuel 2");
		t.assertNextTextEquals("Mode manuel PWM1");
		t.assertNextTextEquals("Mode manuel actif");
		t.assertNextTextEquals("Mode manuel relais cascade");
		t.assertNextTextEquals("Mode manuel relais pompe");
		t.assertNextTextEquals("Mode manuel vanne mél. fermée");
		t.assertNextTextEquals("Mode manuel vanne mél. ouverte");
		t.assertNextTextEquals("Mode été");
		t.assertNextTextEquals("Module de sondes utilisé");
		t.assertNextTextEquals("Module status");
		t.assertNextTextEquals("Module version");
		t.assertNextTextEquals("Modulstatus");
		t.assertNextTextEquals("Modulversion");
		t.assertNextTextEquals("Mois");
		t.assertNextTextEquals("Mois :");
		t.assertNextTextEquals("Monat");
		t.assertNextTextEquals("Monat:");
		t.assertNextTextEquals("Month");
		t.assertNextTextEquals("Month:");
		t.assertNextTextEquals("Multitronic [Controller]");
		t.assertNextTextEquals("Multitronic [HQM]");
		t.assertNextTextEquals("Multitronic [Regler]");
		t.assertNextTextEquals("Multitronic [WMZ]");
		t.assertNextTextEquals("NH-Anforderung");
		t.assertNextTextEquals("NH1");
		t.assertNextTextEquals("NH2");
		t.assertNextTextEquals("Nachheizung");
		t.assertNextTextEquals("Nachhzg normal");
		t.assertNextTextEquals("Nachlauf");
		t.assertNextTextEquals("Nachtabsenkung");
		t.assertNextTextEquals("Nachtumwälzung");
		t.assertNextTextEquals("Neustarts");
		t.assertNextTextEquals("Night circulation");
		t.assertNextTextEquals("Night correction");
		t.assertNextTextEquals("Nombre cycles (depuis démarrage) :");
		t.assertNextTextEquals("Nombre cycles (total) :");
		t.assertNextTextEquals("Nombre cycles :");
		t.assertNextTextEquals("Nombre de cycles de fonctionnement");
		t.assertNextTextEquals("Nombre démarrages PAC");
		t.assertNextTextEquals("Nombre fonctions DT");
		t.assertNextTextEquals("None");
		t.assertNextTextEquals("Notbetrieb aktiv");
		t.assertNextTextEquals("Noventec Übergabestation [Controller]");
		t.assertNextTextEquals("Noventec Übergabestation [Regler]");
		t.assertNextTextEquals("Number TD functions");
		t.assertNextTextEquals("Number last cancelled TD");
		t.assertNextTextEquals("Number last successful TD");
		t.assertNextTextEquals("Number of HP starts");
		t.assertNextTextEquals("Number of cycles (since start):");
		t.assertNextTextEquals("Number of cycles (sum):");
		t.assertNextTextEquals("Number of cycles:");
		t.assertNextTextEquals("Number of operating cycles");
		t.assertNextTextEquals("Nummer letzte abgebrochene TD");
		t.assertNextTextEquals("Nummer letzte erfolgreiche TD");
		t.assertNextTextEquals("Numéro dernière DT annulée");
		t.assertNextTextEquals("Numéro dernière DT avec succès");
		t.assertNextTextEquals("Numéro erreur");
		t.assertNextTextEquals("Numéro sonde en court circuit");
		t.assertNextTextEquals("Numéro sonde rompue");
		t.assertNextTextEquals("N° secondes");
		t.assertNextTextEquals("OSR 1");
		t.assertNextTextEquals("OSR 2");
		t.assertNextTextEquals("OSR 3");
		t.assertNextTextEquals("OSR 4");
		t.assertNextTextEquals("Ofen Kesseltemp");
		t.assertNextTextEquals("Offset Sensor 1");
		t.assertNextTextEquals("Offset Sensor 2");
		t.assertNextTextEquals("Offset Sensor 3");
		t.assertNextTextEquals("Offset Sensor 4");
		t.assertNextTextEquals("Offset Sensor 5");
		t.assertNextTextEquals("Offset Sensor 6");
		t.assertNextTextEquals("Offset sonde 1");
		t.assertNextTextEquals("Offset sonde 2");
		t.assertNextTextEquals("Offset sonde 3");
		t.assertNextTextEquals("Offset sonde 4");
		t.assertNextTextEquals("Offset sonde 5");
		t.assertNextTextEquals("Offset sonde 6");
		t.assertNextTextEquals("Ohms");
		t.assertNextTextEquals("Onduleur actif");
		t.assertNextTextEquals("Op. mode");
		t.assertNextTextEquals("Operating cycles");
		t.assertNextTextEquals("Operating days");
		t.assertNextTextEquals("Operating hours");
		t.assertNextTextEquals("Operating hours 1");
		t.assertNextTextEquals("Operating hours 2");
		t.assertNextTextEquals("Operating hours 3");
		t.assertNextTextEquals("Operating hours 4");
		t.assertNextTextEquals("Operating hours 5");
		t.assertNextTextEquals("Operating hours 6");
		t.assertNextTextEquals("Operating hours R1");
		t.assertNextTextEquals("Operating hours R2");
		t.assertNextTextEquals("Operating hours flag ");
		t.assertNextTextEquals("Operating hours in total");
		t.assertNextTextEquals("Operating hours relay");
		t.assertNextTextEquals("Operating hours relay 1");
		t.assertNextTextEquals("Operating hours relay 2");
		t.assertNextTextEquals("Operating hours relay 3");
		t.assertNextTextEquals("Operating hours relay 4");
		t.assertNextTextEquals("Operating hours relay1");
		t.assertNextTextEquals("Operating hours relay2");
		t.assertNextTextEquals("Operating message");
		t.assertNextTextEquals("Operating mode (cooling/heating)");
		t.assertNextTextEquals("Operating relay active");
		t.assertNextTextEquals("Operating sec. heat pump");
		t.assertNextTextEquals("Operating seconds");
		t.assertNextTextEquals("Operating seconds R1");
		t.assertNextTextEquals("Operating seconds R2");
		t.assertNextTextEquals("Operating seconds R3");
		t.assertNextTextEquals("Operating seconds R4");
		t.assertNextTextEquals("Operating seconds R5");
		t.assertNextTextEquals("Operating seconds R6");
		t.assertNextTextEquals("Operating seconds R7");
		t.assertNextTextEquals("Operating seconds R8");
		t.assertNextTextEquals("Operating seconds R9");
		t.assertNextTextEquals("Operating seconds backup heating");
		t.assertNextTextEquals("Operating seconds heating");
		t.assertNextTextEquals("Operating seconds output PWM1");
		t.assertNextTextEquals("Operating seconds output PWM2");
		t.assertNextTextEquals("Operating seconds pot.-free relay");
		t.assertNextTextEquals("Operating seconds relay 1");
		t.assertNextTextEquals("Operating seconds relay 2");
		t.assertNextTextEquals("Operating seconds relay 3");
		t.assertNextTextEquals("Operating seconds relay 4");
		t.assertNextTextEquals("Operating seconds relay 5");
		t.assertNextTextEquals("Operating seconds relay FastOff");
		t.assertNextTextEquals("Operating seconds relay pump");
		t.assertNextTextEquals("Operating seconds station");
		t.assertNextTextEquals("Operating state");
		t.assertNextTextEquals("Operating state Backup heating");
		t.assertNextTextEquals("Operating state Error");
		t.assertNextTextEquals("Operating state Flushing");
		t.assertNextTextEquals("Operating state Heating");
		t.assertNextTextEquals("Operating state Max. temp. FL");
		t.assertNextTextEquals("Operating state Max. temp. RE");
		t.assertNextTextEquals("Operating state Off");
		t.assertNextTextEquals("Operating state Ready");
		t.assertNextTextEquals("Operating time circulation");
		t.assertNextTextEquals("Operating time prim. pump");
		t.assertNextTextEquals("Option HQM");
		t.assertNextTextEquals("Option Kollektor Frost");
		t.assertNextTextEquals("Option Kollektor Max.");
		t.assertNextTextEquals("Option Kollektor Min.");
		t.assertNextTextEquals("Option Nachheizung");
		t.assertNextTextEquals("Option Notbetrieb aktiv");
		t.assertNextTextEquals("Option PostPulse");
		t.assertNextTextEquals("Option Röhrenkollektor");
		t.assertNextTextEquals("Option Rückkühlung");
		t.assertNextTextEquals("Option Thermostat");
		t.assertNextTextEquals("Option WMZ");
		t.assertNextTextEquals("Option Zirkulation aktiv");
		t.assertNextTextEquals("Option afterheating");
		t.assertNextTextEquals("Option calorimètre");
		t.assertNextTextEquals("Option capteur antigel");
		t.assertNextTextEquals("Option capteur max.");
		t.assertNextTextEquals("Option capteur min.");
		t.assertNextTextEquals("Option capteurs tubulaires");
		t.assertNextTextEquals("Option chauffage d'appoint");
		t.assertNextTextEquals("Option circulation active");
		t.assertNextTextEquals("Option collector frost");
		t.assertNextTextEquals("Option collector max.");
		t.assertNextTextEquals("Option collector min.");
		t.assertNextTextEquals("Option emergency operation active");
		t.assertNextTextEquals("Option fonc. urgence active");
		t.assertNextTextEquals("Option recooling");
		t.assertNextTextEquals("Option refroidissement par circulation de retour");
		t.assertNextTextEquals("Option thermostat");
		t.assertNextTextEquals("Option tube collector");
		t.assertNextTextEquals("Option: Bilan calorimétrique");
		t.assertNextTextEquals("Option: Fonc. capteurs tubulaires");
		t.assertNextTextEquals("Option: Fonction antigel");
		t.assertNextTextEquals("Option: Frost protection function");
		t.assertNextTextEquals("Option: Frostschutzfunktion");
		t.assertNextTextEquals("Option: Kollektorkühlung");
		t.assertNextTextEquals("Option: Kollektorminimalbegrenzung");
		t.assertNextTextEquals("Option: Limitation minimale du capteur");
		t.assertNextTextEquals("Option: Refroidissement du capteur");
		t.assertNextTextEquals("Option: Refroidissement par circulation de retour");
		t.assertNextTextEquals("Option: Röhrenkollektorfunktion");
		t.assertNextTextEquals("Option: Rückkühlung");
		t.assertNextTextEquals("Option: Wärmemengenzählung");
		t.assertNextTextEquals("Option: collector cooling");
		t.assertNextTextEquals("Option: collector minimum limitation");
		t.assertNextTextEquals("Option: heat quantity measurement");
		t.assertNextTextEquals("Option: recooling");
		t.assertNextTextEquals("Option: tube collector function");
		t.assertNextTextEquals("Optionen");
		t.assertNextTextEquals("Optionen: 2. Kollektor-Ventil");
		t.assertNextTextEquals("Optionen: Boilerladung");
		t.assertNextTextEquals("Optionen: Externer WT");
		t.assertNextTextEquals("Optionen: Frostschutz");
		t.assertNextTextEquals("Optionen: Kollektorkühlung");
		t.assertNextTextEquals("Optionen: Minimal");
		t.assertNextTextEquals("Optionen: Nachheizung");
		t.assertNextTextEquals("Optionen: Röhrenkollektor");
		t.assertNextTextEquals("Optionen: Rückkühlung");
		t.assertNextTextEquals("Optionen: Rücklaufanhebung");
		t.assertNextTextEquals("Optionen: Solarzelle");
		t.assertNextTextEquals("Optionen: Ventil");
		t.assertNextTextEquals("Optionen: WMZ");
		t.assertNextTextEquals("Options");
		t.assertNextTextEquals("Options installation 1");
		t.assertNextTextEquals("Options installation 2");
		t.assertNextTextEquals("Options: 2. collector valve");
		t.assertNextTextEquals("Options: 2. vanne capteur");
		t.assertNextTextEquals("Options: Antigel");
		t.assertNextTextEquals("Options: Augmentation de la température de retour");
		t.assertNextTextEquals("Options: Calorimètre");
		t.assertNextTextEquals("Options: Capteurs tubulaires");
		t.assertNextTextEquals("Options: Cellule solaire");
		t.assertNextTextEquals("Options: Chauffage d'appoint");
		t.assertNextTextEquals("Options: Chauffage du réservoir");
		t.assertNextTextEquals("Options: ECH externe");
		t.assertNextTextEquals("Options: HQM");
		t.assertNextTextEquals("Options: Minimal.");
		t.assertNextTextEquals("Options: Refroidissement capteur");
		t.assertNextTextEquals("Options: Refroidissement par circulation de retour");
		t.assertNextTextEquals("Options: Vanne");
		t.assertNextTextEquals("Options: afterheating");
		t.assertNextTextEquals("Options: boiler loading");
		t.assertNextTextEquals("Options: collector cooling");
		t.assertNextTextEquals("Options: external HX");
		t.assertNextTextEquals("Options: frost protection");
		t.assertNextTextEquals("Options: minimal");
		t.assertNextTextEquals("Options: recooling");
		t.assertNextTextEquals("Options: return preheating");
		t.assertNextTextEquals("Options: solar cell");
		t.assertNextTextEquals("Options: tube collector");
		t.assertNextTextEquals("Options: valve");
		t.assertNextTextEquals("Oranier HK [Controller]");
		t.assertNextTextEquals("Oranier HK [HQM1]");
		t.assertNextTextEquals("Oranier HK [Regler]");
		t.assertNextTextEquals("Oranier HK [WMZ1]");
		t.assertNextTextEquals("Outdoor temperature");
		t.assertNextTextEquals("Outdoor temperature bus");
		t.assertNextTextEquals("Output A");
		t.assertNextTextEquals("Output B");
		t.assertNextTextEquals("Output C");
		t.assertNextTextEquals("Output D");
		t.assertNextTextEquals("Oventrop RQ-B XXL");
		t.assertNextTextEquals("Overheating active");
		t.assertNextTextEquals("Overpressure");
		t.assertNextTextEquals("Overrun");
		t.assertNextTextEquals("Overtemperature protection active");
		t.assertNextTextEquals("P,Cap puissance nominale");
		t.assertNextTextEquals("P,Ko Nennleistung");
		t.assertNextTextEquals("P,Ko nominal power");
		t.assertNextTextEquals("P1");
		t.assertNextTextEquals("P1Rés");
		t.assertNextTextEquals("P1S");
		t.assertNextTextEquals("P2");
		t.assertNextTextEquals("PAC en marche");
		t.assertNextTextEquals("PAW Kaskade BasisAdr");
		t.assertNextTextEquals("PAW Kaskade Master");
		t.assertNextTextEquals("PAW Kaskade Slave  1");
		t.assertNextTextEquals("PAW Kaskade Slave  2");
		t.assertNextTextEquals("PAW Kaskade Slave  3");
		t.assertNextTextEquals("PAW Kaskade Slave  4");
		t.assertNextTextEquals("PAW Kaskade Slave  5");
		t.assertNextTextEquals("PAW Kaskade Slave  6");
		t.assertNextTextEquals("PAW Kaskade Slave  7");
		t.assertNextTextEquals("PAW Kaskade Slave  8");
		t.assertNextTextEquals("PAW Kaskade Slave  9");
		t.assertNextTextEquals("PAW Kaskade Slave 10");
		t.assertNextTextEquals("PAW Kaskade Slave 11");
		t.assertNextTextEquals("PAW Kaskade Slave 12");
		t.assertNextTextEquals("PAW Kaskade Slave 13");
		t.assertNextTextEquals("PAW Kaskade Slave 14");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Controller]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [HQM #0]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [HQM #10]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [HQM #11]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [HQM #12]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [HQM #13]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [HQM #14]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [HQM #15]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [HQM #1]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [HQM #2]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [HQM #3]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [HQM #4]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [HQM #5]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [HQM #6]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [HQM #7]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [HQM #8]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [HQM #9]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [HQM #]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heating circuit #0]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heating circuit #10]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heating circuit #11]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heating circuit #12]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heating circuit #13]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heating circuit #14]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heating circuit #15]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heating circuit #1]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heating circuit #2]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heating circuit #3]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heating circuit #4]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heating circuit #5]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heating circuit #6]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heating circuit #7]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heating circuit #8]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heating circuit #9]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heating circuit #]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heizkreis #0]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heizkreis #10]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heizkreis #11]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heizkreis #12]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heizkreis #13]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heizkreis #14]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heizkreis #15]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heizkreis #1]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heizkreis #2]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heizkreis #3]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heizkreis #4]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heizkreis #5]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heizkreis #6]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heizkreis #7]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heizkreis #8]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heizkreis #9]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Heizkreis #]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Module]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Modules]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [Regler]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [WMZ #0]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [WMZ #10]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [WMZ #11]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [WMZ #12]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [WMZ #13]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [WMZ #14]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [WMZ #15]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [WMZ #1]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [WMZ #2]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [WMZ #3]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [WMZ #4]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [WMZ #5]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [WMZ #6]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [WMZ #7]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [WMZ #8]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [WMZ #9]");
		t.assertNextTextEquals("PAW SOLEX SC5.14 [WMZ #]");
		t.assertNextTextEquals("PFB1 Duty");
		t.assertNextTextEquals("PFB1 Freq.");
		t.assertNextTextEquals("PFB1 defective");
		t.assertNextTextEquals("PFB1 defekt");
		t.assertNextTextEquals("PFB1 défectueux");
		t.assertNextTextEquals("PFB2 Duty");
		t.assertNextTextEquals("PFB2 Freq.");
		t.assertNextTextEquals("PFB2 defective");
		t.assertNextTextEquals("PFB2 defekt");
		t.assertNextTextEquals("PFB2 défectueux");
		t.assertNextTextEquals("PID D part");
		t.assertNextTextEquals("PID D-Anteil");
		t.assertNextTextEquals("PID I part");
		t.assertNextTextEquals("PID I-Anteil");
		t.assertNextTextEquals("PID P part");
		t.assertNextTextEquals("PID P-Anteil");
		t.assertNextTextEquals("PS: Pump speed 1");
		t.assertNextTextEquals("PS: Pump speed 2");
		t.assertNextTextEquals("PWM 1");
		t.assertNextTextEquals("PWM 2");
		t.assertNextTextEquals("PWM 28");
		t.assertNextTextEquals("PWM 3");
		t.assertNextTextEquals("PWM A");
		t.assertNextTextEquals("PWM B");
		t.assertNextTextEquals("PWM P");
		t.assertNextTextEquals("PWM/0-10V A");
		t.assertNextTextEquals("PWM/0-10V B");
		t.assertNextTextEquals("PWM/0-10V C");
		t.assertNextTextEquals("PWM/0-10V D");
		t.assertNextTextEquals("PWM1");
		t.assertNextTextEquals("Parameter Anstieg");
		t.assertNextTextEquals("Parameter Anstiegszeit");
		t.assertNextTextEquals("Parameter Haltezeit");
		t.assertNextTextEquals("Parameter Max. Temp. (S1)");
		t.assertNextTextEquals("Parameter Reserve");
		t.assertNextTextEquals("Parameter Rise");
		t.assertNextTextEquals("Parameter Rise time");
		t.assertNextTextEquals("Parameter Start");
		t.assertNextTextEquals("Parameter TMax");
		t.assertNextTextEquals("Parameter TStart");
		t.assertNextTextEquals("Parameter Zieltemperatur");
		t.assertNextTextEquals("Parameter backing time");
		t.assertNextTextEquals("Paramter Reserve");
		t.assertNextTextEquals("Paramter TStart");
		t.assertNextTextEquals("Paramter Target temperature");
		t.assertNextTextEquals("Paramètre Augmentation");
		t.assertNextTextEquals("Paramètre Démarrage");
		t.assertNextTextEquals("Paramètre Reserve");
		t.assertNextTextEquals("Paramètre TDémarrage");
		t.assertNextTextEquals("Paramètre TMax");
		t.assertNextTextEquals("Paramètre Temps d'augmentation");
		t.assertNextTextEquals("Paramètre Temps de maintien");
		t.assertNextTextEquals("Paramètre Température cible");
		t.assertNextTextEquals("Partie PID D");
		t.assertNextTextEquals("Partie PID I");
		t.assertNextTextEquals("Partie PID P");
		t.assertNextTextEquals("Pause alterné");
		t.assertNextTextEquals("Pause vanne mél.");
		t.assertNextTextEquals("Pendelpause");
		t.assertNextTextEquals("Percent");
		t.assertNextTextEquals("PercentRelativeHumidity");
		t.assertNextTextEquals("Permanent circ.");
		t.assertNextTextEquals("Ph");
		t.assertNextTextEquals("Phase :");
		t.assertNextTextEquals("Phase désinf.");
		t.assertNextTextEquals("Phase solaire");
		t.assertNextTextEquals("Phase:");
		t.assertNextTextEquals("Piscine max.");
		t.assertNextTextEquals("Pompe CC");
		t.assertNextTextEquals("Pompe HAT");
		t.assertNextTextEquals("Pompe LT");
		t.assertNextTextEquals("Pompe MT");
		t.assertNextTextEquals("Pompe charge ECS");
		t.assertNextTextEquals("Pompe de circulation");
		t.assertNextTextEquals("Pompe poêle");
		t.assertNextTextEquals("Pompe primaire");
		t.assertNextTextEquals("Pompe solaire");
		t.assertNextTextEquals("Pompe à chaleur");
		t.assertNextTextEquals("Pompe à chaleur Tcalc.");
		t.assertNextTextEquals("Pool max.");
		t.assertNextTextEquals("Potentiometer");
		t.assertNextTextEquals("Potentiomètre");
		t.assertNextTextEquals("Poti");
		t.assertNextTextEquals("PoundsForcePerSquareInch");
		t.assertNextTextEquals("Power");
		t.assertNextTextEquals("Power 2");
		t.assertNextTextEquals("Power 3");
		t.assertNextTextEquals("Power Excess");
		t.assertNextTextEquals("Power Heating");
		t.assertNextTextEquals("Power Load ext.");
		t.assertNextTextEquals("Power P,Ko");
		t.assertNextTextEquals("Power P,S");
		t.assertNextTextEquals("Pression");
		t.assertNextTextEquals("Pression (S6) défectueuse");
		t.assertNextTextEquals("Pression RPS");
		t.assertNextTextEquals("Pression RPS (S6)");
		t.assertNextTextEquals("Pression atmosphérique");
		t.assertNextTextEquals("Pression sonde 11");
		t.assertNextTextEquals("Pression sonde 12");
		t.assertNextTextEquals("Pression sonde 17");
		t.assertNextTextEquals("Pression sonde 18");
		t.assertNextTextEquals("Pression sonde 19");
		t.assertNextTextEquals("Pression sonde 20");
		t.assertNextTextEquals("Pression sonde Ga1");
		t.assertNextTextEquals("Pression sonde Ga2");
		t.assertNextTextEquals("Pression sonde Gds1");
		t.assertNextTextEquals("Pression sonde Gds2");
		t.assertNextTextEquals("Pression sonde RPS");
		t.assertNextTextEquals("Pression système");
		t.assertNextTextEquals("Pressure");
		t.assertNextTextEquals("Pressure (S6) defective");
		t.assertNextTextEquals("Pressure RPS");
		t.assertNextTextEquals("Pressure RPS (S6)");
		t.assertNextTextEquals("Pressure sensor 11");
		t.assertNextTextEquals("Pressure sensor 12");
		t.assertNextTextEquals("Pressure sensor 17");
		t.assertNextTextEquals("Pressure sensor 18");
		t.assertNextTextEquals("Pressure sensor 19");
		t.assertNextTextEquals("Pressure sensor 20");
		t.assertNextTextEquals("Pressure sensor Ga1");
		t.assertNextTextEquals("Pressure sensor Ga2");
		t.assertNextTextEquals("Pressure sensor Gds1");
		t.assertNextTextEquals("Pressure sensor Gds2");
		t.assertNextTextEquals("Pressure sensor RPS");
		t.assertNextTextEquals("Primary pump");
		t.assertNextTextEquals("Primärkreis Rücklaufmaximaltemperatur");
		t.assertNextTextEquals("Primärkreis Rücklauftemperatur");
		t.assertNextTextEquals("Primärkreis Stellantrieb");
		t.assertNextTextEquals("Primärkreis Vorlauftemperatur");
		t.assertNextTextEquals("Primärpumpe");
		t.assertNextTextEquals("Production ECS");
		t.assertNextTextEquals("Production ECS active");
		t.assertNextTextEquals("Program.");
		t.assertNextTextEquals("Programm");
		t.assertNextTextEquals("Programmateur 1.1");
		t.assertNextTextEquals("Programmateur 1.2");
		t.assertNextTextEquals("Programmateur 2.1");
		t.assertNextTextEquals("Programmateur 2.2");
		t.assertNextTextEquals("Programmateur 3.1");
		t.assertNextTextEquals("Programmateur 3.2");
		t.assertNextTextEquals("Programmateur 4.1");
		t.assertNextTextEquals("Programmateur 4.2");
		t.assertNextTextEquals("Programmateur 5.1");
		t.assertNextTextEquals("Programmateur 5.2");
		t.assertNextTextEquals("Programme");
		t.assertNextTextEquals("Protection surtempérature active");
		t.assertNextTextEquals("Puisage");
		t.assertNextTextEquals("Puisage actif");
		t.assertNextTextEquals("Puisage restant");
		t.assertNextTextEquals("Puissance");
		t.assertNextTextEquals("Puissance 2");
		t.assertNextTextEquals("Puissance 3");
		t.assertNextTextEquals("Puissance Appareil électrique externe");
		t.assertNextTextEquals("Puissance Chauffage");
		t.assertNextTextEquals("Puissance Excédent");
		t.assertNextTextEquals("Puissance P, Cap");
		t.assertNextTextEquals("Puissance P, Rés");
		t.assertNextTextEquals("Pump Solar");
		t.assertNextTextEquals("Pump Stove");
		t.assertNextTextEquals("Pump check");
		t.assertNextTextEquals("Pump delay");
		t.assertNextTextEquals("Pump monitoring");
		t.assertNextTextEquals("Pump relay");
		t.assertNextTextEquals("Pump runtime R1");
		t.assertNextTextEquals("Pump speed (PC)");
		t.assertNextTextEquals("Pump speed 1");
		t.assertNextTextEquals("Pump speed 1 R1");
		t.assertNextTextEquals("Pump speed 1 R2");
		t.assertNextTextEquals("Pump speed 1 R3");
		t.assertNextTextEquals("Pump speed 1 R4");
		t.assertNextTextEquals("Pump speed 1 R5");
		t.assertNextTextEquals("Pump speed 2");
		t.assertNextTextEquals("Pump speed 2 R1");
		t.assertNextTextEquals("Pump speed 2 R2");
		t.assertNextTextEquals("Pump speed 2 R3");
		t.assertNextTextEquals("Pump speed 2 R4");
		t.assertNextTextEquals("Pump speed 2 R5");
		t.assertNextTextEquals("Pump speed 3");
		t.assertNextTextEquals("Pump speed A");
		t.assertNextTextEquals("Pump speed A1");
		t.assertNextTextEquals("Pump speed A2");
		t.assertNextTextEquals("Pump speed A3");
		t.assertNextTextEquals("Pump speed R1");
		t.assertNextTextEquals("Pump speed R10");
		t.assertNextTextEquals("Pump speed R11");
		t.assertNextTextEquals("Pump speed R12");
		t.assertNextTextEquals("Pump speed R13");
		t.assertNextTextEquals("Pump speed R14");
		t.assertNextTextEquals("Pump speed R15");
		t.assertNextTextEquals("Pump speed R16");
		t.assertNextTextEquals("Pump speed R17");
		t.assertNextTextEquals("Pump speed R18");
		t.assertNextTextEquals("Pump speed R19");
		t.assertNextTextEquals("Pump speed R2");
		t.assertNextTextEquals("Pump speed R20");
		t.assertNextTextEquals("Pump speed R21");
		t.assertNextTextEquals("Pump speed R22");
		t.assertNextTextEquals("Pump speed R23");
		t.assertNextTextEquals("Pump speed R24");
		t.assertNextTextEquals("Pump speed R25");
		t.assertNextTextEquals("Pump speed R26");
		t.assertNextTextEquals("Pump speed R27");
		t.assertNextTextEquals("Pump speed R28");
		t.assertNextTextEquals("Pump speed R29");
		t.assertNextTextEquals("Pump speed R3");
		t.assertNextTextEquals("Pump speed R30");
		t.assertNextTextEquals("Pump speed R31");
		t.assertNextTextEquals("Pump speed R32");
		t.assertNextTextEquals("Pump speed R33");
		t.assertNextTextEquals("Pump speed R4");
		t.assertNextTextEquals("Pump speed R5");
		t.assertNextTextEquals("Pump speed R6");
		t.assertNextTextEquals("Pump speed R7");
		t.assertNextTextEquals("Pump speed R8");
		t.assertNextTextEquals("Pump speed R9");
		t.assertNextTextEquals("Pump speed circulation");
		t.assertNextTextEquals("Pump speed circulation pump");
		t.assertNextTextEquals("Pump speed heat pump");
		t.assertNextTextEquals("Pump speed output PWM 1");
		t.assertNextTextEquals("Pump speed output PWM 2");
		t.assertNextTextEquals("Pump speed prim. pump");
		t.assertNextTextEquals("Pump speed pump 1");
		t.assertNextTextEquals("Pump speed pump 2");
		t.assertNextTextEquals("Pump speed relay");
		t.assertNextTextEquals("Pump speed relay 1");
		t.assertNextTextEquals("Pump speed relay 1 (<= v1.01)");
		t.assertNextTextEquals("Pump speed relay 1 (>= v1.02)");
		t.assertNextTextEquals("Pump speed relay 1.1");
		t.assertNextTextEquals("Pump speed relay 1.2");
		t.assertNextTextEquals("Pump speed relay 10");
		t.assertNextTextEquals("Pump speed relay 11");
		t.assertNextTextEquals("Pump speed relay 12");
		t.assertNextTextEquals("Pump speed relay 13");
		t.assertNextTextEquals("Pump speed relay 14");
		t.assertNextTextEquals("Pump speed relay 2");
		t.assertNextTextEquals("Pump speed relay 2 (<= v1.01)");
		t.assertNextTextEquals("Pump speed relay 2 (>= v1.02)");
		t.assertNextTextEquals("Pump speed relay 2.1");
		t.assertNextTextEquals("Pump speed relay 2.2");
		t.assertNextTextEquals("Pump speed relay 3");
		t.assertNextTextEquals("Pump speed relay 3.1");
		t.assertNextTextEquals("Pump speed relay 3.2");
		t.assertNextTextEquals("Pump speed relay 4");
		t.assertNextTextEquals("Pump speed relay 4.1");
		t.assertNextTextEquals("Pump speed relay 4.2");
		t.assertNextTextEquals("Pump speed relay 5");
		t.assertNextTextEquals("Pump speed relay 5.1");
		t.assertNextTextEquals("Pump speed relay 5.2");
		t.assertNextTextEquals("Pump speed relay 6");
		t.assertNextTextEquals("Pump speed relay 7");
		t.assertNextTextEquals("Pump speed relay 8");
		t.assertNextTextEquals("Pump speed relay 9");
		t.assertNextTextEquals("Pump speed relay FastOff");
		t.assertNextTextEquals("Pump speed relay Pumpe");
		t.assertNextTextEquals("Pump speed relay pot.frei");
		t.assertNextTextEquals("Pump speed second. pump");
		t.assertNextTextEquals("Pumpe Ofen");
		t.assertNextTextEquals("Pumpe Solar");
		t.assertNextTextEquals("Pumpencheck");
		t.assertNextTextEquals("Pumpendrehzahl (PC)");
		t.assertNextTextEquals("Pumpenlaufzeit R1");
		t.assertNextTextEquals("Pumpenrelais:");
		t.assertNextTextEquals("Pumpenverzögerung");
		t.assertNextTextEquals("Pumpenüberwachung");
		t.assertNextTextEquals("Période PAC / 24h");
		t.assertNextTextEquals("Période blocage Circulation");
		t.assertNextTextEquals("Q-erw");
		t.assertNextTextEquals("Q-erw2");
		t.assertNextTextEquals("Q-est");
		t.assertNextTextEquals("Q-est2");
		t.assertNextTextEquals("Q-meas");
		t.assertNextTextEquals("Q-mes");
		t.assertNextTextEquals("Q-mess");
		t.assertNextTextEquals("Qkv-e");
		t.assertNextTextEquals("Qkv-e2");
		t.assertNextTextEquals("Qmeas2");
		t.assertNextTextEquals("Qmes2");
		t.assertNextTextEquals("Qmess2");
		t.assertNextTextEquals("Qskv-e");
		t.assertNextTextEquals("Qskv-e2");
		t.assertNextTextEquals("Qtv-e");
		t.assertNextTextEquals("Qtv-e2");
		t.assertNextTextEquals("Quantité de chaleur");
		t.assertNextTextEquals("Quantité de chaleur (<= v1.01)");
		t.assertNextTextEquals("Quantité de chaleur (>= v1.02)");
		t.assertNextTextEquals("Quantité de chaleur 1");
		t.assertNextTextEquals("Quantité de chaleur 2");
		t.assertNextTextEquals("Quantité de chaleur MWh");
		t.assertNextTextEquals("Quantité de chaleur S,p");
		t.assertNextTextEquals("Quantité de chaleur S,s");
		t.assertNextTextEquals("Quantité de chaleur aujourd'hui");
		t.assertNextTextEquals("Quantité de chaleur kWh");
		t.assertNextTextEquals("Quantité de chaleur semaine");
		t.assertNextTextEquals("Quantité puisée");
		t.assertNextTextEquals("Quantité puisée max.");
		t.assertNextTextEquals("Qutil-e");
		t.assertNextTextEquals("Qutil-e2");
		t.assertNextTextEquals("Qutil-m");
		t.assertNextTextEquals("R-Wandler");
		t.assertNextTextEquals("R1");
		t.assertNextTextEquals("R1 - Handbetrieb");
		t.assertNextTextEquals("R1 manual mode");
		t.assertNextTextEquals("R1 mode manuel");
		t.assertNextTextEquals("R1-SP-1");
		t.assertNextTextEquals("R10-SV-2/HKP-2/V-RL");
		t.assertNextTextEquals("R11-MV-2 auf/BLP-2/SV-3");
		t.assertNextTextEquals("R12-MV-2 zu/SV-3/V-RLU");
		t.assertNextTextEquals("R13-ZP");
		t.assertNextTextEquals("R14-RP");
		t.assertNextTextEquals("R2");
		t.assertNextTextEquals("R2 - Handbetrieb");
		t.assertNextTextEquals("R2 manual mode");
		t.assertNextTextEquals("R2 mode manuel");
		t.assertNextTextEquals("R2-SP-2");
		t.assertNextTextEquals("R3");
		t.assertNextTextEquals("R3-BLP/1");
		t.assertNextTextEquals("R4");
		t.assertNextTextEquals("R4-SV1/V-RLU");
		t.assertNextTextEquals("R5-HKP1");
		t.assertNextTextEquals("R6-MV-1 auf");
		t.assertNextTextEquals("R7-MV-1 zu");
		t.assertNextTextEquals("R8-KLP-1/HKP-2");
		t.assertNextTextEquals("R9-KLP-2/SP-3");
		t.assertNextTextEquals("RCS %:");
		t.assertNextTextEquals("RPT-Steuerbox");
		t.assertNextTextEquals("RPT-Testsoftware");
		t.assertNextTextEquals("RTC Fehler");
		t.assertNextTextEquals("RTC error");
		t.assertNextTextEquals("Rated current 1");
		t.assertNextTextEquals("Rated current 1_1s");
		t.assertNextTextEquals("Rated current 2");
		t.assertNextTextEquals("Rated current 2_1s");
		t.assertNextTextEquals("Rayonnement diffus");
		t.assertNextTextEquals("Recooling");
		t.assertNextTextEquals("Redémarrages");
		t.assertNextTextEquals("Refroidissement capteur");
		t.assertNextTextEquals("Refroidissement par circulation de retour");
		t.assertNextTextEquals("Refroidissement réservoir");
		t.assertNextTextEquals("Refroidissement système");
		t.assertNextTextEquals("Regelflags");
		t.assertNextTextEquals("Regelstatus");
		t.assertNextTextEquals("Registre de contrôle");
		t.assertNextTextEquals("Regler Ausgang 1");
		t.assertNextTextEquals("Regler Ausgang 2");
		t.assertNextTextEquals("Reglervariante");
		t.assertNextTextEquals("Reglerversion");
		t.assertNextTextEquals("Regtronic RQ-B");
		t.assertNextTextEquals("Regtronic RX-B [Controller]");
		t.assertNextTextEquals("Regtronic RX-B [HQM #0]");
		t.assertNextTextEquals("Regtronic RX-B [HQM #10]");
		t.assertNextTextEquals("Regtronic RX-B [HQM #11]");
		t.assertNextTextEquals("Regtronic RX-B [HQM #12]");
		t.assertNextTextEquals("Regtronic RX-B [HQM #13]");
		t.assertNextTextEquals("Regtronic RX-B [HQM #14]");
		t.assertNextTextEquals("Regtronic RX-B [HQM #15]");
		t.assertNextTextEquals("Regtronic RX-B [HQM #1]");
		t.assertNextTextEquals("Regtronic RX-B [HQM #2]");
		t.assertNextTextEquals("Regtronic RX-B [HQM #3]");
		t.assertNextTextEquals("Regtronic RX-B [HQM #4]");
		t.assertNextTextEquals("Regtronic RX-B [HQM #5]");
		t.assertNextTextEquals("Regtronic RX-B [HQM #6]");
		t.assertNextTextEquals("Regtronic RX-B [HQM #7]");
		t.assertNextTextEquals("Regtronic RX-B [HQM #8]");
		t.assertNextTextEquals("Regtronic RX-B [HQM #9]");
		t.assertNextTextEquals("Regtronic RX-B [HQM #]");
		t.assertNextTextEquals("Regtronic RX-B [Module]");
		t.assertNextTextEquals("Regtronic RX-B [Modules]");
		t.assertNextTextEquals("Regtronic RX-B [Regler]");
		t.assertNextTextEquals("Regtronic RX-B [WMZ #0]");
		t.assertNextTextEquals("Regtronic RX-B [WMZ #10]");
		t.assertNextTextEquals("Regtronic RX-B [WMZ #11]");
		t.assertNextTextEquals("Regtronic RX-B [WMZ #12]");
		t.assertNextTextEquals("Regtronic RX-B [WMZ #13]");
		t.assertNextTextEquals("Regtronic RX-B [WMZ #14]");
		t.assertNextTextEquals("Regtronic RX-B [WMZ #15]");
		t.assertNextTextEquals("Regtronic RX-B [WMZ #1]");
		t.assertNextTextEquals("Regtronic RX-B [WMZ #2]");
		t.assertNextTextEquals("Regtronic RX-B [WMZ #3]");
		t.assertNextTextEquals("Regtronic RX-B [WMZ #4]");
		t.assertNextTextEquals("Regtronic RX-B [WMZ #5]");
		t.assertNextTextEquals("Regtronic RX-B [WMZ #6]");
		t.assertNextTextEquals("Regtronic RX-B [WMZ #7]");
		t.assertNextTextEquals("Regtronic RX-B [WMZ #8]");
		t.assertNextTextEquals("Regtronic RX-B [WMZ #9]");
		t.assertNextTextEquals("Regtronic RX-B [WMZ #]");
		t.assertNextTextEquals("Regudis H-HT [BW-Erwärmung #0]");
		t.assertNextTextEquals("Regudis H-HT [BW-Erwärmung #10]");
		t.assertNextTextEquals("Regudis H-HT [BW-Erwärmung #11]");
		t.assertNextTextEquals("Regudis H-HT [BW-Erwärmung #12]");
		t.assertNextTextEquals("Regudis H-HT [BW-Erwärmung #13]");
		t.assertNextTextEquals("Regudis H-HT [BW-Erwärmung #14]");
		t.assertNextTextEquals("Regudis H-HT [BW-Erwärmung #15]");
		t.assertNextTextEquals("Regudis H-HT [BW-Erwärmung #1]");
		t.assertNextTextEquals("Regudis H-HT [BW-Erwärmung #2]");
		t.assertNextTextEquals("Regudis H-HT [BW-Erwärmung #3]");
		t.assertNextTextEquals("Regudis H-HT [BW-Erwärmung #4]");
		t.assertNextTextEquals("Regudis H-HT [BW-Erwärmung #5]");
		t.assertNextTextEquals("Regudis H-HT [BW-Erwärmung #6]");
		t.assertNextTextEquals("Regudis H-HT [BW-Erwärmung #7]");
		t.assertNextTextEquals("Regudis H-HT [BW-Erwärmung #8]");
		t.assertNextTextEquals("Regudis H-HT [BW-Erwärmung #9]");
		t.assertNextTextEquals("Regudis H-HT [BW-Erwärmung #]");
		t.assertNextTextEquals("Regudis H-HT [DHW heating #0]");
		t.assertNextTextEquals("Regudis H-HT [DHW heating #10]");
		t.assertNextTextEquals("Regudis H-HT [DHW heating #11]");
		t.assertNextTextEquals("Regudis H-HT [DHW heating #12]");
		t.assertNextTextEquals("Regudis H-HT [DHW heating #13]");
		t.assertNextTextEquals("Regudis H-HT [DHW heating #14]");
		t.assertNextTextEquals("Regudis H-HT [DHW heating #15]");
		t.assertNextTextEquals("Regudis H-HT [DHW heating #1]");
		t.assertNextTextEquals("Regudis H-HT [DHW heating #2]");
		t.assertNextTextEquals("Regudis H-HT [DHW heating #3]");
		t.assertNextTextEquals("Regudis H-HT [DHW heating #4]");
		t.assertNextTextEquals("Regudis H-HT [DHW heating #5]");
		t.assertNextTextEquals("Regudis H-HT [DHW heating #6]");
		t.assertNextTextEquals("Regudis H-HT [DHW heating #7]");
		t.assertNextTextEquals("Regudis H-HT [DHW heating #8]");
		t.assertNextTextEquals("Regudis H-HT [DHW heating #9]");
		t.assertNextTextEquals("Regudis H-HT [DHW heating #]");
		t.assertNextTextEquals("Regudis H-HT [Transm. station #0]");
		t.assertNextTextEquals("Regudis H-HT [Transm. station #10]");
		t.assertNextTextEquals("Regudis H-HT [Transm. station #11]");
		t.assertNextTextEquals("Regudis H-HT [Transm. station #12]");
		t.assertNextTextEquals("Regudis H-HT [Transm. station #13]");
		t.assertNextTextEquals("Regudis H-HT [Transm. station #14]");
		t.assertNextTextEquals("Regudis H-HT [Transm. station #15]");
		t.assertNextTextEquals("Regudis H-HT [Transm. station #1]");
		t.assertNextTextEquals("Regudis H-HT [Transm. station #2]");
		t.assertNextTextEquals("Regudis H-HT [Transm. station #3]");
		t.assertNextTextEquals("Regudis H-HT [Transm. station #4]");
		t.assertNextTextEquals("Regudis H-HT [Transm. station #5]");
		t.assertNextTextEquals("Regudis H-HT [Transm. station #6]");
		t.assertNextTextEquals("Regudis H-HT [Transm. station #7]");
		t.assertNextTextEquals("Regudis H-HT [Transm. station #8]");
		t.assertNextTextEquals("Regudis H-HT [Transm. station #9]");
		t.assertNextTextEquals("Regudis H-HT [Transm. station #]");
		t.assertNextTextEquals("Regudis H-HT [Übergabestation #0]");
		t.assertNextTextEquals("Regudis H-HT [Übergabestation #10]");
		t.assertNextTextEquals("Regudis H-HT [Übergabestation #11]");
		t.assertNextTextEquals("Regudis H-HT [Übergabestation #12]");
		t.assertNextTextEquals("Regudis H-HT [Übergabestation #13]");
		t.assertNextTextEquals("Regudis H-HT [Übergabestation #14]");
		t.assertNextTextEquals("Regudis H-HT [Übergabestation #15]");
		t.assertNextTextEquals("Regudis H-HT [Übergabestation #1]");
		t.assertNextTextEquals("Regudis H-HT [Übergabestation #2]");
		t.assertNextTextEquals("Regudis H-HT [Übergabestation #3]");
		t.assertNextTextEquals("Regudis H-HT [Übergabestation #4]");
		t.assertNextTextEquals("Regudis H-HT [Übergabestation #5]");
		t.assertNextTextEquals("Regudis H-HT [Übergabestation #6]");
		t.assertNextTextEquals("Regudis H-HT [Übergabestation #7]");
		t.assertNextTextEquals("Regudis H-HT [Übergabestation #8]");
		t.assertNextTextEquals("Regudis H-HT [Übergabestation #9]");
		t.assertNextTextEquals("Regudis H-HT [Übergabestation #]");
		t.assertNextTextEquals("Relais 1");
		t.assertNextTextEquals("Relais 1 an");
		t.assertNextTextEquals("Relais 1 benutzt");
		t.assertNextTextEquals("Relais 1 on");
		t.assertNextTextEquals("Relais 1 used");
		t.assertNextTextEquals("Relais 1 utilisé");
		t.assertNextTextEquals("Relais 157");
		t.assertNextTextEquals("Relais 2");
		t.assertNextTextEquals("Relais 2 an");
		t.assertNextTextEquals("Relais 2 benutzt");
		t.assertNextTextEquals("Relais 2 on");
		t.assertNextTextEquals("Relais 2 used");
		t.assertNextTextEquals("Relais 2 utilisé");
		t.assertNextTextEquals("Relais 28");
		t.assertNextTextEquals("Relais 3");
		t.assertNextTextEquals("Relais 3 benutzt");
		t.assertNextTextEquals("Relais 3 used");
		t.assertNextTextEquals("Relais 3 utilisé");
		t.assertNextTextEquals("Relais 4");
		t.assertNextTextEquals("Relais 4 benutzt");
		t.assertNextTextEquals("Relais 4 used");
		t.assertNextTextEquals("Relais 4 utilisé");
		t.assertNextTextEquals("Relais 5");
		t.assertNextTextEquals("Relais 5 benutzt");
		t.assertNextTextEquals("Relais 5 used");
		t.assertNextTextEquals("Relais 5 utilisé");
		t.assertNextTextEquals("Relais 6");
		t.assertNextTextEquals("Relais 6 benutzt");
		t.assertNextTextEquals("Relais 6 used");
		t.assertNextTextEquals("Relais 6 utilisé");
		t.assertNextTextEquals("Relais 7");
		t.assertNextTextEquals("Relais 7 benutzt");
		t.assertNextTextEquals("Relais 7 used");
		t.assertNextTextEquals("Relais 7 utilisé");
		t.assertNextTextEquals("Relais 8");
		t.assertNextTextEquals("Relais Mischer Auf");
		t.assertNextTextEquals("Relais Mischer Zu");
		t.assertNextTextEquals("Relais Mixer closed");
		t.assertNextTextEquals("Relais Mixer open");
		t.assertNextTextEquals("Relais P,H");
		t.assertNextTextEquals("Relais PAC");
		t.assertNextTextEquals("Relais Pumpe");
		t.assertNextTextEquals("Relais WP");
		t.assertNextTextEquals("Relais avertisseur");
		t.assertNextTextEquals("Relais de fonctionnement actif");
		t.assertNextTextEquals("Relais erreur");
		t.assertNextTextEquals("Relais pompe");
		t.assertNextTextEquals("Relais vanne mél. fer.");
		t.assertNextTextEquals("Relais vanne mél. ouv.");
		t.assertNextTextEquals("Relais-Maske");
		t.assertNextTextEquals("Relaisbenutzungsmaske");
		t.assertNextTextEquals("Relaisbyte");
		t.assertNextTextEquals("Relaismaske");
		t.assertNextTextEquals("Relaismaske (>= v1.02)");
		t.assertNextTextEquals("Relaisstatus");
		t.assertNextTextEquals("Relaisstatus 1");
		t.assertNextTextEquals("Relaisstatus 2");
		t.assertNextTextEquals("Relaisstatus 3");
		t.assertNextTextEquals("Relaisstatus 4");
		t.assertNextTextEquals("Relaisstatus 5");
		t.assertNextTextEquals("Relaisstatus 6");
		t.assertNextTextEquals("Relaisstatus R4");
		t.assertNextTextEquals("Relaisstatus R5");
		t.assertNextTextEquals("Relaisstatus R6");
		t.assertNextTextEquals("Relaisstatus R7");
		t.assertNextTextEquals("Relaisstatus R8");
		t.assertNextTextEquals("Relaisstatus R9");
		t.assertNextTextEquals("Relaisstatus Relais 1");
		t.assertNextTextEquals("Relaisstatus Relais 2");
		t.assertNextTextEquals("Relay 1");
		t.assertNextTextEquals("Relay 1 active");
		t.assertNextTextEquals("Relay 157");
		t.assertNextTextEquals("Relay 2");
		t.assertNextTextEquals("Relay 2 active");
		t.assertNextTextEquals("Relay 28");
		t.assertNextTextEquals("Relay 3");
		t.assertNextTextEquals("Relay 3 status");
		t.assertNextTextEquals("Relay 4");
		t.assertNextTextEquals("Relay 4 status");
		t.assertNextTextEquals("Relay 5");
		t.assertNextTextEquals("Relay 6");
		t.assertNextTextEquals("Relay 7");
		t.assertNextTextEquals("Relay 8");
		t.assertNextTextEquals("Relay HP");
		t.assertNextTextEquals("Relay P,H");
		t.assertNextTextEquals("Relay Pump");
		t.assertNextTextEquals("Relay bit mask");
		t.assertNextTextEquals("Relay byte");
		t.assertNextTextEquals("Relay mask");
		t.assertNextTextEquals("Relay mask (>= v1.02)");
		t.assertNextTextEquals("Relay state relay 1");
		t.assertNextTextEquals("Relay state relay 2");
		t.assertNextTextEquals("Relay status");
		t.assertNextTextEquals("Relay status 1");
		t.assertNextTextEquals("Relay status 2");
		t.assertNextTextEquals("Relay status 3");
		t.assertNextTextEquals("Relay status 4");
		t.assertNextTextEquals("Relay status 5");
		t.assertNextTextEquals("Relay status 6");
		t.assertNextTextEquals("Relay status R4");
		t.assertNextTextEquals("Relay status R5");
		t.assertNextTextEquals("Relay status R6");
		t.assertNextTextEquals("Relay status R7");
		t.assertNextTextEquals("Relay status R8");
		t.assertNextTextEquals("Relay status R9");
		t.assertNextTextEquals("Relay usage mask");
		t.assertNextTextEquals("Remaining circulation time");
		t.assertNextTextEquals("Remaining draw-off");
		t.assertNextTextEquals("Remaining status runtime");
		t.assertNextTextEquals("Remeha RemaCal");
		t.assertNextTextEquals("Remeha RemaSol A");
		t.assertNextTextEquals("Remote control");
		t.assertNextTextEquals("Remplissage");
		t.assertNextTextEquals("Resistor 1");
		t.assertNextTextEquals("Resistor 2");
		t.assertNextTextEquals("Resistor 3");
		t.assertNextTextEquals("Resistor 4");
		t.assertNextTextEquals("Resistor 5");
		t.assertNextTextEquals("Resistor 6");
		t.assertNextTextEquals("Resistor Sensor 1");
		t.assertNextTextEquals("Resistor Sensor 2");
		t.assertNextTextEquals("Resistor Sensor 3");
		t.assertNextTextEquals("Resistor sensor 1");
		t.assertNextTextEquals("Resistor sensor 2");
		t.assertNextTextEquals("Resistor sensor 3");
		t.assertNextTextEquals("Restarts");
		t.assertNextTextEquals("Retour circuit de chauffage");
		t.assertNextTextEquals("Return s defective");
		t.assertNextTextEquals("Return temperature");
		t.assertNextTextEquals("Rinçage désinfection");
		t.assertNextTextEquals("Runtime 1 R1");
		t.assertNextTextEquals("Runtime 1 R2");
		t.assertNextTextEquals("Runtime 1 R3");
		t.assertNextTextEquals("Runtime 1 R4");
		t.assertNextTextEquals("Runtime 1 R5");
		t.assertNextTextEquals("Runtime 2 R1");
		t.assertNextTextEquals("Runtime 2 R2");
		t.assertNextTextEquals("Runtime 2 R3");
		t.assertNextTextEquals("Runtime 2 R4");
		t.assertNextTextEquals("Runtime 2 R5");
		t.assertNextTextEquals("Rupture câble sonde");
		t.assertNextTextEquals("Rupture câble sonde S1");
		t.assertNextTextEquals("Rupture câble sonde S10");
		t.assertNextTextEquals("Rupture câble sonde S11");
		t.assertNextTextEquals("Rupture câble sonde S12");
		t.assertNextTextEquals("Rupture câble sonde S2");
		t.assertNextTextEquals("Rupture câble sonde S3");
		t.assertNextTextEquals("Rupture câble sonde S4");
		t.assertNextTextEquals("Rupture câble sonde S5");
		t.assertNextTextEquals("Rupture câble sonde S6");
		t.assertNextTextEquals("Rupture câble sonde S7");
		t.assertNextTextEquals("Rupture câble sonde S8");
		t.assertNextTextEquals("Rupture câble sonde S9");
		t.assertNextTextEquals("Régulateur sortie 1");
		t.assertNextTextEquals("Régulateur sortie 2");
		t.assertNextTextEquals("Rés. sous-sol rempli");
		t.assertNextTextEquals("Réservoir ECS");
		t.assertNextTextEquals("Réservoir bas");
		t.assertNextTextEquals("Réservoir puisage");
		t.assertNextTextEquals("Réservoir solaire");
		t.assertNextTextEquals("Réservoir vide");
		t.assertNextTextEquals("Résistance 1");
		t.assertNextTextEquals("Résistance 2");
		t.assertNextTextEquals("Résistance 3");
		t.assertNextTextEquals("Résistance 4");
		t.assertNextTextEquals("Résistance 5");
		t.assertNextTextEquals("Résistance 6");
		t.assertNextTextEquals("Résistance sonde 1");
		t.assertNextTextEquals("Résistance sonde 2");
		t.assertNextTextEquals("Résistance sonde 3");
		t.assertNextTextEquals("Résistance électrique 0 active");
		t.assertNextTextEquals("Röhrenkollektor");
		t.assertNextTextEquals("Rückkühlung");
		t.assertNextTextEquals("Rücklauf Heizkreis");
		t.assertNextTextEquals("Rücklaufeinschichtung");
		t.assertNextTextEquals("Rücklauftemperatur");
		t.assertNextTextEquals("S départ défectueuse");
		t.assertNextTextEquals("S retour défectueuse");
		t.assertNextTextEquals("S-Rücklauf defekt");
		t.assertNextTextEquals("S-Vorlauf defekt");
		t.assertNextTextEquals("S1");
		t.assertNextTextEquals("S1 Fehler");
		t.assertNextTextEquals("S1 defective");
		t.assertNextTextEquals("S1 defekt");
		t.assertNextTextEquals("S1 défectueuse");
		t.assertNextTextEquals("S1 erreur");
		t.assertNextTextEquals("S1 fault");
		t.assertNextTextEquals("S1-SF-K");
		t.assertNextTextEquals("S10-VL-F1");
		t.assertNextTextEquals("S11-FV-1");
		t.assertNextTextEquals("S12-VL-F2/WA-1/SF-4/F-RLU1");
		t.assertNextTextEquals("S13-FV-2/WA-2/SF-WT");
		t.assertNextTextEquals("S14-KF-1/KF-NH");
		t.assertNextTextEquals("S15-KF-2/SF-K2");
		t.assertNextTextEquals("S16-BF/BF-1/F-RLU2");
		t.assertNextTextEquals("S2");
		t.assertNextTextEquals("S2 Fehler");
		t.assertNextTextEquals("S2 defective");
		t.assertNextTextEquals("S2 defekt");
		t.assertNextTextEquals("S2 défectueuse");
		t.assertNextTextEquals("S2 erreur");
		t.assertNextTextEquals("S2 fault");
		t.assertNextTextEquals("S2-SF-1");
		t.assertNextTextEquals("S3");
		t.assertNextTextEquals("S3 defective");
		t.assertNextTextEquals("S3 defekt");
		t.assertNextTextEquals("S3 défectueuse");
		t.assertNextTextEquals("S3-SF-2");
		t.assertNextTextEquals("S4");
		t.assertNextTextEquals("S4 defective");
		t.assertNextTextEquals("S4 defekt");
		t.assertNextTextEquals("S4 défectueuse");
		t.assertNextTextEquals("S4-SF-3/WT/F-RLA1/RLU1");
		t.assertNextTextEquals("S5");
		t.assertNextTextEquals("S5-FN-HK/F-RLA2");
		t.assertNextTextEquals("S6");
		t.assertNextTextEquals("S6-FN-WW/BF/SF-WT");
		t.assertNextTextEquals("S6_1s");
		t.assertNextTextEquals("S7");
		t.assertNextTextEquals("S7-FN-K2");
		t.assertNextTextEquals("S7_1s");
		t.assertNextTextEquals("S8");
		t.assertNextTextEquals("S8-FZ");
		t.assertNextTextEquals("S9");
		t.assertNextTextEquals("S9-AF");
		t.assertNextTextEquals("SC irradiation");
		t.assertNextTextEquals("SC voltage");
		t.assertNextTextEquals("SC25");
		t.assertNextTextEquals("SD3 / GAx");
		t.assertNextTextEquals("SD3 : Quantité de chaleur");
		t.assertNextTextEquals("SD3 : température sonde 1");
		t.assertNextTextEquals("SD3 : température sonde 2");
		t.assertNextTextEquals("SD3: Heat quantity");
		t.assertNextTextEquals("SD3: Temperatur Sensor 1");
		t.assertNextTextEquals("SD3: Temperatur Sensor 2");
		t.assertNextTextEquals("SD3: Temperature sensor 1");
		t.assertNextTextEquals("SD3: Temperature sensor 2");
		t.assertNextTextEquals("SD3: Wärmemenge");
		t.assertNextTextEquals("SKSC1/2");
		t.assertNextTextEquals("SKSC2 HE [Controller]");
		t.assertNextTextEquals("SKSC2 HE [Regler]");
		t.assertNextTextEquals("SKSC3 [HC1]");
		t.assertNextTextEquals("SKSC3 [HC2]");
		t.assertNextTextEquals("SKSC3 [HC3]");
		t.assertNextTextEquals("SKSC3 [HK1]");
		t.assertNextTextEquals("SKSC3 [HK2]");
		t.assertNextTextEquals("SKSC3 [HK3]");
		t.assertNextTextEquals("SKSC3HE");
		t.assertNextTextEquals("SKSC3HE [HC1]");
		t.assertNextTextEquals("SKSC3HE [HC2]");
		t.assertNextTextEquals("SKSC3HE [HC3]");
		t.assertNextTextEquals("SKSC3HE [HK1]");
		t.assertNextTextEquals("SKSC3HE [HK2]");
		t.assertNextTextEquals("SKSC3HE [HK3]");
		t.assertNextTextEquals("SKSR 1/2/3");
		t.assertNextTextEquals("SLR");
		t.assertNextTextEquals("SLR XT");
		t.assertNextTextEquals("SLR XT-Erweiterungsmodul 1");
		t.assertNextTextEquals("SLR XT-Erweiterungsmodul 2");
		t.assertNextTextEquals("SLR XT-Erweiterungsmodul 3");
		t.assertNextTextEquals("SLR XT-Erweiterungsmodul 4");
		t.assertNextTextEquals("SLR XT-Erweiterungsmodul 5");
		t.assertNextTextEquals("SLR-Erweiterungsmodul #01");
		t.assertNextTextEquals("SLR-Erweiterungsmodul #02");
		t.assertNextTextEquals("SLR-Erweiterungsmodul #03");
		t.assertNextTextEquals("SLR-Erweiterungsmodul #04");
		t.assertNextTextEquals("SLR-Erweiterungsmodul #1");
		t.assertNextTextEquals("SLR-Erweiterungsmodul #2");
		t.assertNextTextEquals("SLR-Erweiterungsmodul #3");
		t.assertNextTextEquals("SLR-Erweiterungsmodul #4");
		t.assertNextTextEquals("SOLEX [Controller]");
		t.assertNextTextEquals("SOLEX [HQM]");
		t.assertNextTextEquals("SOLEX [Regler]");
		t.assertNextTextEquals("SOLEX [WMZ]");
		t.assertNextTextEquals("SOLTEX-Regler [Part 1]");
		t.assertNextTextEquals("SOLTEX-Regler [Part 2]");
		t.assertNextTextEquals("SOLTEX-Regler [Teil 1]");
		t.assertNextTextEquals("SOLTEX-Regler [Teil 2]");
		t.assertNextTextEquals("SOLTOP DeltaSol S2/S3");
		t.assertNextTextEquals("SPR Relais:");
		t.assertNextTextEquals("SPR Relay:");
		t.assertNextTextEquals("SR 1");
		t.assertNextTextEquals("SR 2");
		t.assertNextTextEquals("SR 3");
		t.assertNextTextEquals("SR 4");
		t.assertNextTextEquals("SW Version");
		t.assertNextTextEquals("SW-Version");
		t.assertNextTextEquals("SW_DE_nom");
		t.assertNextTextEquals("SW_FL_Set");
		t.assertNextTextEquals("SW_VL_Soll");
		t.assertNextTextEquals("SZ Einstrahlung");
		t.assertNextTextEquals("SZ Spannung");
		t.assertNextTextEquals("Sammelstörmeldung");
		t.assertNextTextEquals("Schaltspiele");
		t.assertNextTextEquals("Schema");
		t.assertNextTextEquals("Scheme");
		t.assertNextTextEquals("Schéma");
		t.assertNextTextEquals("Secondes de fonctionnement");
		t.assertNextTextEquals("Secondes de fonctionnement R1");
		t.assertNextTextEquals("Secondes de fonctionnement R2");
		t.assertNextTextEquals("Secondes de fonctionnement R3");
		t.assertNextTextEquals("Secondes de fonctionnement R4");
		t.assertNextTextEquals("Secondes de fonctionnement R5");
		t.assertNextTextEquals("Secondes de fonctionnement R6");
		t.assertNextTextEquals("Secondes de fonctionnement R7");
		t.assertNextTextEquals("Secondes de fonctionnement R8");
		t.assertNextTextEquals("Secondes de fonctionnement R9");
		t.assertNextTextEquals("Secondes de fonctionnement rel. sans pot.");
		t.assertNextTextEquals("Secondes de fonctionnement relais 1");
		t.assertNextTextEquals("Secondes de fonctionnement relais 2");
		t.assertNextTextEquals("Secondes de fonctionnement relais 3");
		t.assertNextTextEquals("Secondes de fonctionnement relais 4");
		t.assertNextTextEquals("Secondes de fonctionnement relais 5");
		t.assertNextTextEquals("Secondes de fonctionnement relais FastOff");
		t.assertNextTextEquals("Secondes de fonctionnement relais pompe");
		t.assertNextTextEquals("Secondes de fonctionnement sortie PWM1");
		t.assertNextTextEquals("Secondes de fonctionnement sortie PWM2");
		t.assertNextTextEquals("Secondes de fonctionnement station");
		t.assertNextTextEquals("Seconds");
		t.assertNextTextEquals("Seconds no.");
		t.assertNextTextEquals("SekNr");
		t.assertNextTextEquals("Sekundärkreis Rücklauftemperatur");
		t.assertNextTextEquals("Sekundärkreis Vorlaufsolltemperatur");
		t.assertNextTextEquals("Sekundärkreis Vorlauftemperatur");
		t.assertNextTextEquals("Sensor 1");
		t.assertNextTextEquals("Sensor 1 benutzt");
		t.assertNextTextEquals("Sensor 1 defective");
		t.assertNextTextEquals("Sensor 1 defekt");
		t.assertNextTextEquals("Sensor 1 used");
		t.assertNextTextEquals("Sensor 10");
		t.assertNextTextEquals("Sensor 10 benutzt");
		t.assertNextTextEquals("Sensor 10 used");
		t.assertNextTextEquals("Sensor 11");
		t.assertNextTextEquals("Sensor 11 benutzt");
		t.assertNextTextEquals("Sensor 11 used");
		t.assertNextTextEquals("Sensor 12");
		t.assertNextTextEquals("Sensor 12 benutzt");
		t.assertNextTextEquals("Sensor 12 used");
		t.assertNextTextEquals("Sensor 13");
		t.assertNextTextEquals("Sensor 2");
		t.assertNextTextEquals("Sensor 2 benutzt");
		t.assertNextTextEquals("Sensor 2 defective");
		t.assertNextTextEquals("Sensor 2 defekt");
		t.assertNextTextEquals("Sensor 2 used");
		t.assertNextTextEquals("Sensor 3");
		t.assertNextTextEquals("Sensor 3 Zustand (FS)");
		t.assertNextTextEquals("Sensor 3 benutzt");
		t.assertNextTextEquals("Sensor 3 defective");
		t.assertNextTextEquals("Sensor 3 defekt");
		t.assertNextTextEquals("Sensor 3 used");
		t.assertNextTextEquals("Sensor 4");
		t.assertNextTextEquals("Sensor 4 Zustand (TA)");
		t.assertNextTextEquals("Sensor 4 benutzt");
		t.assertNextTextEquals("Sensor 4 defective");
		t.assertNextTextEquals("Sensor 4 defekt");
		t.assertNextTextEquals("Sensor 4 used");
		t.assertNextTextEquals("Sensor 5");
		t.assertNextTextEquals("Sensor 5 benutzt");
		t.assertNextTextEquals("Sensor 5 used");
		t.assertNextTextEquals("Sensor 6");
		t.assertNextTextEquals("Sensor 6 benutzt");
		t.assertNextTextEquals("Sensor 6 used");
		t.assertNextTextEquals("Sensor 7 benutzt");
		t.assertNextTextEquals("Sensor 7 used");
		t.assertNextTextEquals("Sensor 8 benutzt");
		t.assertNextTextEquals("Sensor 8 used");
		t.assertNextTextEquals("Sensor 9");
		t.assertNextTextEquals("Sensor 9 benutzt");
		t.assertNextTextEquals("Sensor 9 used");
		t.assertNextTextEquals("Sensor Kurzschluss");
		t.assertNextTextEquals("Sensor Kurzschluss S1");
		t.assertNextTextEquals("Sensor Kurzschluss S10");
		t.assertNextTextEquals("Sensor Kurzschluss S11");
		t.assertNextTextEquals("Sensor Kurzschluss S12");
		t.assertNextTextEquals("Sensor Kurzschluss S2");
		t.assertNextTextEquals("Sensor Kurzschluss S3");
		t.assertNextTextEquals("Sensor Kurzschluss S4");
		t.assertNextTextEquals("Sensor Kurzschluss S5");
		t.assertNextTextEquals("Sensor Kurzschluss S6");
		t.assertNextTextEquals("Sensor Kurzschluss S7");
		t.assertNextTextEquals("Sensor Kurzschluss S8");
		t.assertNextTextEquals("Sensor Kurzschluss S9");
		t.assertNextTextEquals("Sensor S1");
		t.assertNextTextEquals("Sensor S2");
		t.assertNextTextEquals("Sensor S3");
		t.assertNextTextEquals("Sensor S4 / dV");
		t.assertNextTextEquals("Sensor S4 T");
		t.assertNextTextEquals("Sensor S5");
		t.assertNextTextEquals("Sensor Unterbrechung");
		t.assertNextTextEquals("Sensor Unterbrechung S1");
		t.assertNextTextEquals("Sensor Unterbrechung S10");
		t.assertNextTextEquals("Sensor Unterbrechung S11");
		t.assertNextTextEquals("Sensor Unterbrechung S12");
		t.assertNextTextEquals("Sensor Unterbrechung S2");
		t.assertNextTextEquals("Sensor Unterbrechung S3");
		t.assertNextTextEquals("Sensor Unterbrechung S4");
		t.assertNextTextEquals("Sensor Unterbrechung S5");
		t.assertNextTextEquals("Sensor Unterbrechung S6");
		t.assertNextTextEquals("Sensor Unterbrechung S7");
		t.assertNextTextEquals("Sensor Unterbrechung S8");
		t.assertNextTextEquals("Sensor Unterbrechung S9");
		t.assertNextTextEquals("Sensor benutzt");
		t.assertNextTextEquals("Sensor cable broken");
		t.assertNextTextEquals("Sensor cable broken S1");
		t.assertNextTextEquals("Sensor cable broken S10");
		t.assertNextTextEquals("Sensor cable broken S11");
		t.assertNextTextEquals("Sensor cable broken S12");
		t.assertNextTextEquals("Sensor cable broken S2");
		t.assertNextTextEquals("Sensor cable broken S3");
		t.assertNextTextEquals("Sensor cable broken S4");
		t.assertNextTextEquals("Sensor cable broken S5");
		t.assertNextTextEquals("Sensor cable broken S6");
		t.assertNextTextEquals("Sensor cable broken S7");
		t.assertNextTextEquals("Sensor cable broken S8");
		t.assertNextTextEquals("Sensor cable broken S9");
		t.assertNextTextEquals("Sensor defect mask");
		t.assertNextTextEquals("Sensor defective");
		t.assertNextTextEquals("Sensor fault S1");
		t.assertNextTextEquals("Sensor fault S12 VFD");
		t.assertNextTextEquals("Sensor fault S2");
		t.assertNextTextEquals("Sensor fault S3");
		t.assertNextTextEquals("Sensor fault S4");
		t.assertNextTextEquals("Sensor fault S5");
		t.assertNextTextEquals("Sensor fault S6");
		t.assertNextTextEquals("Sensor fault S7");
		t.assertNextTextEquals("Sensor fault S8");
		t.assertNextTextEquals("Sensor line break mask");
		t.assertNextTextEquals("Sensor line break number");
		t.assertNextTextEquals("Sensor mask");
		t.assertNextTextEquals("Sensor module in use");
		t.assertNextTextEquals("Sensor short-circuit");
		t.assertNextTextEquals("Sensor short-circuit S1");
		t.assertNextTextEquals("Sensor short-circuit S10");
		t.assertNextTextEquals("Sensor short-circuit S11");
		t.assertNextTextEquals("Sensor short-circuit S12");
		t.assertNextTextEquals("Sensor short-circuit S2");
		t.assertNextTextEquals("Sensor short-circuit S3");
		t.assertNextTextEquals("Sensor short-circuit S4");
		t.assertNextTextEquals("Sensor short-circuit S5");
		t.assertNextTextEquals("Sensor short-circuit S6");
		t.assertNextTextEquals("Sensor short-circuit S7");
		t.assertNextTextEquals("Sensor short-circuit S8");
		t.assertNextTextEquals("Sensor short-circuit S9");
		t.assertNextTextEquals("Sensor short-circuit mask");
		t.assertNextTextEquals("Sensor short-circuit number");
		t.assertNextTextEquals("Sensor temperature (TM)");
		t.assertNextTextEquals("Sensor usage mask");
		t.assertNextTextEquals("Sensor usage mask #1");
		t.assertNextTextEquals("Sensor usage mask #2");
		t.assertNextTextEquals("Sensor used");
		t.assertNextTextEquals("SensorBenutzt bit 0..31");
		t.assertNextTextEquals("SensorBenutzt bit 31..63");
		t.assertNextTextEquals("SensorDefekt");
		t.assertNextTextEquals("SensorOutputType1");
		t.assertNextTextEquals("SensorOutputType2");
		t.assertNextTextEquals("SensorOutputType3");
		t.assertNextTextEquals("SensorOutputType4");
		t.assertNextTextEquals("SensorOutputType5");
		t.assertNextTextEquals("SensorOutputType6");
		t.assertNextTextEquals("SensorVolume flow_Regler_GAS1_TotalWert_L");
		t.assertNextTextEquals("SensorVolume flow_Regler_GAS2_TotalWert_L");
		t.assertNextTextEquals("SensorVolume flow_Regler_GDS1_TotalWert_L");
		t.assertNextTextEquals("SensorVolume flow_Regler_GDS2_TotalWert_L");
		t.assertNextTextEquals("SensorVolumenstrom_Regler_GAS1_TotalWert_L");
		t.assertNextTextEquals("SensorVolumenstrom_Regler_GAS2_TotalWert_L");
		t.assertNextTextEquals("SensorVolumenstrom_Regler_GDS1_TotalWert_L");
		t.assertNextTextEquals("SensorVolumenstrom_Regler_GDS2_TotalWert_L");
		t.assertNextTextEquals("Sensor_Regler_Druck_GAS1_Wert_Bar");
		t.assertNextTextEquals("Sensor_Regler_Druck_GAS2_Wert_Bar");
		t.assertNextTextEquals("Sensor_Regler_Druck_GDS1_Wert_Bar");
		t.assertNextTextEquals("Sensor_Regler_Druck_GDS2_Wert_Bar");
		t.assertNextTextEquals("Sensorbenutzungs-Maske");
		t.assertNextTextEquals("Sensorbenutzungs-Maske #1");
		t.assertNextTextEquals("Sensorbenutzungs-Maske #2");
		t.assertNextTextEquals("Sensorbruch-Maske");
		t.assertNextTextEquals("Sensorbruch-Nummer");
		t.assertNextTextEquals("Sensordefekt-Maske");
		t.assertNextTextEquals("Sensorfehler S1");
		t.assertNextTextEquals("Sensorfehler S12 VFD");
		t.assertNextTextEquals("Sensorfehler S2");
		t.assertNextTextEquals("Sensorfehler S3");
		t.assertNextTextEquals("Sensorfehler S4");
		t.assertNextTextEquals("Sensorfehler S5");
		t.assertNextTextEquals("Sensorfehler S6");
		t.assertNextTextEquals("Sensorfehler S7");
		t.assertNextTextEquals("Sensorfehler S8");
		t.assertNextTextEquals("Sensorkurzschluss-Maske");
		t.assertNextTextEquals("Sensorkurzschluss-Nummer");
		t.assertNextTextEquals("Sensormaske");
		t.assertNextTextEquals("Sensormodul wird verwendet");
		t.assertNextTextEquals("Set value");
		t.assertNextTextEquals("Set value adaptation");
		t.assertNextTextEquals("Seuil d'activation");
		t.assertNextTextEquals("Seuil de désactivation");
		t.assertNextTextEquals("Sim 5");
		t.assertNextTextEquals("Sim5");
		t.assertNextTextEquals("Slave 1: Fehlermaske");
		t.assertNextTextEquals("Slave 1: Primärpumpe Betriebssekunden");
		t.assertNextTextEquals("Slave 1: Primärpumpe Drehzahl");
		t.assertNextTextEquals("Slave 1: Reglervariante");
		t.assertNextTextEquals("Slave 1: Stationsbetriebssekunden");
		t.assertNextTextEquals("Slave 1: Status");
		t.assertNextTextEquals("Slave 1: Strangventil Zustand");
		t.assertNextTextEquals("Slave 1: T-KW");
		t.assertNextTextEquals("Slave 1: T-SpVL");
		t.assertNextTextEquals("Slave 1: T-WW");
		t.assertNextTextEquals("Slave 1: Version");
		t.assertNextTextEquals("Slave 1: Volumenstrom");
		t.assertNextTextEquals("Slave 2: Fehlermaske");
		t.assertNextTextEquals("Slave 2: Primärpumpe Betriebssekunden");
		t.assertNextTextEquals("Slave 2: Primärpumpe Drehzahl");
		t.assertNextTextEquals("Slave 2: Reglervariante");
		t.assertNextTextEquals("Slave 2: Stationsbetriebssekunden");
		t.assertNextTextEquals("Slave 2: Status");
		t.assertNextTextEquals("Slave 2: Strangventil Zustand");
		t.assertNextTextEquals("Slave 2: T-KW");
		t.assertNextTextEquals("Slave 2: T-SpVL");
		t.assertNextTextEquals("Slave 2: T-WW");
		t.assertNextTextEquals("Slave 2: Version");
		t.assertNextTextEquals("Slave 2: Volumenstrom");
		t.assertNextTextEquals("Slave 3: Fehlermaske");
		t.assertNextTextEquals("Slave 3: Primärpumpe Betriebssekunden");
		t.assertNextTextEquals("Slave 3: Primärpumpe Drehzahl");
		t.assertNextTextEquals("Slave 3: Reglervariante");
		t.assertNextTextEquals("Slave 3: Stationsbetriebssekunden");
		t.assertNextTextEquals("Slave 3: Status");
		t.assertNextTextEquals("Slave 3: Strangventil Zustand");
		t.assertNextTextEquals("Slave 3: T-KW");
		t.assertNextTextEquals("Slave 3: T-SpVL");
		t.assertNextTextEquals("Slave 3: T-WW");
		t.assertNextTextEquals("Slave 3: Version");
		t.assertNextTextEquals("Slave 3: Volumenstrom");
		t.assertNextTextEquals("Software");
		t.assertNextTextEquals("Software version");
		t.assertNextTextEquals("Software version majeure");
		t.assertNextTextEquals("Software version major");
		t.assertNextTextEquals("Software version mineure");
		t.assertNextTextEquals("Software version minor");
		t.assertNextTextEquals("Softwareversion");
		t.assertNextTextEquals("Softwareversion major");
		t.assertNextTextEquals("Softwareversion minor");
		t.assertNextTextEquals("Soil temperature");
		t.assertNextTextEquals("Sol Plus SL");
		t.assertNextTextEquals("Solaire chauffage d'appoint");
		t.assertNextTextEquals("Solaire dToff");
		t.assertNextTextEquals("Solaire dTon");
		t.assertNextTextEquals("Solaire min on");
		t.assertNextTextEquals("Solaire min. off");
		t.assertNextTextEquals("Solaire min. on/off");
		t.assertNextTextEquals("Solar Min. Ein/Aus");
		t.assertNextTextEquals("Solar Mindestaus");
		t.assertNextTextEquals("Solar Mindestein");
		t.assertNextTextEquals("Solar Nachheizung");
		t.assertNextTextEquals("Solar afterheating");
		t.assertNextTextEquals("Solar circuit active");
		t.assertNextTextEquals("Solar circuit on");
		t.assertNextTextEquals("Solar dTaus");
		t.assertNextTextEquals("Solar dTein");
		t.assertNextTextEquals("Solar dToff");
		t.assertNextTextEquals("Solar dTon");
		t.assertNextTextEquals("Solar heat");
		t.assertNextTextEquals("Solar heat_1s");
		t.assertNextTextEquals("Solar min on");
		t.assertNextTextEquals("Solar min. off");
		t.assertNextTextEquals("Solar min. on/off");
		t.assertNextTextEquals("Solar phase");
		t.assertNextTextEquals("SolarNor Drainback");
		t.assertNextTextEquals("Solarkreis aktiv");
		t.assertNextTextEquals("Solarkreis ein");
		t.assertNextTextEquals("Solarphase");
		t.assertNextTextEquals("Solarwärme");
		t.assertNextTextEquals("Solarwärme_1s");
		t.assertNextTextEquals("Sollwert");
		t.assertNextTextEquals("Sollwertanpassung");
		t.assertNextTextEquals("Sommerbetrieb");
		t.assertNextTextEquals("Sonde 1");
		t.assertNextTextEquals("Sonde 1 défectueuse");
		t.assertNextTextEquals("Sonde 1 utilisée");
		t.assertNextTextEquals("Sonde 10");
		t.assertNextTextEquals("Sonde 10 utilisée");
		t.assertNextTextEquals("Sonde 11");
		t.assertNextTextEquals("Sonde 11 utilisée");
		t.assertNextTextEquals("Sonde 12");
		t.assertNextTextEquals("Sonde 12 utilisée");
		t.assertNextTextEquals("Sonde 13");
		t.assertNextTextEquals("Sonde 2");
		t.assertNextTextEquals("Sonde 2 défectueuse");
		t.assertNextTextEquals("Sonde 2 utilisée");
		t.assertNextTextEquals("Sonde 3");
		t.assertNextTextEquals("Sonde 3 défectueuse");
		t.assertNextTextEquals("Sonde 3 utilisée");
		t.assertNextTextEquals("Sonde 4");
		t.assertNextTextEquals("Sonde 4 défectueuse");
		t.assertNextTextEquals("Sonde 4 utilisée");
		t.assertNextTextEquals("Sonde 5");
		t.assertNextTextEquals("Sonde 5 utilisée");
		t.assertNextTextEquals("Sonde 6");
		t.assertNextTextEquals("Sonde 6 utilisée");
		t.assertNextTextEquals("Sonde 7 utilisée");
		t.assertNextTextEquals("Sonde 8 utilisée");
		t.assertNextTextEquals("Sonde 9");
		t.assertNextTextEquals("Sonde 9 utilisée");
		t.assertNextTextEquals("Sonde D erreur");
		t.assertNextTextEquals("Sonde S1");
		t.assertNextTextEquals("Sonde S2");
		t.assertNextTextEquals("Sonde S3");
		t.assertNextTextEquals("Sonde S4 / dV");
		t.assertNextTextEquals("Sonde S4 T");
		t.assertNextTextEquals("Sonde S5");
		t.assertNextTextEquals("Sonde circulation");
		t.assertNextTextEquals("Sonde d'irradiation 5");
		t.assertNextTextEquals("Sonde d'irradiation 9");
		t.assertNextTextEquals("Sonde de courant 4");
		t.assertNextTextEquals("Sonde de débit 8");
		t.assertNextTextEquals("Sonde débit (S7) défectueuse");
		t.assertNextTextEquals("Sonde débit 13");
		t.assertNextTextEquals("Sonde débit 14");
		t.assertNextTextEquals("Sonde débit 15");
		t.assertNextTextEquals("Sonde débit 17");
		t.assertNextTextEquals("Sonde débit 18");
		t.assertNextTextEquals("Sonde débit 19");
		t.assertNextTextEquals("Sonde débit 20");
		t.assertNextTextEquals("Sonde débit 21");
		t.assertNextTextEquals("Sonde débit 8");
		t.assertNextTextEquals("Sonde défectueuse");
		t.assertNextTextEquals("Sonde utilisée");
		t.assertNextTextEquals("Sortie A");
		t.assertNextTextEquals("Sortie B");
		t.assertNextTextEquals("Sortie C");
		t.assertNextTextEquals("Sortie D");
		t.assertNextTextEquals("Source temperature");
		t.assertNextTextEquals("Source temperature (Control)");
		t.assertNextTextEquals("Spannung 10V");
		t.assertNextTextEquals("Speed");
		t.assertNextTextEquals("Speed 1");
		t.assertNextTextEquals("Speed 2");
		t.assertNextTextEquals("Speed Loading pump");
		t.assertNextTextEquals("Speicher Entnahme");
		t.assertNextTextEquals("Speicher Solar");
		t.assertNextTextEquals("Speicher leer");
		t.assertNextTextEquals("Speicher unten");
		t.assertNextTextEquals("Speicher-Temperatur (TS)");
		t.assertNextTextEquals("Speicheranforderungstemperatur (aus)");
		t.assertNextTextEquals("Speicheranforderungstemperatur (ein)");
		t.assertNextTextEquals("Speicherkühltemperatur");
		t.assertNextTextEquals("Speicherkühlung");
		t.assertNextTextEquals("Speichermaximaltemperatur");
		t.assertNextTextEquals("Speicherminimaltemperatur");
		t.assertNextTextEquals("Speichernottemperatur");
		t.assertNextTextEquals("Speicherofenregler");
		t.assertNextTextEquals("Speichertemperatur");
		t.assertNextTextEquals("Speichertemperatur 1");
		t.assertNextTextEquals("Speichertemperatur 1 (Bus)");
		t.assertNextTextEquals("Speichertemperatur 2");
		t.assertNextTextEquals("Speichertemperatur 2 (Bus)");
		t.assertNextTextEquals("Speichervorlauf");
		t.assertNextTextEquals("Spreading");
		t.assertNextTextEquals("Spreizung");
		t.assertNextTextEquals("SquareMeters");
		t.assertNextTextEquals("Stabilisation");
		t.assertNextTextEquals("Stabilise");
		t.assertNextTextEquals("Stabiliser");
		t.assertNextTextEquals("Stabilisieren");
		t.assertNextTextEquals("Stabilisierung");
		t.assertNextTextEquals("Standard-Infos");
		t.assertNextTextEquals("State sensor 5");
		t.assertNextTextEquals("State sensor 8");
		t.assertNextTextEquals("Station 2 vorhanden");
		t.assertNextTextEquals("Station 3 vorhanden");
		t.assertNextTextEquals("Station 4 vorhanden");
		t.assertNextTextEquals("Stationsbetriebssekunden");
		t.assertNextTextEquals("Status");
		t.assertNextTextEquals("Status HC1 module");
		t.assertNextTextEquals("Status HC2 module");
		t.assertNextTextEquals("Status HC3 module ");
		t.assertNextTextEquals("Status HK1 Modul");
		t.assertNextTextEquals("Status HK2 Modul");
		t.assertNextTextEquals("Status HK3 Modul");
		t.assertNextTextEquals("Status Heizkreis");
		t.assertNextTextEquals("Status Relais 1");
		t.assertNextTextEquals("Status Relais 2");
		t.assertNextTextEquals("Status Relais 3");
		t.assertNextTextEquals("Status Relais 4");
		t.assertNextTextEquals("Status Relais 5");
		t.assertNextTextEquals("Status display");
		t.assertNextTextEquals("Status flag_1s");
		t.assertNextTextEquals("Status info 1");
		t.assertNextTextEquals("Status info 2");
		t.assertNextTextEquals("Status mask");
		t.assertNextTextEquals("Status relay 1");
		t.assertNextTextEquals("Status relay 5");
		t.assertNextTextEquals("Status relay2");
		t.assertNextTextEquals("Status-Info 1");
		t.assertNextTextEquals("Status-Info 2");
		t.assertNextTextEquals("Status-Restlaufzeit");
		t.assertNextTextEquals("Statusflag_1s");
		t.assertNextTextEquals("Statusmask");
		t.assertNextTextEquals("Statusmaske");
		t.assertNextTextEquals("Steuerregister");
		t.assertNextTextEquals("Steuerungszeit (tc)");
		t.assertNextTextEquals("Store base");
		t.assertNextTextEquals("Store cooling");
		t.assertNextTextEquals("Store cooling temperature");
		t.assertNextTextEquals("Store demand temperature (off)");
		t.assertNextTextEquals("Store demand temperature (on)");
		t.assertNextTextEquals("Store draw-off");
		t.assertNextTextEquals("Store empty");
		t.assertNextTextEquals("Store flow");
		t.assertNextTextEquals("Store solar");
		t.assertNextTextEquals("Store temperature");
		t.assertNextTextEquals("Store temperature 1");
		t.assertNextTextEquals("Store temperature 1 (Bus)");
		t.assertNextTextEquals("Store temperature 2");
		t.assertNextTextEquals("Store temperature 2 (Bus)");
		t.assertNextTextEquals("Stratification du retour");
		t.assertNextTextEquals("Stratified return");
		t.assertNextTextEquals("Strom1");
		t.assertNextTextEquals("Strom2");
		t.assertNextTextEquals("Stromstärke 1");
		t.assertNextTextEquals("Stromstärke 2");
		t.assertNextTextEquals("Stromstärke1_1s");
		t.assertNextTextEquals("Stromstärke2_1s");
		t.assertNextTextEquals("Strömungsgeschwindigkeit");
		t.assertNextTextEquals("Strömungswächter LT-Kreis:");
		t.assertNextTextEquals("Summed-up spraying time");
		t.assertNextTextEquals("Summer operation");
		t.assertNextTextEquals("SunGo XL");
		t.assertNextTextEquals("Surchauffe active");
		t.assertNextTextEquals("Surpression");
		t.assertNextTextEquals("Switch-off temperature difference");
		t.assertNextTextEquals("Switch-off threshold");
		t.assertNextTextEquals("Switch-on temperature difference");
		t.assertNextTextEquals("Switch-on threshold");
		t.assertNextTextEquals("System");
		t.assertNextTextEquals("System code:");
		t.assertNextTextEquals("System cooling");
		t.assertNextTextEquals("System date");
		t.assertNextTextEquals("System message");
		t.assertNextTextEquals("System pressure");
		t.assertNextTextEquals("System time");
		t.assertNextTextEquals("System time2");
		t.assertNextTextEquals("System time:");
		t.assertNextTextEquals("Systemcode:");
		t.assertNextTextEquals("Systemdatum");
		t.assertNextTextEquals("Systemdruck");
		t.assertNextTextEquals("Systemflow.Parameteraenderungen");
		t.assertNextTextEquals("Systemkühlung");
		t.assertNextTextEquals("Systemmeldung");
		t.assertNextTextEquals("Systemzeit");
		t.assertNextTextEquals("Systemzeit2");
		t.assertNextTextEquals("Systemzeit:");
		t.assertNextTextEquals("Système");
		t.assertNextTextEquals("T A1 OUT:");
		t.assertNextTextEquals("T A2 OUT:");
		t.assertNextTextEquals("T AMB:");
		t.assertNextTextEquals("T Beckenkühlfkt");
		t.assertNextTextEquals("T E1 OUT:");
		t.assertNextTextEquals("T E2 OUT:");
		t.assertNextTextEquals("T Fonction refroidissement Piscine");
		t.assertNextTextEquals("T HT Ext:");
		t.assertNextTextEquals("T HT OUT:");
		t.assertNextTextEquals("T LT Ext:");
		t.assertNextTextEquals("T LT IN AVG");
		t.assertNextTextEquals("T LT IN Cycle");
		t.assertNextTextEquals("T LT IN:");
		t.assertNextTextEquals("T LT OUT Cycle");
		t.assertNextTextEquals("T LT OUT:");
		t.assertNextTextEquals("T LTS OUT AVG");
		t.assertNextTextEquals("T MT IN:");
		t.assertNextTextEquals("T MT OUT AVG");
		t.assertNextTextEquals("T MT OUT Cycle");
		t.assertNextTextEquals("T MT OUT:");
		t.assertNextTextEquals("T nominale jour");
		t.assertNextTextEquals("T pool cooling function");
		t.assertNextTextEquals("T- Départ / S1");
		t.assertNextTextEquals("T- Départ / S1_1s");
		t.assertNextTextEquals("T-Ambiance");
		t.assertNextTextEquals("T-KW");
		t.assertNextTextEquals("T-Retour /S2");
		t.assertNextTextEquals("T-Retour /S2_1s");
		t.assertNextTextEquals("T-Rücklauf/S2");
		t.assertNextTextEquals("T-Rücklauf/S2_1s");
		t.assertNextTextEquals("T-Sensor Fehler");
		t.assertNextTextEquals("T-Sonde erreur");
		t.assertNextTextEquals("T-Umgebung");
		t.assertNextTextEquals("T-Umgebung_1s");
		t.assertNextTextEquals("T-VL");
		t.assertNextTextEquals("T-Vorlauf/S1");
		t.assertNextTextEquals("T-Vorlauf/S1_1s");
		t.assertNextTextEquals("T-WW");
		t.assertNextTextEquals("T-ambiant_1s");
		t.assertNextTextEquals("T-ambient");
		t.assertNextTextEquals("T-ambient_1s");
		t.assertNextTextEquals("T-flow / S1");
		t.assertNextTextEquals("T-flow / S1_1s");
		t.assertNextTextEquals("T-return / S2");
		t.assertNextTextEquals("T-return / S2_1s");
		t.assertNextTextEquals("T-sensor fault");
		t.assertNextTextEquals("TAC");
		t.assertNextTextEquals("TAF");
		t.assertNextTextEquals("TAGE");
		t.assertNextTextEquals("TAus");
		t.assertNextTextEquals("TBC");
		t.assertNextTextEquals("TBF");
		t.assertNextTextEquals("TC");
		t.assertNextTextEquals("TCAP");
		t.assertNextTextEquals("TE : Température sonde 1");
		t.assertNextTextEquals("TE : Température sonde 2");
		t.assertNextTextEquals("TE : Température sonde 3");
		t.assertNextTextEquals("TE : Température sonde 4");
		t.assertNextTextEquals("TEC");
		t.assertNextTextEquals("TEF");
		t.assertNextTextEquals("TEin");
		t.assertNextTextEquals("THW");
		t.assertNextTextEquals("TKW");
		t.assertNextTextEquals("TKW (S4)");
		t.assertNextTextEquals("TLR2");
		t.assertNextTextEquals("TMALA");
		t.assertNextTextEquals("TPlan Timer");
		t.assertNextTextEquals("TRB");
		t.assertNextTextEquals("TRH");
		t.assertNextTextEquals("TSA");
		t.assertNextTextEquals("TSC");
		t.assertNextTextEquals("TSF");
		t.assertNextTextEquals("TSL");
		t.assertNextTextEquals("TSL_1s");
		t.assertNextTextEquals("TSS");
		t.assertNextTextEquals("TSpVL");
		t.assertNextTextEquals("TSpVL (S1)");
		t.assertNextTextEquals("TVorlaufSoll");
		t.assertNextTextEquals("TW: Temperatur Sensor 1");
		t.assertNextTextEquals("TW: Temperatur Sensor 2");
		t.assertNextTextEquals("TW: Temperatur Sensor 3");
		t.assertNextTextEquals("TW: Temperatur Sensor 4");
		t.assertNextTextEquals("TW: Temperature sensor 1");
		t.assertNextTextEquals("TW: Temperature sensor 2");
		t.assertNextTextEquals("TW: Temperature sensor 3");
		t.assertNextTextEquals("TW: Temperature sensor 4");
		t.assertNextTextEquals("TWAMA");
		t.assertNextTextEquals("TWW");
		t.assertNextTextEquals("T_Wabs");
		t.assertNextTextEquals("Tag");
		t.assertNextTextEquals("Tag:");
		t.assertNextTextEquals("Tagesfehlercode");
		t.assertNextTextEquals("Tageskorrektur");
		t.assertNextTextEquals("Tarif1");
		t.assertNextTextEquals("Tarif2");
		t.assertNextTextEquals("Tcap-est.");
		t.assertNextTextEquals("Tcol-est.");
		t.assertNextTextEquals("TdépartNom");
		t.assertNextTextEquals("Temp de circulation restant");
		t.assertNextTextEquals("Temparature max. départ");
		t.assertNextTextEquals("Temperatur Erde");
		t.assertNextTextEquals("Temperatur GFD");
		t.assertNextTextEquals("Temperatur GFD1");
		t.assertNextTextEquals("Temperatur GFD2");
		t.assertNextTextEquals("Temperatur Kaltwasser");
		t.assertNextTextEquals("Temperatur Kollektoren");
		t.assertNextTextEquals("Temperatur Mischer");
		t.assertNextTextEquals("Temperatur Modul 1 Sensor 1");
		t.assertNextTextEquals("Temperatur Modul 1 Sensor 2");
		t.assertNextTextEquals("Temperatur Modul 1 Sensor 3");
		t.assertNextTextEquals("Temperatur Modul 1 Sensor 4");
		t.assertNextTextEquals("Temperatur Modul 1 Sensor 5");
		t.assertNextTextEquals("Temperatur Modul 1 Sensor 6");
		t.assertNextTextEquals("Temperatur Modul 2 Sensor 1");
		t.assertNextTextEquals("Temperatur Modul 2 Sensor 2");
		t.assertNextTextEquals("Temperatur Modul 2 Sensor 3");
		t.assertNextTextEquals("Temperatur Modul 2 Sensor 4");
		t.assertNextTextEquals("Temperatur Modul 2 Sensor 5");
		t.assertNextTextEquals("Temperatur Modul 2 Sensor 6");
		t.assertNextTextEquals("Temperatur Modul 3 Sensor 1");
		t.assertNextTextEquals("Temperatur Modul 3 Sensor 2");
		t.assertNextTextEquals("Temperatur Modul 3 Sensor 3");
		t.assertNextTextEquals("Temperatur Modul 3 Sensor 4");
		t.assertNextTextEquals("Temperatur Modul 3 Sensor 5");
		t.assertNextTextEquals("Temperatur Modul 3 Sensor 6");
		t.assertNextTextEquals("Temperatur Modul 4 Sensor 1");
		t.assertNextTextEquals("Temperatur Modul 4 Sensor 2");
		t.assertNextTextEquals("Temperatur Modul 4 Sensor 3");
		t.assertNextTextEquals("Temperatur Modul 4 Sensor 4");
		t.assertNextTextEquals("Temperatur Modul 4 Sensor 5");
		t.assertNextTextEquals("Temperatur Modul 4 Sensor 6");
		t.assertNextTextEquals("Temperatur Modul 5 Sensor 1");
		t.assertNextTextEquals("Temperatur Modul 5 Sensor 2");
		t.assertNextTextEquals("Temperatur Modul 5 Sensor 3");
		t.assertNextTextEquals("Temperatur Modul 5 Sensor 4");
		t.assertNextTextEquals("Temperatur Modul 5 Sensor 5");
		t.assertNextTextEquals("Temperatur Modul 5 Sensor 6");
		t.assertNextTextEquals("Temperatur Puffer");
		t.assertNextTextEquals("Temperatur Quelle");
		t.assertNextTextEquals("Temperatur Quelle (Regel)");
		t.assertNextTextEquals("Temperatur RPS");
		t.assertNextTextEquals("Temperatur Rücklauf");
		t.assertNextTextEquals("Temperatur Rücklauf (Sensor 2)");
		t.assertNextTextEquals("Temperatur S,p");
		t.assertNextTextEquals("Temperatur S,s");
		t.assertNextTextEquals("Temperatur S1");
		t.assertNextTextEquals("Temperatur S2");
		t.assertNextTextEquals("Temperatur S3");
		t.assertNextTextEquals("Temperatur S4");
		t.assertNextTextEquals("Temperatur Sensor 1");
		t.assertNextTextEquals("Temperatur Sensor 10");
		t.assertNextTextEquals("Temperatur Sensor 11");
		t.assertNextTextEquals("Temperatur Sensor 12");
		t.assertNextTextEquals("Temperatur Sensor 13");
		t.assertNextTextEquals("Temperatur Sensor 14");
		t.assertNextTextEquals("Temperatur Sensor 15");
		t.assertNextTextEquals("Temperatur Sensor 16");
		t.assertNextTextEquals("Temperatur Sensor 17");
		t.assertNextTextEquals("Temperatur Sensor 18");
		t.assertNextTextEquals("Temperatur Sensor 19");
		t.assertNextTextEquals("Temperatur Sensor 2");
		t.assertNextTextEquals("Temperatur Sensor 20");
		t.assertNextTextEquals("Temperatur Sensor 21");
		t.assertNextTextEquals("Temperatur Sensor 22");
		t.assertNextTextEquals("Temperatur Sensor 23");
		t.assertNextTextEquals("Temperatur Sensor 24");
		t.assertNextTextEquals("Temperatur Sensor 25");
		t.assertNextTextEquals("Temperatur Sensor 26");
		t.assertNextTextEquals("Temperatur Sensor 27");
		t.assertNextTextEquals("Temperatur Sensor 28");
		t.assertNextTextEquals("Temperatur Sensor 29");
		t.assertNextTextEquals("Temperatur Sensor 3");
		t.assertNextTextEquals("Temperatur Sensor 30");
		t.assertNextTextEquals("Temperatur Sensor 31");
		t.assertNextTextEquals("Temperatur Sensor 32");
		t.assertNextTextEquals("Temperatur Sensor 33");
		t.assertNextTextEquals("Temperatur Sensor 34");
		t.assertNextTextEquals("Temperatur Sensor 35");
		t.assertNextTextEquals("Temperatur Sensor 36");
		t.assertNextTextEquals("Temperatur Sensor 37");
		t.assertNextTextEquals("Temperatur Sensor 38");
		t.assertNextTextEquals("Temperatur Sensor 39");
		t.assertNextTextEquals("Temperatur Sensor 4");
		t.assertNextTextEquals("Temperatur Sensor 4 (>= v1.02)");
		t.assertNextTextEquals("Temperatur Sensor 40");
		t.assertNextTextEquals("Temperatur Sensor 5");
		t.assertNextTextEquals("Temperatur Sensor 6");
		t.assertNextTextEquals("Temperatur Sensor 7");
		t.assertNextTextEquals("Temperatur Sensor 8");
		t.assertNextTextEquals("Temperatur Sensor 9");
		t.assertNextTextEquals("Temperatur Sensor DDS");
		t.assertNextTextEquals("Temperatur Sensor Ga1");
		t.assertNextTextEquals("Temperatur Sensor Ga2");
		t.assertNextTextEquals("Temperatur Sensor Gds1");
		t.assertNextTextEquals("Temperatur Sensor Gds2");
		t.assertNextTextEquals("Temperatur Sensor VFS");
		t.assertNextTextEquals("Temperatur Sensor VFS/US");
		t.assertNextTextEquals("Temperatur Speicher (Sensor 1)");
		t.assertNextTextEquals("Temperatur Speicher Oben");
		t.assertNextTextEquals("Temperatur Speicher Unten");
		t.assertNextTextEquals("Temperatur Speicher oben (Sensor 3)");
		t.assertNextTextEquals("Temperatur T,H");
		t.assertNextTextEquals("Temperatur T-x");
		t.assertNextTextEquals("Temperatur T-xx");
		t.assertNextTextEquals("Temperatur VFD1");
		t.assertNextTextEquals("Temperatur VFS");
		t.assertNextTextEquals("Temperatur VFS/RPS (S6)");
		t.assertNextTextEquals("Temperatur Verdampf");
		t.assertNextTextEquals("Temperatur Vorlauf");
		t.assertNextTextEquals("Temperatur Vorlauf (Sensor 1)");
		t.assertNextTextEquals("Temperatur WP-RL");
		t.assertNextTextEquals("Temperatur WP-VL");
		t.assertNextTextEquals("Temperatur WW-Soll");
		t.assertNextTextEquals("Temperatur Warmwasser");
		t.assertNextTextEquals("Temperatur Warmwasser (Anzeige)");
		t.assertNextTextEquals("Temperatur Warmwasser (Regel)");
		t.assertNextTextEquals("Temperatur Zirkulation");
		t.assertNextTextEquals("Temperatur hinter Erdspeicher (S3)");
		t.assertNextTextEquals("Temperatur hinter Pumpe 1 (S4)");
		t.assertNextTextEquals("Temperatur hinter Wärmepumpe (S2)");
		t.assertNextTextEquals("Temperatur max. Kaltwasser");
		t.assertNextTextEquals("Temperatur min. Kaltwasser");
		t.assertNextTextEquals("Temperature Flow (sensor 1)");
		t.assertNextTextEquals("Temperature GFD");
		t.assertNextTextEquals("Temperature GFD1");
		t.assertNextTextEquals("Temperature GFD2");
		t.assertNextTextEquals("Temperature Module 1 Sensor 1");
		t.assertNextTextEquals("Temperature Module 1 Sensor 2");
		t.assertNextTextEquals("Temperature Module 1 Sensor 3");
		t.assertNextTextEquals("Temperature Module 1 Sensor 4");
		t.assertNextTextEquals("Temperature Module 1 Sensor 5");
		t.assertNextTextEquals("Temperature Module 1 Sensor 6");
		t.assertNextTextEquals("Temperature Module 2 Sensor 1");
		t.assertNextTextEquals("Temperature Module 2 Sensor 2");
		t.assertNextTextEquals("Temperature Module 2 Sensor 3");
		t.assertNextTextEquals("Temperature Module 2 Sensor 4");
		t.assertNextTextEquals("Temperature Module 2 Sensor 5");
		t.assertNextTextEquals("Temperature Module 2 Sensor 6");
		t.assertNextTextEquals("Temperature Module 3 Sensor 1");
		t.assertNextTextEquals("Temperature Module 3 Sensor 2");
		t.assertNextTextEquals("Temperature Module 3 Sensor 3");
		t.assertNextTextEquals("Temperature Module 3 Sensor 4");
		t.assertNextTextEquals("Temperature Module 3 Sensor 5");
		t.assertNextTextEquals("Temperature Module 3 Sensor 6");
		t.assertNextTextEquals("Temperature Module 4 Sensor 1");
		t.assertNextTextEquals("Temperature Module 4 Sensor 2");
		t.assertNextTextEquals("Temperature Module 4 Sensor 3");
		t.assertNextTextEquals("Temperature Module 4 Sensor 4");
		t.assertNextTextEquals("Temperature Module 4 Sensor 5");
		t.assertNextTextEquals("Temperature Module 4 Sensor 6");
		t.assertNextTextEquals("Temperature Module 5 Sensor 1");
		t.assertNextTextEquals("Temperature Module 5 Sensor 2");
		t.assertNextTextEquals("Temperature Module 5 Sensor 3");
		t.assertNextTextEquals("Temperature Module 5 Sensor 4");
		t.assertNextTextEquals("Temperature Module 5 Sensor 5");
		t.assertNextTextEquals("Temperature Module 5 Sensor 6");
		t.assertNextTextEquals("Temperature RPS");
		t.assertNextTextEquals("Temperature Return (sensor 2)");
		t.assertNextTextEquals("Temperature S,p");
		t.assertNextTextEquals("Temperature S,s");
		t.assertNextTextEquals("Temperature S1");
		t.assertNextTextEquals("Temperature S2");
		t.assertNextTextEquals("Temperature S3");
		t.assertNextTextEquals("Temperature S4");
		t.assertNextTextEquals("Temperature Sensor 1");
		t.assertNextTextEquals("Temperature Sensor 2");
		t.assertNextTextEquals("Temperature Sensor 3");
		t.assertNextTextEquals("Temperature Speicher Oben");
		t.assertNextTextEquals("Temperature Speicher Unten");
		t.assertNextTextEquals("Temperature Store top (sensor 3)");
		t.assertNextTextEquals("Temperature T,H");
		t.assertNextTextEquals("Temperature T-x");
		t.assertNextTextEquals("Temperature T-xx");
		t.assertNextTextEquals("Temperature VFD1");
		t.assertNextTextEquals("Temperature VFS");
		t.assertNextTextEquals("Temperature VFS/RPS (S6)");
		t.assertNextTextEquals("Temperature absorber (S1)");
		t.assertNextTextEquals("Temperature behind heat pump (S2)");
		t.assertNextTextEquals("Temperature behind pump 1 (S4)");
		t.assertNextTextEquals("Temperature behind underground tank (S3)");
		t.assertNextTextEquals("Temperature sensor 1");
		t.assertNextTextEquals("Temperature sensor 10");
		t.assertNextTextEquals("Temperature sensor 11");
		t.assertNextTextEquals("Temperature sensor 12");
		t.assertNextTextEquals("Temperature sensor 13");
		t.assertNextTextEquals("Temperature sensor 14");
		t.assertNextTextEquals("Temperature sensor 15");
		t.assertNextTextEquals("Temperature sensor 16");
		t.assertNextTextEquals("Temperature sensor 17");
		t.assertNextTextEquals("Temperature sensor 18");
		t.assertNextTextEquals("Temperature sensor 19");
		t.assertNextTextEquals("Temperature sensor 2");
		t.assertNextTextEquals("Temperature sensor 20");
		t.assertNextTextEquals("Temperature sensor 21");
		t.assertNextTextEquals("Temperature sensor 22");
		t.assertNextTextEquals("Temperature sensor 23");
		t.assertNextTextEquals("Temperature sensor 24");
		t.assertNextTextEquals("Temperature sensor 25");
		t.assertNextTextEquals("Temperature sensor 26");
		t.assertNextTextEquals("Temperature sensor 27");
		t.assertNextTextEquals("Temperature sensor 28");
		t.assertNextTextEquals("Temperature sensor 29");
		t.assertNextTextEquals("Temperature sensor 3");
		t.assertNextTextEquals("Temperature sensor 30");
		t.assertNextTextEquals("Temperature sensor 31");
		t.assertNextTextEquals("Temperature sensor 32");
		t.assertNextTextEquals("Temperature sensor 33");
		t.assertNextTextEquals("Temperature sensor 34");
		t.assertNextTextEquals("Temperature sensor 35");
		t.assertNextTextEquals("Temperature sensor 36");
		t.assertNextTextEquals("Temperature sensor 37");
		t.assertNextTextEquals("Temperature sensor 38");
		t.assertNextTextEquals("Temperature sensor 39");
		t.assertNextTextEquals("Temperature sensor 4");
		t.assertNextTextEquals("Temperature sensor 4 (>= v1.02)");
		t.assertNextTextEquals("Temperature sensor 40");
		t.assertNextTextEquals("Temperature sensor 5");
		t.assertNextTextEquals("Temperature sensor 6");
		t.assertNextTextEquals("Temperature sensor 7");
		t.assertNextTextEquals("Temperature sensor 8");
		t.assertNextTextEquals("Temperature sensor 9");
		t.assertNextTextEquals("Temperature sensor DDS");
		t.assertNextTextEquals("Temperature sensor Ga1");
		t.assertNextTextEquals("Temperature sensor Ga2");
		t.assertNextTextEquals("Temperature sensor Gds1");
		t.assertNextTextEquals("Temperature sensor Gds2");
		t.assertNextTextEquals("Temperature sensor VFS");
		t.assertNextTextEquals("Temperature sensor VFS/US");
		t.assertNextTextEquals("Temps d'activation Circulation");
		t.assertNextTextEquals("Temps d'aspersion au total :");
		t.assertNextTextEquals("Temps de contrôle (tc)");
		t.assertNextTextEquals("Temps de filtrage");
		t.assertNextTextEquals("Temps de filtrage aujourd'hui");
		t.assertNextTextEquals("Temps de fonc. 1 R1");
		t.assertNextTextEquals("Temps de fonc. 1 R2");
		t.assertNextTextEquals("Temps de fonc. 1 R3");
		t.assertNextTextEquals("Temps de fonc. 1 R4");
		t.assertNextTextEquals("Temps de fonc. 1 R5");
		t.assertNextTextEquals("Temps de fonc. 2 R1");
		t.assertNextTextEquals("Temps de fonc. 2 R2");
		t.assertNextTextEquals("Temps de fonc. 2 R3");
		t.assertNextTextEquals("Temps de fonc. 2 R4");
		t.assertNextTextEquals("Temps de fonc. 2 R5");
		t.assertNextTextEquals("Temps de fonc. PAC");
		t.assertNextTextEquals("Temps de fonc. PAC / 24 h");
		t.assertNextTextEquals("Temps de fonc. circulation");
		t.assertNextTextEquals("Temps de fonc. pompe prime");
		t.assertNextTextEquals("Temps de fonc. vanne mél.");
		t.assertNextTextEquals("Temps de fonct. en secondes PAC");
		t.assertNextTextEquals("Temps de fonctionnement Pompe R1");
		t.assertNextTextEquals("Temps filtre prolongé");
		t.assertNextTextEquals("Température Circulation");
		t.assertNextTextEquals("Température Départ");
		t.assertNextTextEquals("Température ECS");
		t.assertNextTextEquals("Température ECS (Affichage)");
		t.assertNextTextEquals("Température ECS (Contrôle)");
		t.assertNextTextEquals("Température GFD");
		t.assertNextTextEquals("Température GFD1");
		t.assertNextTextEquals("Température GFD2");
		t.assertNextTextEquals("Température Module 1 Sonde 1");
		t.assertNextTextEquals("Température Module 1 Sonde 2");
		t.assertNextTextEquals("Température Module 1 Sonde 3");
		t.assertNextTextEquals("Température Module 1 Sonde 4");
		t.assertNextTextEquals("Température Module 1 Sonde 5");
		t.assertNextTextEquals("Température Module 1 Sonde 6");
		t.assertNextTextEquals("Température Module 2 Sonde 1");
		t.assertNextTextEquals("Température Module 2 Sonde 2");
		t.assertNextTextEquals("Température Module 2 Sonde 3");
		t.assertNextTextEquals("Température Module 2 Sonde 4");
		t.assertNextTextEquals("Température Module 2 Sonde 5");
		t.assertNextTextEquals("Température Module 2 Sonde 6");
		t.assertNextTextEquals("Température Module 3 Sonde 1");
		t.assertNextTextEquals("Température Module 3 Sonde 2");
		t.assertNextTextEquals("Température Module 3 Sonde 3");
		t.assertNextTextEquals("Température Module 3 Sonde 4");
		t.assertNextTextEquals("Température Module 3 Sonde 5");
		t.assertNextTextEquals("Température Module 3 Sonde 6");
		t.assertNextTextEquals("Température Module 4 Sonde 1");
		t.assertNextTextEquals("Température Module 4 Sonde 2");
		t.assertNextTextEquals("Température Module 4 Sonde 3");
		t.assertNextTextEquals("Température Module 4 Sonde 4");
		t.assertNextTextEquals("Température Module 4 Sonde 5");
		t.assertNextTextEquals("Température Module 4 Sonde 6");
		t.assertNextTextEquals("Température Module 5 Sonde 1");
		t.assertNextTextEquals("Température Module 5 Sonde 2");
		t.assertNextTextEquals("Température Module 5 Sonde 3");
		t.assertNextTextEquals("Température Module 5 Sonde 4");
		t.assertNextTextEquals("Température Module 5 Sonde 5");
		t.assertNextTextEquals("Température Module 5 Sonde 6");
		t.assertNextTextEquals("Température RPS");
		t.assertNextTextEquals("Température S,p");
		t.assertNextTextEquals("Température S,s");
		t.assertNextTextEquals("Température S1");
		t.assertNextTextEquals("Température S2");
		t.assertNextTextEquals("Température S3");
		t.assertNextTextEquals("Température S4");
		t.assertNextTextEquals("Température Sonde 1");
		t.assertNextTextEquals("Température Sonde 2");
		t.assertNextTextEquals("Température Sonde 3");
		t.assertNextTextEquals("Température VFD1");
		t.assertNextTextEquals("Température VFS");
		t.assertNextTextEquals("Température VFS/RPS (S6)");
		t.assertNextTextEquals("Température absorbeur (S1)");
		t.assertNextTextEquals("Température après PAC (S2)");
		t.assertNextTextEquals("Température après pompe 1 (S4)");
		t.assertNextTextEquals("Température après rés. enterré (S3)");
		t.assertNextTextEquals("Température capteur (TC)");
		t.assertNextTextEquals("Température capteurs");
		t.assertNextTextEquals("Température cellule");
		t.assertNextTextEquals("Température chaudière");
		t.assertNextTextEquals("Température de charge");
		t.assertNextTextEquals("Température demande réservoir (off)");
		t.assertNextTextEquals("Température demande réservoir (on)");
		t.assertNextTextEquals("Température départ (sonde 1)");
		t.assertNextTextEquals("Température départ PAC");
		t.assertNextTextEquals("Température eau froide");
		t.assertNextTextEquals("Température est. rés. sous-sol");
		t.assertNextTextEquals("Température extérieure");
		t.assertNextTextEquals("Température extérieure bus");
		t.assertNextTextEquals("Température gaz d'échappement");
		t.assertNextTextEquals("Température max. eau froide");
		t.assertNextTextEquals("Température max. rés. sous-sol");
		t.assertNextTextEquals("Température maximale du réservoir");
		t.assertNextTextEquals("Température min. eau froide");
		t.assertNextTextEquals("Température minimale capteur");
		t.assertNextTextEquals("Température minimale du réservoir");
		t.assertNextTextEquals("Température nominale ECS");
		t.assertNextTextEquals("Température nominale du départ CC1");
		t.assertNextTextEquals("Température nominale départ");
		t.assertNextTextEquals("Température nominale externe (T-NOM EXT) :");
		t.assertNextTextEquals("Température nominale externe :");
		t.assertNextTextEquals("Température refroidissement réservoir");
		t.assertNextTextEquals("Température retour");
		t.assertNextTextEquals("Température retour (sonde 2)");
		t.assertNextTextEquals("Température retour PAC");
		t.assertNextTextEquals("Température retour du chauffage (TR)");
		t.assertNextTextEquals("Température réservoir");
		t.assertNextTextEquals("Température réservoir 1");
		t.assertNextTextEquals("Température réservoir 1 (Bus)");
		t.assertNextTextEquals("Température réservoir 2");
		t.assertNextTextEquals("Température réservoir 2 (Bus)");
		t.assertNextTextEquals("Température réservoir en bas");
		t.assertNextTextEquals("Température réservoir en haut");
		t.assertNextTextEquals("Température réservoir en haut (sonde 3)");
		t.assertNextTextEquals("Température sol");
		t.assertNextTextEquals("Température sonde 1");
		t.assertNextTextEquals("Température sonde 10");
		t.assertNextTextEquals("Température sonde 11");
		t.assertNextTextEquals("Température sonde 12");
		t.assertNextTextEquals("Température sonde 13");
		t.assertNextTextEquals("Température sonde 14");
		t.assertNextTextEquals("Température sonde 15");
		t.assertNextTextEquals("Température sonde 16");
		t.assertNextTextEquals("Température sonde 17");
		t.assertNextTextEquals("Température sonde 19");
		t.assertNextTextEquals("Température sonde 2");
		t.assertNextTextEquals("Température sonde 20");
		t.assertNextTextEquals("Température sonde 21");
		t.assertNextTextEquals("Température sonde 22");
		t.assertNextTextEquals("Température sonde 23");
		t.assertNextTextEquals("Température sonde 24");
		t.assertNextTextEquals("Température sonde 25");
		t.assertNextTextEquals("Température sonde 26");
		t.assertNextTextEquals("Température sonde 27");
		t.assertNextTextEquals("Température sonde 28");
		t.assertNextTextEquals("Température sonde 29");
		t.assertNextTextEquals("Température sonde 3");
		t.assertNextTextEquals("Température sonde 30");
		t.assertNextTextEquals("Température sonde 31");
		t.assertNextTextEquals("Température sonde 32");
		t.assertNextTextEquals("Température sonde 33");
		t.assertNextTextEquals("Température sonde 34");
		t.assertNextTextEquals("Température sonde 35");
		t.assertNextTextEquals("Température sonde 36");
		t.assertNextTextEquals("Température sonde 37");
		t.assertNextTextEquals("Température sonde 38");
		t.assertNextTextEquals("Température sonde 39");
		t.assertNextTextEquals("Température sonde 4");
		t.assertNextTextEquals("Température sonde 4 (>= v1.02)");
		t.assertNextTextEquals("Température sonde 40");
		t.assertNextTextEquals("Température sonde 5");
		t.assertNextTextEquals("Température sonde 6");
		t.assertNextTextEquals("Température sonde 7");
		t.assertNextTextEquals("Température sonde 8");
		t.assertNextTextEquals("Température sonde 9");
		t.assertNextTextEquals("Température sonde DDS");
		t.assertNextTextEquals("Température sonde Ga1");
		t.assertNextTextEquals("Température sonde Ga2");
		t.assertNextTextEquals("Température sonde Gds1");
		t.assertNextTextEquals("Température sonde Gds2");
		t.assertNextTextEquals("Température sonde TM");
		t.assertNextTextEquals("Température sonde VFS");
		t.assertNextTextEquals("Température sonde VFS/US");
		t.assertNextTextEquals("Température sonde18");
		t.assertNextTextEquals("Température source");
		t.assertNextTextEquals("Température source (Contrôle)");
		t.assertNextTextEquals("Température sécurité Echangeur");
		t.assertNextTextEquals("Température sécurité capteur");
		t.assertNextTextEquals("Température sécurité réservoir");
		t.assertNextTextEquals("Température tampon");
		t.assertNextTextEquals("Température vanne mélangeuse");
		t.assertNextTextEquals("Température vaporisation");
		t.assertNextTextEquals("Tension 10 V");
		t.assertNextTextEquals("Tension CS");
		t.assertNextTextEquals("TflowSet");
		t.assertNextTextEquals("Therm. Desinfektion");
		t.assertNextTextEquals("Therm. Disinfection");
		t.assertNextTextEquals("Therm. Energie1");
		t.assertNextTextEquals("Therm. Energie2");
		t.assertNextTextEquals("Therm. energy1");
		t.assertNextTextEquals("Therm. energy2");
		t.assertNextTextEquals("Thermal Circulation");
		t.assertNextTextEquals("Thermal disinfection");
		t.assertNextTextEquals("Thermische Desinfektion");
		t.assertNextTextEquals("Thermische Zirkulation");
		t.assertNextTextEquals("Thermostat");
		t.assertNextTextEquals("Thermostat 1");
		t.assertNextTextEquals("Time");
		t.assertNextTextEquals("Time period HP / 24h");
		t.assertNextTextEquals("Time stamp last cancelled TD");
		t.assertNextTextEquals("Time stamp last successul TD");
		t.assertNextTextEquals("Timer");
		t.assertNextTextEquals("Timer 1.1");
		t.assertNextTextEquals("Timer 1.2");
		t.assertNextTextEquals("Timer 2.1");
		t.assertNextTextEquals("Timer 2.2");
		t.assertNextTextEquals("Timer 3.1");
		t.assertNextTextEquals("Timer 3.2");
		t.assertNextTextEquals("Timer 4.1");
		t.assertNextTextEquals("Timer 4.2");
		t.assertNextTextEquals("Timer 5.1");
		t.assertNextTextEquals("Timer 5.2");
		t.assertNextTextEquals("Timer info");
		t.assertNextTextEquals("Tkol-erw");
		t.assertNextTextEquals("Tmax-Temp./S5");
		t.assertNextTextEquals("Tmax-Temp./S5_1s");
		t.assertNextTextEquals("Tmax-temp. / S5");
		t.assertNextTextEquals("Tmax-temp. / S5_1s");
		t.assertNextTextEquals("Tmax-temp. /S5");
		t.assertNextTextEquals("Tmax-temp. /S5_1s");
		t.assertNextTextEquals("TonsCO2Gas");
		t.assertNextTextEquals("TonsCO2Oil");
		t.assertNextTextEquals("Total operation");
		t.assertNextTextEquals("Tset day");
		t.assertNextTextEquals("Tsoll-Day");
		t.assertNextTextEquals("Tube collector");
		t.assertNextTextEquals("Tuxhorn BHKW");
		t.assertNextTextEquals("Tuxhorn PKE");
		t.assertNextTextEquals("Type d'antigel");
		t.assertNextTextEquals("Uebertemperaturschutz aktiv");
		t.assertNextTextEquals("Uhrzeit");
		t.assertNextTextEquals("Umschaltventil Kessel");
		t.assertNextTextEquals("Umwaelzzeitzähler");
		t.assertNextTextEquals("Umwälzung");
		t.assertNextTextEquals("Underground tank full");
		t.assertNextTextEquals("Underground tank maximum temperature");
		t.assertNextTextEquals("Unit");
		t.assertNextTextEquals("Unit Energy");
		t.assertNextTextEquals("Unit Flow rate");
		t.assertNextTextEquals("Unit Power");
		t.assertNextTextEquals("Unit Pressure");
		t.assertNextTextEquals("Unit Temperature");
		t.assertNextTextEquals("UnitType");
		t.assertNextTextEquals("Unité");
		t.assertNextTextEquals("Unité débit");
		t.assertNextTextEquals("Unité pression");
		t.assertNextTextEquals("Unité puissance");
		t.assertNextTextEquals("Unité température");
		t.assertNextTextEquals("Unité énergie");
		t.assertNextTextEquals("Urlaubsfunktion");
		t.assertNextTextEquals("V-Impuls");
		t.assertNextTextEquals("V-Sensor Fehler");
		t.assertNextTextEquals("V-US");
		t.assertNextTextEquals("VDI dT too high");
		t.assertNextTextEquals("VDI dT trop élevée");
		t.assertNextTextEquals("VDI dT zu hoch");
		t.assertNextTextEquals("VP: Vitesse 1");
		t.assertNextTextEquals("VP: Vitesse 2");
		t.assertNextTextEquals("VR 1");
		t.assertNextTextEquals("VR 2");
		t.assertNextTextEquals("VR 3");
		t.assertNextTextEquals("VR 4");
		t.assertNextTextEquals("Valeur");
		t.assertNextTextEquals("Valeur (ahjourd'hui)");
		t.assertNextTextEquals("Valeur (semaine)");
		t.assertNextTextEquals("Valeur aujourd'hui");
		t.assertNextTextEquals("Valeur interne");
		t.assertNextTextEquals("Valeur nominale");
		t.assertNextTextEquals("Valeur nominale actuelle (T-NOM)");
		t.assertNextTextEquals("Valeur nominale actuelle:");
		t.assertNextTextEquals("Valeur semaine");
		t.assertNextTextEquals("Value");
		t.assertNextTextEquals("Value (today)");
		t.assertNextTextEquals("Value (week)");
		t.assertNextTextEquals("Value today");
		t.assertNextTextEquals("Value week");
		t.assertNextTextEquals("Valve (R2)");
		t.assertNextTextEquals("Valve Co");
		t.assertNextTextEquals("Valve HP");
		t.assertNextTextEquals("Valve ST");
		t.assertNextTextEquals("Valve SW");
		t.assertNextTextEquals("Valve So");
		t.assertNextTextEquals("Vanne (R2)");
		t.assertNextTextEquals("Vanne Cap");
		t.assertNextTextEquals("Vanne PAC");
		t.assertNextTextEquals("Vanne Rés");
		t.assertNextTextEquals("Vanne SW");
		t.assertNextTextEquals("Vanne So");
		t.assertNextTextEquals("Vanne d'inversion chaudière");
		t.assertNextTextEquals("Vanne mél. dT");
		t.assertNextTextEquals("Vanne mél. fermée");
		t.assertNextTextEquals("Vanne mél. ouverte");
		t.assertNextTextEquals("Vanne mélangeuse");
		t.assertNextTextEquals("Vanne mélangeuse fermée");
		t.assertNextTextEquals("Vanne mélangeuse ouverte");
		t.assertNextTextEquals("Variant");
		t.assertNextTextEquals("Variante");
		t.assertNextTextEquals("Variante régulateur");
		t.assertNextTextEquals("Vcharge-jour/Vol2");
		t.assertNextTextEquals("Ventil");
		t.assertNextTextEquals("Ventil (R2)");
		t.assertNextTextEquals("Ventil Ko");
		t.assertNextTextEquals("Ventil SP");
		t.assertNextTextEquals("Ventil SW");
		t.assertNextTextEquals("Ventil So");
		t.assertNextTextEquals("Ventil WP");
		t.assertNextTextEquals("Verbleibende Zirkulationsdauer");
		t.assertNextTextEquals("Version");
		t.assertNextTextEquals("Version SW");
		t.assertNextTextEquals("Version logiciel");
		t.assertNextTextEquals("Version module");
		t.assertNextTextEquals("Version régulation");
		t.assertNextTextEquals("Viessmann Vitotrans 353 2017");
		t.assertNextTextEquals("Viessmann Vitotrans 353 2017 Broadcast");
		t.assertNextTextEquals("Viessmann Vitotrans 353 2017 Master");
		t.assertNextTextEquals("Viessmann Vitotrans 353 2017 Slave 1");
		t.assertNextTextEquals("Viessmann Vitotrans 353 2017 Slave 2");
		t.assertNextTextEquals("Viessmann Vitotrans 353 2017 Slave 3");
		t.assertNextTextEquals("Vitesse");
		t.assertNextTextEquals("Vitesse (PC)");
		t.assertNextTextEquals("Vitesse 1");
		t.assertNextTextEquals("Vitesse 1 R1");
		t.assertNextTextEquals("Vitesse 1 R2");
		t.assertNextTextEquals("Vitesse 1 R3");
		t.assertNextTextEquals("Vitesse 1 R4");
		t.assertNextTextEquals("Vitesse 1 R5");
		t.assertNextTextEquals("Vitesse 2");
		t.assertNextTextEquals("Vitesse 2 R1");
		t.assertNextTextEquals("Vitesse 2 R2");
		t.assertNextTextEquals("Vitesse 2 R3");
		t.assertNextTextEquals("Vitesse 2 R4");
		t.assertNextTextEquals("Vitesse 2 R5");
		t.assertNextTextEquals("Vitesse 3");
		t.assertNextTextEquals("Vitesse A");
		t.assertNextTextEquals("Vitesse A1");
		t.assertNextTextEquals("Vitesse A2");
		t.assertNextTextEquals("Vitesse A3");
		t.assertNextTextEquals("Vitesse R1");
		t.assertNextTextEquals("Vitesse R10");
		t.assertNextTextEquals("Vitesse R11");
		t.assertNextTextEquals("Vitesse R12");
		t.assertNextTextEquals("Vitesse R13");
		t.assertNextTextEquals("Vitesse R14");
		t.assertNextTextEquals("Vitesse R15");
		t.assertNextTextEquals("Vitesse R16");
		t.assertNextTextEquals("Vitesse R17");
		t.assertNextTextEquals("Vitesse R18");
		t.assertNextTextEquals("Vitesse R19");
		t.assertNextTextEquals("Vitesse R2");
		t.assertNextTextEquals("Vitesse R20");
		t.assertNextTextEquals("Vitesse R21");
		t.assertNextTextEquals("Vitesse R22");
		t.assertNextTextEquals("Vitesse R23");
		t.assertNextTextEquals("Vitesse R24");
		t.assertNextTextEquals("Vitesse R25");
		t.assertNextTextEquals("Vitesse R26");
		t.assertNextTextEquals("Vitesse R27");
		t.assertNextTextEquals("Vitesse R28");
		t.assertNextTextEquals("Vitesse R29");
		t.assertNextTextEquals("Vitesse R3");
		t.assertNextTextEquals("Vitesse R30");
		t.assertNextTextEquals("Vitesse R31");
		t.assertNextTextEquals("Vitesse R32");
		t.assertNextTextEquals("Vitesse R33");
		t.assertNextTextEquals("Vitesse R4");
		t.assertNextTextEquals("Vitesse R5");
		t.assertNextTextEquals("Vitesse R6");
		t.assertNextTextEquals("Vitesse R7");
		t.assertNextTextEquals("Vitesse R8");
		t.assertNextTextEquals("Vitesse R9");
		t.assertNextTextEquals("Vitesse circulation");
		t.assertNextTextEquals("Vitesse du débit");
		t.assertNextTextEquals("Vitesse min. eff.");
		t.assertNextTextEquals("Vitesse moyenne");
		t.assertNextTextEquals("Vitesse pompe 1");
		t.assertNextTextEquals("Vitesse pompe 2");
		t.assertNextTextEquals("Vitesse pompe de charge");
		t.assertNextTextEquals("Vitesse pompe de circulation");
		t.assertNextTextEquals("Vitesse pompe primaire");
		t.assertNextTextEquals("Vitesse pompe secondaire");
		t.assertNextTextEquals("Vitesse pompe à chaleur");
		t.assertNextTextEquals("Vitesse relais");
		t.assertNextTextEquals("Vitesse relais 1");
		t.assertNextTextEquals("Vitesse relais 1 (<= v1.01)");
		t.assertNextTextEquals("Vitesse relais 1 (>= v1.02)");
		t.assertNextTextEquals("Vitesse relais 1.1");
		t.assertNextTextEquals("Vitesse relais 1.2");
		t.assertNextTextEquals("Vitesse relais 10");
		t.assertNextTextEquals("Vitesse relais 11");
		t.assertNextTextEquals("Vitesse relais 12");
		t.assertNextTextEquals("Vitesse relais 13");
		t.assertNextTextEquals("Vitesse relais 14");
		t.assertNextTextEquals("Vitesse relais 2");
		t.assertNextTextEquals("Vitesse relais 2 (<= v1.01)");
		t.assertNextTextEquals("Vitesse relais 2 (>= v1.02)");
		t.assertNextTextEquals("Vitesse relais 2.1");
		t.assertNextTextEquals("Vitesse relais 2.2");
		t.assertNextTextEquals("Vitesse relais 3");
		t.assertNextTextEquals("Vitesse relais 3.1");
		t.assertNextTextEquals("Vitesse relais 3.2");
		t.assertNextTextEquals("Vitesse relais 4");
		t.assertNextTextEquals("Vitesse relais 4.1");
		t.assertNextTextEquals("Vitesse relais 4.2");
		t.assertNextTextEquals("Vitesse relais 5");
		t.assertNextTextEquals("Vitesse relais 5.1");
		t.assertNextTextEquals("Vitesse relais 5.2");
		t.assertNextTextEquals("Vitesse relais 6");
		t.assertNextTextEquals("Vitesse relais 7");
		t.assertNextTextEquals("Vitesse relais 8");
		t.assertNextTextEquals("Vitesse relais 9");
		t.assertNextTextEquals("Vitesse relais FastOff");
		t.assertNextTextEquals("Vitesse relais pumpe");
		t.assertNextTextEquals("Vitesse relais sans pot.");
		t.assertNextTextEquals("Vitesse sortie PWM 1");
		t.assertNextTextEquals("Vitesse sortie PWM 2");
		t.assertNextTextEquals("Vitosolic 200 [Controller]");
		t.assertNextTextEquals("Vitosolic 200 [HQM 1]");
		t.assertNextTextEquals("Vitosolic 200 [HQM 2]");
		t.assertNextTextEquals("Vitosolic 200 [HQM1]");
		t.assertNextTextEquals("Vitosolic 200 [HQM2]");
		t.assertNextTextEquals("Vitosolic 200 [Regler]");
		t.assertNextTextEquals("Vitosolic 200 [WMZ 1]");
		t.assertNextTextEquals("Vitosolic 200 [WMZ 2]");
		t.assertNextTextEquals("Vitosolic 200 [WMZ1]");
		t.assertNextTextEquals("Vitosolic 200 [WMZ2]");
		t.assertNextTextEquals("Vlast-Day/Vol2");
		t.assertNextTextEquals("Vload-Day/Vol2");
		t.assertNextTextEquals("Voltage 10 V");
		t.assertNextTextEquals("Volts");
		t.assertNextTextEquals("Volume");
		t.assertNextTextEquals("Volume 1");
		t.assertNextTextEquals("Volume 2");
		t.assertNextTextEquals("Volume année");
		t.assertNextTextEquals("Volume année dernière");
		t.assertNextTextEquals("Volume au total");
		t.assertNextTextEquals("Volume aujourd'hui");
		t.assertNextTextEquals("Volume hier");
		t.assertNextTextEquals("Volume in total");
		t.assertNextTextEquals("Volume mois");
		t.assertNextTextEquals("Volume mois dernier");
		t.assertNextTextEquals("Volume month");
		t.assertNextTextEquals("Volume previous month");
		t.assertNextTextEquals("Volume previous week");
		t.assertNextTextEquals("Volume previous year");
		t.assertNextTextEquals("Volume semaine");
		t.assertNextTextEquals("Volume semaine dernière");
		t.assertNextTextEquals("Volume today");
		t.assertNextTextEquals("Volume week");
		t.assertNextTextEquals("Volume year");
		t.assertNextTextEquals("Volume yesterday");
		t.assertNextTextEquals("Volume écoulement d'air");
		t.assertNextTextEquals("Volumen");
		t.assertNextTextEquals("Volumen 1");
		t.assertNextTextEquals("Volumen 2");
		t.assertNextTextEquals("Volumen Gestern");
		t.assertNextTextEquals("Volumen Heute");
		t.assertNextTextEquals("Volumen Jahr");
		t.assertNextTextEquals("Volumen Monat");
		t.assertNextTextEquals("Volumen Vorjahr");
		t.assertNextTextEquals("Volumen Vormonat");
		t.assertNextTextEquals("Volumen Vorwoche");
		t.assertNextTextEquals("Volumen Woche");
		t.assertNextTextEquals("Volumen gesamt");
		t.assertNextTextEquals("Volumen heute");
		t.assertNextTextEquals("Volumenstr.1");
		t.assertNextTextEquals("Volumenstr.2");
		t.assertNextTextEquals("Volumenstrom");
		t.assertNextTextEquals("Volumenstrom 1");
		t.assertNextTextEquals("Volumenstrom 2");
		t.assertNextTextEquals("Volumenstrom 3");
		t.assertNextTextEquals("Volumenstrom Flowrotor (S7)");
		t.assertNextTextEquals("Volumenstrom Kaltwasserkreis (dV_LT)");
		t.assertNextTextEquals("Volumenstrom Ko");
		t.assertNextTextEquals("Volumenstrom Sensor 1");
		t.assertNextTextEquals("Volumenstrom Sensor 10");
		t.assertNextTextEquals("Volumenstrom Sensor 11");
		t.assertNextTextEquals("Volumenstrom Sensor 12");
		t.assertNextTextEquals("Volumenstrom Sensor 13");
		t.assertNextTextEquals("Volumenstrom Sensor 14");
		t.assertNextTextEquals("Volumenstrom Sensor 15");
		t.assertNextTextEquals("Volumenstrom Sensor 17");
		t.assertNextTextEquals("Volumenstrom Sensor 18");
		t.assertNextTextEquals("Volumenstrom Sensor 19");
		t.assertNextTextEquals("Volumenstrom Sensor 2");
		t.assertNextTextEquals("Volumenstrom Sensor 20");
		t.assertNextTextEquals("Volumenstrom Sensor 21");
		t.assertNextTextEquals("Volumenstrom Sensor 3");
		t.assertNextTextEquals("Volumenstrom Sensor 8");
		t.assertNextTextEquals("Volumenstrom Sensor 9");
		t.assertNextTextEquals("Volumenstrom Sensor FlowRotor");
		t.assertNextTextEquals("Volumenstrom Sensor Ga1");
		t.assertNextTextEquals("Volumenstrom Sensor Ga2");
		t.assertNextTextEquals("Volumenstrom Sensor Gds1");
		t.assertNextTextEquals("Volumenstrom Sensor Gds2");
		t.assertNextTextEquals("Volumenstrom Sensor S10/V40");
		t.assertNextTextEquals("Volumenstrom Sensor V40");
		t.assertNextTextEquals("Volumenstrom Sensor VFS");
		t.assertNextTextEquals("Volumenstrom US gesamt");
		t.assertNextTextEquals("Volumenstrom US1");
		t.assertNextTextEquals("Volumenstrom US2");
		t.assertNextTextEquals("Volumenstrom V40");
		t.assertNextTextEquals("Volumenstrom VFD1");
		t.assertNextTextEquals("Volumenstrom VFS (S6)");
		t.assertNextTextEquals("Volumenstrom max.");
		t.assertNextTextEquals("Volumenstrom(S7) defekt");
		t.assertNextTextEquals("Volumenstrom-erw");
		t.assertNextTextEquals("Volumenstrom1_1s");
		t.assertNextTextEquals("Volumenstrom2");
		t.assertNextTextEquals("Volumenstrom2_1s");
		t.assertNextTextEquals("Volumenstrom3");
		t.assertNextTextEquals("Volumenstrom4");
		t.assertNextTextEquals("Volumenstrom5");
		t.assertNextTextEquals("Vorlauf Soll HK1 Modul Sensor 18");
		t.assertNextTextEquals("Vorlauf Soll HK2 Modul Sensor 25");
		t.assertNextTextEquals("Vorlauf Soll HK3 Modul Sensor 32");
		t.assertNextTextEquals("Vorlauf Soll Heizkreis Sensor 11");
		t.assertNextTextEquals("Vorlauf-Soll-Temperatur");
		t.assertNextTextEquals("Vorlaufbegrenzung");
		t.assertNextTextEquals("Vorlaufmaximaltemperatur");
		t.assertNextTextEquals("Vorlaufsolltemperatur");
		t.assertNextTextEquals("Vorlauftemperatur");
		t.assertNextTextEquals("Vorlauftemperatur HK1");
		t.assertNextTextEquals("W Set:");
		t.assertNextTextEquals("W Soll:");
		t.assertNextTextEquals("W nom:");
		t.assertNextTextEquals("WAMA (Counter)");
		t.assertNextTextEquals("WM: Heat quantity");
		t.assertNextTextEquals("WM: Quantité de chaleur");
		t.assertNextTextEquals("WM: Wärmemenge");
		t.assertNextTextEquals("WMZ #");
		t.assertNextTextEquals("WMZ #0");
		t.assertNextTextEquals("WMZ #1");
		t.assertNextTextEquals("WMZ #10");
		t.assertNextTextEquals("WMZ #11");
		t.assertNextTextEquals("WMZ #12");
		t.assertNextTextEquals("WMZ #13");
		t.assertNextTextEquals("WMZ #14");
		t.assertNextTextEquals("WMZ #15");
		t.assertNextTextEquals("WMZ #2");
		t.assertNextTextEquals("WMZ #3");
		t.assertNextTextEquals("WMZ #4");
		t.assertNextTextEquals("WMZ #5");
		t.assertNextTextEquals("WMZ #6");
		t.assertNextTextEquals("WMZ #7");
		t.assertNextTextEquals("WMZ #8");
		t.assertNextTextEquals("WMZ #9");
		t.assertNextTextEquals("WMZ-L10");
		t.assertNextTextEquals("WW-Anforderungstemperatur (aus)");
		t.assertNextTextEquals("WW-Anforderungstemperatur (ein)");
		t.assertNextTextEquals("WW-Bereitung");
		t.assertNextTextEquals("WW-Solltemperatur");
		t.assertNextTextEquals("Waermepumpe Betriebsmodus");
		t.assertNextTextEquals("Waermepumpe TProjekt");
		t.assertNextTextEquals("Waermepumpe Zustand");
		t.assertNextTextEquals("Wagner Sungo 100 [Controller]");
		t.assertNextTextEquals("Wagner Sungo 100 [HQM1]");
		t.assertNextTextEquals("Wagner Sungo 100 [Regler]");
		t.assertNextTextEquals("Wagner Sungo 100 [WMZ1]");
		t.assertNextTextEquals("Warm start");
		t.assertNextTextEquals("Warmstart");
		t.assertNextTextEquals("Warmwassersoll");
		t.assertNextTextEquals("Warmwassersolltemperatur");
		t.assertNextTextEquals("Warmwassertemperatur");
		t.assertNextTextEquals("Warning mask");
		t.assertNextTextEquals("Warning: Flow/Return interchanged");
		t.assertNextTextEquals("Warning: Maximum store temperature");
		t.assertNextTextEquals("Warning: Night circulation");
		t.assertNextTextEquals("Warning: SD card");
		t.assertNextTextEquals("Warning: ΔT too high");
		t.assertNextTextEquals("Warningmask");
		t.assertNextTextEquals("Warnmaske");
		t.assertNextTextEquals("Warnung: Nachtzirkulation");
		t.assertNextTextEquals("Warnung: SD-Karte");
		t.assertNextTextEquals("Warnung: Speichermaximaltemperatur");
		t.assertNextTextEquals("Warnung: Vorlauf/Rücklauf vertauscht");
		t.assertNextTextEquals("Warnung: ΔT zu hoch");
		t.assertNextTextEquals("Warnungen-Maske");
		t.assertNextTextEquals("Warnungmaske");
		t.assertNextTextEquals("Warnungsmaske");
		t.assertNextTextEquals("WattHours");
		t.assertNextTextEquals("Watts");
		t.assertNextTextEquals("WattsPerSquareMeter");
		t.assertNextTextEquals("Wechselrichter Aktiv");
		t.assertNextTextEquals("Wert");
		t.assertNextTextEquals("Wert (Woche)");
		t.assertNextTextEquals("Wert (heute)");
		t.assertNextTextEquals("Wert Woche");
		t.assertNextTextEquals("Wert heute");
		t.assertNextTextEquals("Wmz1_Leistung_W");
		t.assertNextTextEquals("Wmz1_Power_W");
		t.assertNextTextEquals("Wmz1_Puissance_W");
		t.assertNextTextEquals("Wmz1_ValeurAujourd'hui_Wh");
		t.assertNextTextEquals("Wmz1_ValeurSemaine_Wh");
		t.assertNextTextEquals("Wmz1_Valeur_Wh");
		t.assertNextTextEquals("Wmz1_ValueToday_Wh");
		t.assertNextTextEquals("Wmz1_ValueWeek_Wh");
		t.assertNextTextEquals("Wmz1_Value_Wh");
		t.assertNextTextEquals("Wmz1_WertHeute_Wh");
		t.assertNextTextEquals("Wmz1_WertWoche_Wh");
		t.assertNextTextEquals("Wmz1_Wert_Wh");
		t.assertNextTextEquals("Wmz2_Valeur_Wh");
		t.assertNextTextEquals("Wmz2_Value_Wh");
		t.assertNextTextEquals("Wmz2_Wert_Wh");
		t.assertNextTextEquals("Wärme");
		t.assertNextTextEquals("Wärme 2");
		t.assertNextTextEquals("Wärme 3");
		t.assertNextTextEquals("Wärme Gesamt");
		t.assertNextTextEquals("Wärme Gestern");
		t.assertNextTextEquals("Wärme Heute");
		t.assertNextTextEquals("Wärme Jahr");
		t.assertNextTextEquals("Wärme MWh");
		t.assertNextTextEquals("Wärme Monat");
		t.assertNextTextEquals("Wärme Vorjahr");
		t.assertNextTextEquals("Wärme Vormonat");
		t.assertNextTextEquals("Wärme Vorwoche");
		t.assertNextTextEquals("Wärme Wh");
		t.assertNextTextEquals("Wärme Woche");
		t.assertNextTextEquals("Wärme kWh");
		t.assertNextTextEquals("Wärme2");
		t.assertNextTextEquals("Wärme3");
		t.assertNextTextEquals("Wärme4");
		t.assertNextTextEquals("Wärme5");
		t.assertNextTextEquals("Wärmemenge");
		t.assertNextTextEquals("Wärmemenge (<= v1.01)");
		t.assertNextTextEquals("Wärmemenge (>= v1.02)");
		t.assertNextTextEquals("Wärmemenge 1");
		t.assertNextTextEquals("Wärmemenge 2");
		t.assertNextTextEquals("Wärmemenge MWh");
		t.assertNextTextEquals("Wärmemenge Monat");
		t.assertNextTextEquals("Wärmemenge S,p");
		t.assertNextTextEquals("Wärmemenge S,s");
		t.assertNextTextEquals("Wärmemenge Woche");
		t.assertNextTextEquals("Wärmemenge heute");
		t.assertNextTextEquals("Wärmemenge kWh");
		t.assertNextTextEquals("Wärmepumpe");
		t.assertNextTextEquals("Wärmepumpe an");
		t.assertNextTextEquals("Wärmetauscher Frostschutz");
		t.assertNextTextEquals("Wärmetauscher Nottemperatur");
		t.assertNextTextEquals("X-Control");
		t.assertNextTextEquals("Year");
		t.assertNextTextEquals("Year:");
		t.assertNextTextEquals("ZEN DT6 [Controller]");
		t.assertNextTextEquals("ZEN DT6 [HQM1]");
		t.assertNextTextEquals("ZEN DT6 [Regler]");
		t.assertNextTextEquals("ZEN DT6 [WMZ1]");
		t.assertNextTextEquals("Zapfmenge");
		t.assertNextTextEquals("Zapfmenge Gesamt");
		t.assertNextTextEquals("Zapfmenge gesamt");
		t.assertNextTextEquals("Zapfmenge max.");
		t.assertNextTextEquals("Zapfung");
		t.assertNextTextEquals("Zapfung aktiv");
		t.assertNextTextEquals("Zapfungsimpuls aktiv");
		t.assertNextTextEquals("Zapfvolumenstrom");
		t.assertNextTextEquals("Zeit");
		t.assertNextTextEquals("Zeitraum WP / 24h");
		t.assertNextTextEquals("Zeitstempel letzte abgebrochene TD");
		t.assertNextTextEquals("Zeitstempel letzte erfolgreiche TD");
		t.assertNextTextEquals("Zelltemperatur");
		t.assertNextTextEquals("Zirkulation Einschaltz.");
		t.assertNextTextEquals("Zirkulation Sperrzeit");
		t.assertNextTextEquals("Zirkulation aktiv");
		t.assertNextTextEquals("Zirkulation-Fühler");
		t.assertNextTextEquals("Zirkulationserfassung");
		t.assertNextTextEquals("Zirkulationspumpe");
		t.assertNextTextEquals("Zustand Sensor 5");
		t.assertNextTextEquals("Zustand Sensor 8");
		t.assertNextTextEquals("dQ LT Cycle");
		t.assertNextTextEquals("dT AH off");
		t.assertNextTextEquals("dT AH on");
		t.assertNextTextEquals("dT Appoint off");
		t.assertNextTextEquals("dT Appoint on");
		t.assertNextTextEquals("dT Beckenkühlfkt aus");
		t.assertNextTextEquals("dT Beckenkühlfkt ein");
		t.assertNextTextEquals("dT PAC off");
		t.assertNextTextEquals("dT PAC on");
		t.assertNextTextEquals("dT Puffer");
		t.assertNextTextEquals("dT Solar Nachheizung");
		t.assertNextTextEquals("dT Wärmepumpe an");
		t.assertNextTextEquals("dT Wärmepumpe aus");
		t.assertNextTextEquals("dT ausreichend");
		t.assertNextTextEquals("dT buffer");
		t.assertNextTextEquals("dT heat pump active");
		t.assertNextTextEquals("dT heat pump inactive");
		t.assertNextTextEquals("dT pool cooling function off");
		t.assertNextTextEquals("dT pool cooling function on");
		t.assertNextTextEquals("dT rechauffage Solaire");
		t.assertNextTextEquals("dT refroidissement Piscine off");
		t.assertNextTextEquals("dT refroidissement Piscine on");
		t.assertNextTextEquals("dT réservoir tampon");
		t.assertNextTextEquals("dT solar afterheating");
		t.assertNextTextEquals("dT sufficient");
		t.assertNextTextEquals("dT suffisant");
		t.assertNextTextEquals("dT-NH-aus");
		t.assertNextTextEquals("dT-NH-ein");
		t.assertNextTextEquals("dV LT");
		t.assertNextTextEquals("dt estimated");
		t.assertNextTextEquals("dt estimated2");
		t.assertNextTextEquals("dt estimé");
		t.assertNextTextEquals("dt estimé2");
		t.assertNextTextEquals("dt meas");
		t.assertNextTextEquals("dt mesuré");
		t.assertNextTextEquals("dt-erw");
		t.assertNextTextEquals("dt-erw2");
		t.assertNextTextEquals("dt-mess");
		t.assertNextTextEquals("errorMask");
		t.assertNextTextEquals("h P1");
		t.assertNextTextEquals("h P2");
		t.assertNextTextEquals("kWh");
		t.assertNextTextEquals("mStationAlive");
		t.assertNextTextEquals("mStationAus");
		t.assertNextTextEquals("mStationEin");
		t.assertNextTextEquals("mStationFehler");
		t.assertNextTextEquals("max. Temperatur Kaltwasser");
		t.assertNextTextEquals("max. Volumenstrom");
		t.assertNextTextEquals("min. Temperatur Kaltwasser");
		t.assertNextTextEquals("nemux");
		t.assertNextTextEquals("statusMask");
		t.assertNextTextEquals("t-PAC-Ss");
		t.assertNextTextEquals("t-Ps");
		t.assertNextTextEquals("t-Sp");
		t.assertNextTextEquals("t-Ss");
		t.assertNextTextEquals("t-WP-Ss");
		t.assertNextTextEquals("verbl. Zapfung");
		t.assertNextTextEquals("warningMask");
		t.assertNextTextEquals("Énergie aujourd'hui");
		t.assertNextTextEquals("État de fonctionnement Chauffage");
		t.assertNextTextEquals("État de fonctionnement Chauffage d'appoint");
		t.assertNextTextEquals("État de fonctionnement Erreur");
		t.assertNextTextEquals("État de fonctionnement Off");
		t.assertNextTextEquals("État de fonctionnement Prêt");
		t.assertNextTextEquals("État de fonctionnement Rinçer");
		t.assertNextTextEquals("État de fonctionnement Temp. max. DÉP");
		t.assertNextTextEquals("État de fonctionnement Temp. max. RET");
		t.assertNextTextEquals("État de la fonction SmartRemote Appareil électrique externe");
		t.assertNextTextEquals("État de la fonction SmartRemote off");
		t.assertNextTextEquals("État de la fonction SmartRemote on");
		t.assertNextTextEquals("Überdruck");
		t.assertNextTextEquals("Übergabestation Status");
		t.assertNextTextEquals("Überhitzung aktiv");
		t.assertNextTextEquals("Überschuss");
		t.assertNextTextEquals("Überschuss Wh");
		t.assertNextTextEquals("Überwärmeabfuhr");
		t.assertNextTextEquals("ΔT Kollektor-Speicher");
		t.assertNextTextEquals("ΔT Vorlauf-Rücklauf");
		t.assertNextTextEquals("ΔT capteur-réservoir");
		t.assertNextTextEquals("ΔT collector-store");
		t.assertNextTextEquals("ΔT départ-retour");
		t.assertNextTextEquals("ΔT flow-return");
		t.assertNextTextEquals("ΔT too high");
		t.assertNextTextEquals("ΔT trop élevée");
		t.assertNextTextEquals("ΔT zu hoch");
		t.assertNextTextEquals("ΔT3");
		t.assertEndOfTextTable();
	}

	class LocalizedTextTester {
		
		int index = 0;
		
//		void dumpAsserts() {
//			for (int i = 0; i < specFile.getTexts().length; i++) {
//				LocalizedText locText = specFile.getLocalizedTexts() [index++];
//				System.out.println("t.assertNextLocalizedTextEquals(\"" + specFile.getTextByIndex(locText.textIndexEn) + "\", \"" + specFile.getTextByIndex(locText.textIndexDe) + "\", \"" + specFile.getTextByIndex(locText.textIndexFr) + "\");");
//			}
//		}

		void assertNextLocalizedTextEquals(String expectedEn, String expectedDe, String expectedFr) {
			LocalizedText locText = specFile.getLocalizedTexts() [index++];
			assertEquals(expectedEn, specFile.getTextByIndex(locText.textIndexEn));
			assertEquals(expectedDe, specFile.getTextByIndex(locText.textIndexDe));
			assertEquals(expectedFr, specFile.getTextByIndex(locText.textIndexFr));
		}
		
		void assertEndOfLocalizedTextTable() {
			assertEquals(index, specFile.getLocalizedTexts().length);
		}

	}

	@Test
	public void testLocalizedTexts() throws Exception {
		LocalizedTextTester t = new LocalizedTextTester();
		t.assertNextLocalizedTextEquals("!Datum/Uhrzeit", "!Datum/Uhrzeit", "!Datum/Uhrzeit");
		t.assertNextLocalizedTextEquals("!Lüfterfehler", "!Lüfterfehler", "!Lüfterfehler");
		t.assertNextLocalizedTextEquals("!Lüfterwarnung", "!Lüfterwarnung", "!Lüfterwarnung");
		t.assertNextLocalizedTextEquals("!Max. Temp. Regler", "!Max. Temp. Regler", "!Max. Temp. Regler");
		t.assertNextLocalizedTextEquals("!Power module bus communication disturbed", "!Powermodul Bus-Kommunikation gestört", "!Module Power Communication bus interrompue");
		t.assertNextLocalizedTextEquals("!Sensorfehler", "!Sensorfehler", "!Sensorfehler");
		t.assertNextLocalizedTextEquals("!Sensor fault short circuit", "!Sensorfehler Kurzschluss", "!Erreur sonde court-circuit");
		t.assertNextLocalizedTextEquals("!Sensor fault line break", "!Sensorfehler Leitungsbruch", "!Erreur sonde rupture câble");
		t.assertNextLocalizedTextEquals("!Sensor module bus communication disturbed", "!Sensormodul Bus-Kommunikation gestört", "!Module Sensor Communication bus interrompue");
		t.assertNextLocalizedTextEquals("0-10V In", "0-10V In", "0-10V In");
		t.assertNextLocalizedTextEquals("5 min error code", "5-Min-Fehlercode", "Code erreur 5 min");
		t.assertNextLocalizedTextEquals("Exhaust temperature", "Abgastemperatur", "Température gaz d'échappement");
		t.assertNextLocalizedTextEquals("Temperature absorber (S1)", "Absorbertemperatur (S1)", "Température absorbeur (S1)");
		t.assertNextLocalizedTextEquals("Current set value (T-SET)", "Aktuellen Sollwert (T-SET):", "Valeur nominale actuelle (T-NOM)");
		t.assertNextLocalizedTextEquals("Current set value:", "Aktuellen Sollwert:", "Valeur nominale actuelle:");
		t.assertNextLocalizedTextEquals("Anforderung", "Anforderung", "Anforderung");
		t.assertNextLocalizedTextEquals("Circulation demand", "Anforderungszirkulation", "Demande circulation");
		t.assertNextLocalizedTextEquals("Arrangement:", "Anlage:", "Installation:");
		t.assertNextLocalizedTextEquals("Arrangement options 1", "Anlagenoptionen 1", "Options installation 1");
		t.assertNextLocalizedTextEquals("Arrangement options 2", "Anlagenoptionen 2", "Options installation 2");
		t.assertNextLocalizedTextEquals("Estim. temperature underground tank", "Ann. Temperatur Erdspeicher", "Température est. rés. sous-sol");
		t.assertNextLocalizedTextEquals("Control 1", "Ansteuerung 1", "Commande 1");
		t.assertNextLocalizedTextEquals("Control 2", "Ansteuerung 2", "Commande 2");
		t.assertNextLocalizedTextEquals("Number of operating cycles", "Anzahl Schaltspiele", "Nombre de cycles de fonctionnement");
		t.assertNextLocalizedTextEquals("Number TD functions", "Anzahl TD-Funktionen", "Nombre fonctions DT");
		t.assertNextLocalizedTextEquals("Number of HP starts", "Anzahl WP-Starts", "Nombre démarrages PAC");
		t.assertNextLocalizedTextEquals("Number of cycles (sum):", "Anzahl Zyklen (Summe):", "Nombre cycles (total) :");
		t.assertNextLocalizedTextEquals("Number of cycles (since start):", "Anzahl Zyklen (seit Start):", "Nombre cycles (depuis démarrage) :");
		t.assertNextLocalizedTextEquals("Number of cycles:", "Anzahl Zyklen:", "Nombre cycles :");
		t.assertNextLocalizedTextEquals("Status display", "Anzeige-Status", "Etat affichage");
		t.assertNextLocalizedTextEquals("Atlantic SOLERIO V3", "Atlantic SOLERIO V3", "Atlantic SOLERIO V3");
		t.assertNextLocalizedTextEquals("Aton DeltaSol BS", "Aton DeltaSol BS", "Aton DeltaSol BS");
		t.assertNextLocalizedTextEquals("Summed-up spraying time", "Aufsummierte Besprühungzeit:", "Temps d'aspersion au total :");
		t.assertNextLocalizedTextEquals("Output A", "Ausgang A", "Sortie A");
		t.assertNextLocalizedTextEquals("Output B", "Ausgang B", "Sortie B");
		t.assertNextLocalizedTextEquals("Output C", "Ausgang C", "Sortie C");
		t.assertNextLocalizedTextEquals("Output D", "Ausgang D", "Sortie D");
		t.assertNextLocalizedTextEquals("Switch-off threshold", "Ausschaltschwelle", "Seuil de désactivation");
		t.assertNextLocalizedTextEquals("Switch-off temperature difference", "Ausschalttemperaturdifferenz", "Différence de température de déclenchement");
		t.assertNextLocalizedTextEquals("Outdoor temperature", "Aussentemperatur", "Température extérieure");
		t.assertNextLocalizedTextEquals("Outdoor temperature bus", "Aussentemperatur Bus", "Température extérieure bus");
		t.assertNextLocalizedTextEquals("Outdoor temperature", "Außentemperatur", "Température extérieure");
		t.assertNextLocalizedTextEquals("BLPR 1", "BLSC 1", "ANBL 1");
		t.assertNextLocalizedTextEquals("BLPR 2", "BLSC 2", "ANBL 2");
		t.assertNextLocalizedTextEquals("BLPR 3", "BLSC 3", "ANBL 3");
		t.assertNextLocalizedTextEquals("BLPR 4", "BLSC 4", "ANBL 4");
		t.assertNextLocalizedTextEquals("BS Solex US", "BS Solex US", "BS Solex US");
		t.assertNextLocalizedTextEquals("BS: Operating hours relay 1", "BS: Betriebsstunden Relais 1", "BS: Heures de fonctionnement relais 1");
		t.assertNextLocalizedTextEquals("BS: Operating hours relay 2", "BS: Betriebsstunden Relais 2", "BS: Heures de fonctionnement relais 2");
		t.assertNextLocalizedTextEquals("OSR 1", "BSR 1", "HFR1");
		t.assertNextLocalizedTextEquals("OSR 2", "BSR 2", "HFR2");
		t.assertNextLocalizedTextEquals("OSR 3", "BSR 3", "HFR3");
		t.assertNextLocalizedTextEquals("OSR 4", "BSR 4", "HFR4");
		t.assertNextLocalizedTextEquals("DHW loading p.", "BW-Ladepumpe", "Pompe charge ECS");
		t.assertNextLocalizedTextEquals("Pool max.", "Beckenmax.", "Piscine max.");
		t.assertNextLocalizedTextEquals("Filling", "Befüllung", "Remplissage");
		t.assertNextLocalizedTextEquals("Loading", "Beladung", "Chauffage");
		t.assertNextLocalizedTextEquals("Op. mode", "Betriebsart", "Mode f.");
		t.assertNextLocalizedTextEquals("Operating mode (cooling/heating)", "Betriebsart (Kühlen/Heizen)", "Mode de fonc. (refroidir/chauffer)");
		t.assertNextLocalizedTextEquals("Operating message", "Betriebsmeldung", "Message de fonctionnement");
		t.assertNextLocalizedTextEquals("Operating relay active", "Betriebsrelais ein", "Relais de fonctionnement actif");
		t.assertNextLocalizedTextEquals("Operating seconds", "Betriebssekunden", "Secondes de fonctionnement");
		t.assertNextLocalizedTextEquals("Operating seconds output PWM1", "Betriebssekunden Ausgang PWM 1", "Secondes de fonctionnement sortie PWM1");
		t.assertNextLocalizedTextEquals("Operating seconds output PWM2", "Betriebssekunden Ausgang PWM 2", "Secondes de fonctionnement sortie PWM2");
		t.assertNextLocalizedTextEquals("Operating seconds R1", "Betriebssekunden R1", "Secondes de fonctionnement R1");
		t.assertNextLocalizedTextEquals("Operating seconds R2", "Betriebssekunden R2", "Secondes de fonctionnement R2");
		t.assertNextLocalizedTextEquals("Operating seconds R3", "Betriebssekunden R3", "Secondes de fonctionnement R3");
		t.assertNextLocalizedTextEquals("Operating seconds R4", "Betriebssekunden R4", "Secondes de fonctionnement R4");
		t.assertNextLocalizedTextEquals("Operating seconds R5", "Betriebssekunden R5", "Secondes de fonctionnement R5");
		t.assertNextLocalizedTextEquals("Operating seconds R6", "Betriebssekunden R6", "Secondes de fonctionnement R6");
		t.assertNextLocalizedTextEquals("Operating seconds R7", "Betriebssekunden R7", "Secondes de fonctionnement R7");
		t.assertNextLocalizedTextEquals("Operating seconds R8", "Betriebssekunden R8", "Secondes de fonctionnement R8");
		t.assertNextLocalizedTextEquals("Operating seconds R9", "Betriebssekunden R9", "Secondes de fonctionnement R9");
		t.assertNextLocalizedTextEquals("Operating seconds relay 1", "Betriebssekunden Relais 1", "Secondes de fonctionnement relais 1");
		t.assertNextLocalizedTextEquals("Operating seconds relay 2", "Betriebssekunden Relais 2", "Secondes de fonctionnement relais 2");
		t.assertNextLocalizedTextEquals("Operating seconds relay 3", "Betriebssekunden Relais 3", "Secondes de fonctionnement relais 3");
		t.assertNextLocalizedTextEquals("Operating seconds relay 4", "Betriebssekunden Relais 4", "Secondes de fonctionnement relais 4");
		t.assertNextLocalizedTextEquals("Operating seconds relay 5", "Betriebssekunden Relais 5", "Secondes de fonctionnement relais 5");
		t.assertNextLocalizedTextEquals("Operating seconds relay FastOff", "Betriebssekunden Relais FastOff", "Secondes de fonctionnement relais FastOff");
		t.assertNextLocalizedTextEquals("Operating seconds relay pump", "Betriebssekunden Relais Pumpe", "Secondes de fonctionnement relais pompe");
		t.assertNextLocalizedTextEquals("Operating seconds pot.-free relay", "Betriebssekunden Relais pot.frei", "Secondes de fonctionnement rel. sans pot.");
		t.assertNextLocalizedTextEquals("Operating sec. heat pump", "Betriebssekunden WP", "Temps de fonct. en secondes PAC");
		t.assertNextLocalizedTextEquals("Operating state", "Betriebsstatus", "Etat de fonctionnement");
		t.assertNextLocalizedTextEquals("Operating hours", "Betriebsstunden", "Heures de fonc.");
		t.assertNextLocalizedTextEquals("Operating hours 1", "Betriebsstunden 1", "Heures de fonc. 1");
		t.assertNextLocalizedTextEquals("Operating hours 2", "Betriebsstunden 2", "Heures de fonc. 2");
		t.assertNextLocalizedTextEquals("Operating hours 3", "Betriebsstunden 3", "Heures de fonc. 3");
		t.assertNextLocalizedTextEquals("Operating hours 4", "Betriebsstunden 4", "Heures de fonc. 4");
		t.assertNextLocalizedTextEquals("Operating hours 5", "Betriebsstunden 5", "Heures de fonc. 5");
		t.assertNextLocalizedTextEquals("Operating hours 6", "Betriebsstunden 6", "Heures de fonc. 6");
		t.assertNextLocalizedTextEquals("Operating seconds heating", "Betriebsstunden Heizung", "Heures de fonctionnement Chauffage");
		t.assertNextLocalizedTextEquals("Operating seconds backup heating", "Betriebsstunden Nachheizung", "Heures de fonctionnement Chauffage d'appoint");
		t.assertNextLocalizedTextEquals("Operating hours R1", "Betriebsstunden R1", "Heures de fonc. R1");
		t.assertNextLocalizedTextEquals("Operating hours R2", "Betriebsstunden R2", "Heures de fonc. R2");
		t.assertNextLocalizedTextEquals("Operating hours relay", "Betriebsstunden Relais", "Heures de fonc. relais");
		t.assertNextLocalizedTextEquals("Operating hours relay 1", "Betriebsstunden Relais 1", "Heures de fonc. relais 1");
		t.assertNextLocalizedTextEquals("Operating hours relay 2", "Betriebsstunden Relais 2", "Heures de fonc. relais 2");
		t.assertNextLocalizedTextEquals("Operating hours relay 3", "Betriebsstunden Relais 3", "Heures de fonc. relais 3");
		t.assertNextLocalizedTextEquals("Operating hours relay 4", "Betriebsstunden Relais 4", "Heures de fonc. relais 4");
		t.assertNextLocalizedTextEquals("Operating hours relay1", "Betriebsstunden Relais1", "Heures de fonc. relais1");
		t.assertNextLocalizedTextEquals("Operating hours relay2", "Betriebsstunden Relais2", "Heures de fonc. relais2");
		t.assertNextLocalizedTextEquals("Operating hours flag ", "Betriebsstunden-Flag", "Flag-Heures de fonctionnement");
		t.assertNextLocalizedTextEquals("Operating days", "Betriebstage", "Jours de fonctionnement");
		t.assertNextLocalizedTextEquals("Betriebszeit Gesamt", "Betriebszeit Gesamt", "Betriebszeit Gesamt");
		t.assertNextLocalizedTextEquals("Operating time prim. pump", "Betriebszeit Primärp.", "Temps de fonc. pompe prime");
		t.assertNextLocalizedTextEquals("Operating time circulation", "Betriebszeit Zirkulation", "Temps de fonc. circulation");
		t.assertNextLocalizedTextEquals("Balance Duration P1 on", "Bilanz Dauer P1 an", "Bilan durée P1 on");
		t.assertNextLocalizedTextEquals("Balance Duration P2 on", "Bilanz Dauer P2 an", "Bilan durée P1 off");
		t.assertNextLocalizedTextEquals("Bilanz Heat quantity", "Bilanz Wärmemenge", "Bilan quantité de chauleur");
		t.assertNextLocalizedTextEquals("Blocking protection 1", "Blockierschutz 1", "Antiblocage 1");
		t.assertNextLocalizedTextEquals("Blocking protection 2", "Blockierschutz 2", "Antiblocage 2");
		t.assertNextLocalizedTextEquals("Blocking protection 3", "Blockierschutz 3", "Antiblocage 3");
		t.assertNextLocalizedTextEquals("Blocking protection 4", "Blockierschutz 4", "Antiblocage 4");
		t.assertNextLocalizedTextEquals("Blocking protection R2", "Blockierschutz R2", "Antiblocage R2");
		t.assertNextLocalizedTextEquals("Blocking protection R4", "Blockierschutz R4", "Antiblocage R4");
		t.assertNextLocalizedTextEquals("Blocking protection active", "Blockierschutz aktiv", "Antiblocage actif");
		t.assertNextLocalizedTextEquals("DHW store", "Brauchwasserspeicher", "Réservoir ECS");
		t.assertNextLocalizedTextEquals("Boiler block", "Brennersperre 2", "Bloc. brûleur 2");
		t.assertNextLocalizedTextEquals("Boiler starts", "Brennerstarts", "Démarr. brûleur");
		t.assertNextLocalizedTextEquals("Broadcast", "Broadcast", "Broadcast");
		t.assertNextLocalizedTextEquals("C1", "C1", "C1");
		t.assertNextLocalizedTextEquals("CD", "CD", "CD");
		t.assertNextLocalizedTextEquals("COSMO Multi HC 1 Concrete drying [Module 1]", "COSMO Multi HK 1 Estrichtrockung [Modul 1]", "COSMO Multi HC 1 Concrete drying [Module 1]");
		t.assertNextLocalizedTextEquals("COSMO Multi HC 2 Concrete drying [Module 2]", "COSMO Multi HK 2 Estrichtrockung [Modul 2]", "COSMO Multi HC 2 Concrete drying [Module 2]");
		t.assertNextLocalizedTextEquals("COSMO Multi HC 3 Concrete drying [Module 3]", "COSMO Multi HK 3 Estrichtrockung [Modul 3]", "COSMO Multi HC 3 Concrete drying [Module 3]");
		t.assertNextLocalizedTextEquals("COSMO Multi HK Estrichtrockung [Lokal]", "COSMO Multi HK Estrichtrockung [Lokal]", "COSMO Multi HK Estrichtrockung [Lokal]");
		t.assertNextLocalizedTextEquals("COSMO Multi [Controller]", "COSMO Multi [Regler]", "COSMO Multi [Controller]");
		t.assertNextLocalizedTextEquals("COSMO Multi [HQM]", "COSMO Multi [WMZ]", "COSMO Multi [HQM]");
		t.assertNextLocalizedTextEquals("COSMO UNO", "COSMO UNO", "COSMO UNO");
		t.assertNextLocalizedTextEquals("COSMO UNO [HQM1]", "COSMO UNO [WMZ1]", "COSMO UNO [HQM1]");
		t.assertNextLocalizedTextEquals("CS on", "CS ein", "CS on");
		t.assertNextLocalizedTextEquals("CS1.2", "CS1.2", "CS1.2");
		t.assertNextLocalizedTextEquals("CS2.2", "CS2.2", "CS2.2");
		t.assertNextLocalizedTextEquals("CU", "CU", "CU");
		t.assertNextLocalizedTextEquals("Caleffi Biomassa", "Caleffi Biomassa", "Caleffi Biomassa");
		t.assertNextLocalizedTextEquals("Caleffi WP", "Caleffi WP", "Caleffi WP");
		t.assertNextLocalizedTextEquals("Computer", "Computer", "Computer");
		t.assertNextLocalizedTextEquals("ConergyDT5", "ConergyDT5", "ConergyDT5");
		t.assertNextLocalizedTextEquals("Countdown blockage", "Countdown Sperrung", "Compte à rebours Blocage");
		t.assertNextLocalizedTextEquals("Current Impulse Interval Sensor 1", "Current Impulse Interval Sensor 1", "Current Impulse Interval Sonde 1");
		t.assertNextLocalizedTextEquals("Current Impulse Interval Sensor 2", "Current Impulse Interval Sensor 2", "Current Impulse Interval Sonde 2");
		t.assertNextLocalizedTextEquals("Current Impulse Interval Sensor 3", "Current Impulse Interval Sensor 3", "Current Impulse Interval Sonde 3");
		t.assertNextLocalizedTextEquals("Current sensor 4", "Current Sensor 4", "Sonde de courant 4");
		t.assertNextLocalizedTextEquals("DDS-Crawler", "DDS-Crawler", "DDS-Crawler");
		t.assertNextLocalizedTextEquals("DFA", "DFA", "DFA");
		t.assertNextLocalizedTextEquals("DL2", "DL2", "DL2");
		t.assertNextLocalizedTextEquals("DL3", "DL3", "DL3");
		t.assertNextLocalizedTextEquals("SR 1", "DR 1", "VR 1");
		t.assertNextLocalizedTextEquals("SR 2", "DR 2", "VR 2");
		t.assertNextLocalizedTextEquals("SR 3", "DR 3", "VR 3");
		t.assertNextLocalizedTextEquals("SR 4", "DR 4", "VR 4");
		t.assertNextLocalizedTextEquals("DSPlus UMSYS [Controller]", "DSPlus UMSYS [Regler]", "DSPlus UMSYS [Controller]");
		t.assertNextLocalizedTextEquals("DT4 (B)", "DT4 (B)", "DT4 (B)");
		t.assertNextLocalizedTextEquals("DT4 (MS)", "DT4 (MS)", "DT4 (MS)");
		t.assertNextLocalizedTextEquals("PS: Pump speed 1", "DZ: Drehzahl 1", "VP: Vitesse 1");
		t.assertNextLocalizedTextEquals("PS: Pump speed 2", "DZ: Drehzahl 2", "VP: Vitesse 2");
		t.assertNextLocalizedTextEquals("Date", "Datum", "Date");
		t.assertNextLocalizedTextEquals("Date/Time", "Datum/Uhrzeit", "Date/Heure");
		t.assertNextLocalizedTextEquals("Date measured values", "Datum_Messdaten", "Date valeurs de mesure");
		t.assertNextLocalizedTextEquals("Duration controlling period", "Dauer Regelungsblock", "Durée période réglage");
		t.assertNextLocalizedTextEquals("Permanent circ.", "Dauerzirkulation", "Circ. permanente");
		t.assertNextLocalizedTextEquals("DeDietrich Diemasol Ai v2", "DeDietrich Diemasol Ai v2", "DeDietrich Diemasol Ai v2");
		t.assertNextLocalizedTextEquals("DeDietrich Diemasol C v2007", "DeDietrich Diemasol C v2007", "DeDietrich Diemasol C v2007");
		t.assertNextLocalizedTextEquals("DeDietrich DrainBack", "DeDietrich DrainBack", "DeDietrich DrainBack");
		t.assertNextLocalizedTextEquals("DeDietrich Drainback (Control)", "DeDietrich Drainback (Control)", "DeDietrich Drainback (Control)");
		t.assertNextLocalizedTextEquals("DeDietrich Sol Plus ER 709", "DeDietrich Sol Plus ER 709", "DeDietrich Sol Plus ER 709");
		t.assertNextLocalizedTextEquals("DeDietrich Sol Plus Trio", "DeDietrich Sol Plus Trio", "DeDietrich Sol Plus Trio");
		t.assertNextLocalizedTextEquals("Debug1", "Debug1", "Debug1");
		t.assertNextLocalizedTextEquals("Debug2", "Debug2", "Debug2");
		t.assertNextLocalizedTextEquals("Debug3", "Debug3", "Debug3");
		t.assertNextLocalizedTextEquals("Debug4", "Debug4", "Debug4");
		t.assertNextLocalizedTextEquals("Debug5", "Debug5", "Debug5");
		t.assertNextLocalizedTextEquals("DeltaSol AL", "DeltaSol AL", "DeltaSol AL");
		t.assertNextLocalizedTextEquals("DeltaSol AL E HE", "DeltaSol AL E HE", "DeltaSol AL E HE");
		t.assertNextLocalizedTextEquals("DeltaSol AL-E", "DeltaSol AL-E", "DeltaSol AL-E");
		t.assertNextLocalizedTextEquals("DeltaSol B", "DeltaSol B", "DeltaSol B");
		t.assertNextLocalizedTextEquals("DeltaSol BS", "DeltaSol BS", "DeltaSol BS");
		t.assertNextLocalizedTextEquals("DeltaSol BS (DT4)", "DeltaSol BS (DT4)", "DeltaSol BS (DT4)");
		t.assertNextLocalizedTextEquals("DeltaSol BS 2009", "DeltaSol BS 2009", "DeltaSol BS 2009");
		t.assertNextLocalizedTextEquals("DeltaSol BS Plus", "DeltaSol BS Plus", "DeltaSol BS Plus");
		t.assertNextLocalizedTextEquals("DeltaSol BS Plus BTU", "DeltaSol BS Plus BTU", "DeltaSol BS Plus BTU");
		t.assertNextLocalizedTextEquals("DeltaSol BS/2 HE", "DeltaSol BS/2 HE", "DeltaSol BS/2 HE");
		t.assertNextLocalizedTextEquals("DeltaSol BS/2 HE [HQM]", "DeltaSol BS/2 HE [WMZ]", "DeltaSol BS/2 HE [HQM]");
		t.assertNextLocalizedTextEquals("DeltaSol BS/4 HE", "DeltaSol BS/4 HE", "DeltaSol BS/4 HE");
		t.assertNextLocalizedTextEquals("DeltaSol BS/4 HE [HQM]", "DeltaSol BS/4 HE [WMZ]", "DeltaSol BS/4 HE [HQM]");
		t.assertNextLocalizedTextEquals("DeltaSol BS/DrainBack", "DeltaSol BS/DrainBack", "DeltaSol BS/DrainBack");
		t.assertNextLocalizedTextEquals("DeltaSol BS/DrainBack (Fahrenheit)", "DeltaSol BS/DrainBack (Fahrenheit)", "DeltaSol BS/DrainBack (Fahrenheit)");
		t.assertNextLocalizedTextEquals("DeltaSol BS/DrainBack (Fahrenheit/BTU)", "DeltaSol BS/DrainBack (Fahrenheit/BTU)", "DeltaSol BS/DrainBack (Fahrenheit/BTU)");
		t.assertNextLocalizedTextEquals("DeltaSol BX", "DeltaSol BX", "DeltaSol BX");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus V2A [Heating circuit 1]", "DeltaSol BX Plus V2A [Heizkreis 1]", "DeltaSol BX Plus V2A [Heating circuit 1]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus V2A [Heating circuit 2]", "DeltaSol BX Plus V2A [Heizkreis 2]", "DeltaSol BX Plus V2A [Heating circuit 2]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus V2A [Modules]", "DeltaSol BX Plus V2A [Module]", "DeltaSol BX Plus V2A [Modules]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus V2A [Controller]", "DeltaSol BX Plus V2A [Regler]", "DeltaSol BX Plus V2A [Controller]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus V2A [HQM 1]", "DeltaSol BX Plus V2A [WMZ 1]", "DeltaSol BX Plus V2A [HQM 1]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus V2A [HQM 2]", "DeltaSol BX Plus V2A [WMZ 2]", "DeltaSol BX Plus V2A [HQM 2]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Heating circuit #0]", "DeltaSol BX Plus [Heizkreis #0]", "DeltaSol BX Plus [Heating circuit #0]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Heating circuit #10]", "DeltaSol BX Plus [Heizkreis #10]", "DeltaSol BX Plus [Heating circuit #10]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Heating circuit #11]", "DeltaSol BX Plus [Heizkreis #11]", "DeltaSol BX Plus [Heating circuit #11]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Heating circuit #12]", "DeltaSol BX Plus [Heizkreis #12]", "DeltaSol BX Plus [Heating circuit #12]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Heating circuit #13]", "DeltaSol BX Plus [Heizkreis #13]", "DeltaSol BX Plus [Heating circuit #13]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Heating circuit #14]", "DeltaSol BX Plus [Heizkreis #14]", "DeltaSol BX Plus [Heating circuit #14]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Heating circuit #15]", "DeltaSol BX Plus [Heizkreis #15]", "DeltaSol BX Plus [Heating circuit #15]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Heating circuit #1]", "DeltaSol BX Plus [Heizkreis #1]", "DeltaSol BX Plus [Heating circuit #1]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Heating circuit #2]", "DeltaSol BX Plus [Heizkreis #2]", "DeltaSol BX Plus [Heating circuit #2]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Heating circuit #3]", "DeltaSol BX Plus [Heizkreis #3]", "DeltaSol BX Plus [Heating circuit #3]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Heating circuit #4]", "DeltaSol BX Plus [Heizkreis #4]", "DeltaSol BX Plus [Heating circuit #4]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Heating circuit #5]", "DeltaSol BX Plus [Heizkreis #5]", "DeltaSol BX Plus [Heating circuit #5]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Heating circuit #6]", "DeltaSol BX Plus [Heizkreis #6]", "DeltaSol BX Plus [Heating circuit #6]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Heating circuit #7]", "DeltaSol BX Plus [Heizkreis #7]", "DeltaSol BX Plus [Heating circuit #7]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Heating circuit #8]", "DeltaSol BX Plus [Heizkreis #8]", "DeltaSol BX Plus [Heating circuit #8]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Heating circuit #9]", "DeltaSol BX Plus [Heizkreis #9]", "DeltaSol BX Plus [Heating circuit #9]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Heating circuit #]", "DeltaSol BX Plus [Heizkreis #]", "DeltaSol BX Plus [Heating circuit #]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Module #0]", "DeltaSol BX Plus [Modul #0]", "DeltaSol BX Plus [Module #0]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Module #10]", "DeltaSol BX Plus [Modul #10]", "DeltaSol BX Plus [Module #10]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Module #11]", "DeltaSol BX Plus [Modul #11]", "DeltaSol BX Plus [Module #11]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Module #12]", "DeltaSol BX Plus [Modul #12]", "DeltaSol BX Plus [Module #12]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Module #13]", "DeltaSol BX Plus [Modul #13]", "DeltaSol BX Plus [Module #13]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Module #14]", "DeltaSol BX Plus [Modul #14]", "DeltaSol BX Plus [Module #14]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Module #15]", "DeltaSol BX Plus [Modul #15]", "DeltaSol BX Plus [Module #15]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Module #1]", "DeltaSol BX Plus [Modul #1]", "DeltaSol BX Plus [Module #1]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Module #2]", "DeltaSol BX Plus [Modul #2]", "DeltaSol BX Plus [Module #2]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Module #3]", "DeltaSol BX Plus [Modul #3]", "DeltaSol BX Plus [Module #3]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Module #4]", "DeltaSol BX Plus [Modul #4]", "DeltaSol BX Plus [Module #4]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Module #5]", "DeltaSol BX Plus [Modul #5]", "DeltaSol BX Plus [Module #5]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Module #6]", "DeltaSol BX Plus [Modul #6]", "DeltaSol BX Plus [Module #6]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Module #7]", "DeltaSol BX Plus [Modul #7]", "DeltaSol BX Plus [Module #7]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Module #8]", "DeltaSol BX Plus [Modul #8]", "DeltaSol BX Plus [Module #8]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Module #9]", "DeltaSol BX Plus [Modul #9]", "DeltaSol BX Plus [Module #9]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Module #]", "DeltaSol BX Plus [Modul #]", "DeltaSol BX Plus [Module #]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Modules]", "DeltaSol BX Plus [Module]", "DeltaSol BX Plus [Modules]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [Controller]", "DeltaSol BX Plus [Regler]", "DeltaSol BX Plus [Controller]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [HQM #0]", "DeltaSol BX Plus [WMZ #0]", "DeltaSol BX Plus [HQM #0]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [HQM #10]", "DeltaSol BX Plus [WMZ #10]", "DeltaSol BX Plus [HQM #10]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [HQM #11]", "DeltaSol BX Plus [WMZ #11]", "DeltaSol BX Plus [HQM #11]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [HQM #12]", "DeltaSol BX Plus [WMZ #12]", "DeltaSol BX Plus [HQM #12]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [HQM #13]", "DeltaSol BX Plus [WMZ #13]", "DeltaSol BX Plus [HQM #13]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [HQM #14]", "DeltaSol BX Plus [WMZ #14]", "DeltaSol BX Plus [HQM #14]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [HQM #15]", "DeltaSol BX Plus [WMZ #15]", "DeltaSol BX Plus [HQM #15]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [HQM #1]", "DeltaSol BX Plus [WMZ #1]", "DeltaSol BX Plus [HQM #1]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [HQM #2]", "DeltaSol BX Plus [WMZ #2]", "DeltaSol BX Plus [HQM #2]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [HQM #3]", "DeltaSol BX Plus [WMZ #3]", "DeltaSol BX Plus [HQM #3]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [HQM #4]", "DeltaSol BX Plus [WMZ #4]", "DeltaSol BX Plus [HQM #4]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [HQM #5]", "DeltaSol BX Plus [WMZ #5]", "DeltaSol BX Plus [HQM #5]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [HQM #6]", "DeltaSol BX Plus [WMZ #6]", "DeltaSol BX Plus [HQM #6]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [HQM #7]", "DeltaSol BX Plus [WMZ #7]", "DeltaSol BX Plus [HQM #7]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [HQM #8]", "DeltaSol BX Plus [WMZ #8]", "DeltaSol BX Plus [HQM #8]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [HQM #9]", "DeltaSol BX Plus [WMZ #9]", "DeltaSol BX Plus [HQM #9]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Plus [HQM #]", "DeltaSol BX Plus [WMZ #]", "DeltaSol BX Plus [HQM #]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Pro [Controller]", "DeltaSol BX Pro [Regler]", "DeltaSol BX Pro [Controller]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Pro [HQM #0]", "DeltaSol BX Pro [WMZ #0]", "DeltaSol BX Pro [HQM #0]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Pro [HQM #10]", "DeltaSol BX Pro [WMZ #10]", "DeltaSol BX Pro [HQM #10]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Pro [HQM #11]", "DeltaSol BX Pro [WMZ #11]", "DeltaSol BX Pro [HQM #11]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Pro [HQM #12]", "DeltaSol BX Pro [WMZ #12]", "DeltaSol BX Pro [HQM #12]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Pro [HQM #13]", "DeltaSol BX Pro [WMZ #13]", "DeltaSol BX Pro [HQM #13]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Pro [HQM #14]", "DeltaSol BX Pro [WMZ #14]", "DeltaSol BX Pro [HQM #14]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Pro [HQM #15]", "DeltaSol BX Pro [WMZ #15]", "DeltaSol BX Pro [HQM #15]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Pro [HQM #1]", "DeltaSol BX Pro [WMZ #1]", "DeltaSol BX Pro [HQM #1]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Pro [HQM #2]", "DeltaSol BX Pro [WMZ #2]", "DeltaSol BX Pro [HQM #2]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Pro [HQM #3]", "DeltaSol BX Pro [WMZ #3]", "DeltaSol BX Pro [HQM #3]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Pro [HQM #4]", "DeltaSol BX Pro [WMZ #4]", "DeltaSol BX Pro [HQM #4]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Pro [HQM #5]", "DeltaSol BX Pro [WMZ #5]", "DeltaSol BX Pro [HQM #5]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Pro [HQM #6]", "DeltaSol BX Pro [WMZ #6]", "DeltaSol BX Pro [HQM #6]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Pro [HQM #7]", "DeltaSol BX Pro [WMZ #7]", "DeltaSol BX Pro [HQM #7]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Pro [HQM #8]", "DeltaSol BX Pro [WMZ #8]", "DeltaSol BX Pro [HQM #8]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Pro [HQM #9]", "DeltaSol BX Pro [WMZ #9]", "DeltaSol BX Pro [HQM #9]");
		t.assertNextLocalizedTextEquals("DeltaSol BX Pro [HQM #]", "DeltaSol BX Pro [WMZ #]", "DeltaSol BX Pro [HQM #]");
		t.assertNextLocalizedTextEquals("DeltaSol BX WMZ", "DeltaSol BX WMZ", "DeltaSol BX WMZ");
		t.assertNextLocalizedTextEquals("DeltaSol BXL", "DeltaSol BXL", "DeltaSol BXL");
		t.assertNextLocalizedTextEquals("DeltaSol C", "DeltaSol C", "DeltaSol C");
		t.assertNextLocalizedTextEquals("DeltaSol CS Plus", "DeltaSol CS Plus", "DeltaSol CS Plus");
		t.assertNextLocalizedTextEquals("DeltaSol CS Plus 2.x", "DeltaSol CS Plus 2.x", "DeltaSol CS Plus 2.x");
		t.assertNextLocalizedTextEquals("DeltaSol CS2", "DeltaSol CS2", "DeltaSol CS2");
		t.assertNextLocalizedTextEquals("DeltaSol CS4", "DeltaSol CS4", "DeltaSol CS4");
		t.assertNextLocalizedTextEquals("DeltaSol D", "DeltaSol D", "DeltaSol D");
		t.assertNextLocalizedTextEquals("DeltaSol E Fahrenheit [Controller]", "DeltaSol E Fahrenheit [Regler]", "DeltaSol E Fahrenheit [Controller]");
		t.assertNextLocalizedTextEquals("DeltaSol E Fahrenheit [HQM]", "DeltaSol E Fahrenheit [WMZ]", "DeltaSol E Fahrenheit [HQM]");
		t.assertNextLocalizedTextEquals("DeltaSol E SorTech [Controller]", "DeltaSol E SorTech [Regler]", "DeltaSol E SorTech [Controller]");
		t.assertNextLocalizedTextEquals("DeltaSol E V2 HC 1 Concrete drying [Module 1]", "DeltaSol E V2 HK 1 Estrichtrockung [Modul 1]", "DeltaSol E V2 HC 1 Concrete drying [Module 1]");
		t.assertNextLocalizedTextEquals("DeltaSol E V2 HC 2 Concrete drying [Module 2]", "DeltaSol E V2 HK 2 Estrichtrockung [Modul 2]", "DeltaSol E V2 HC 2 Concrete drying [Module 2]");
		t.assertNextLocalizedTextEquals("DeltaSol E V2 HC 3 Concrete drying [Module 3]", "DeltaSol E V2 HK 3 Estrichtrockung [Modul 3]", "DeltaSol E V2 HC 3 Concrete drying [Module 3]");
		t.assertNextLocalizedTextEquals("DeltaSol E V2 HK Estrichtrockung [Lokal]", "DeltaSol E V2 HK Estrichtrockung [Lokal]", "DeltaSol E V2 HK Estrichtrockung [Lokal]");
		t.assertNextLocalizedTextEquals("DeltaSol E V2 [Controller]", "DeltaSol E V2 [Regler]", "DeltaSol E V2 [Controller]");
		t.assertNextLocalizedTextEquals("DeltaSol E V2 [HQM]", "DeltaSol E V2 [WMZ]", "DeltaSol E V2 [HQM]");
		t.assertNextLocalizedTextEquals("DeltaSol E [Controller]", "DeltaSol E [Regler]", "DeltaSol E [Controller]");
		t.assertNextLocalizedTextEquals("DeltaSol E [HQM]", "DeltaSol E [WMZ]", "DeltaSol E [HQM]");
		t.assertNextLocalizedTextEquals("DeltaSol ES", "DeltaSol ES", "DeltaSol ES");
		t.assertNextLocalizedTextEquals("DeltaSol FCS", "DeltaSol FCS", "DeltaSol FCS");
		t.assertNextLocalizedTextEquals("DeltaSol M [HC1]", "DeltaSol M [HK1]", "DeltaSol M [HC1]");
		t.assertNextLocalizedTextEquals("DeltaSol M [HC2]", "DeltaSol M [HK2]", "DeltaSol M [HC2]");
		t.assertNextLocalizedTextEquals("DeltaSol M [Controller]", "DeltaSol M [Regler]", "DeltaSol M [Controller]");
		t.assertNextLocalizedTextEquals("DeltaSol M [Volume]", "DeltaSol M [Volumen]", "DeltaSol M [Volume]");
		t.assertNextLocalizedTextEquals("DeltaSol M [HQM1]", "DeltaSol M [WMZ1]", "DeltaSol M [HQM1]");
		t.assertNextLocalizedTextEquals("DeltaSol M [HQM2]", "DeltaSol M [WMZ2]", "DeltaSol M [HQM2]");
		t.assertNextLocalizedTextEquals("DeltaSol MX - SorTech - eCoo [Controller]", "DeltaSol MX - SorTech - eCoo [Regler]", "DeltaSol MX - SorTech - eCoo [Controller]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Heating circuit #0]", "DeltaSol MX [Heizkreis #0]", "DeltaSol MX [Heating circuit #0]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Heating circuit #10]", "DeltaSol MX [Heizkreis #10]", "DeltaSol MX [Heating circuit #10]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Heating circuit #11]", "DeltaSol MX [Heizkreis #11]", "DeltaSol MX [Heating circuit #11]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Heating circuit #12]", "DeltaSol MX [Heizkreis #12]", "DeltaSol MX [Heating circuit #12]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Heating circuit #13]", "DeltaSol MX [Heizkreis #13]", "DeltaSol MX [Heating circuit #13]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Heating circuit #14]", "DeltaSol MX [Heizkreis #14]", "DeltaSol MX [Heating circuit #14]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Heating circuit #15]", "DeltaSol MX [Heizkreis #15]", "DeltaSol MX [Heating circuit #15]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Heating circuit #1]", "DeltaSol MX [Heizkreis #1]", "DeltaSol MX [Heating circuit #1]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Heating circuit #2]", "DeltaSol MX [Heizkreis #2]", "DeltaSol MX [Heating circuit #2]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Heating circuit #3]", "DeltaSol MX [Heizkreis #3]", "DeltaSol MX [Heating circuit #3]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Heating circuit #4]", "DeltaSol MX [Heizkreis #4]", "DeltaSol MX [Heating circuit #4]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Heating circuit #5]", "DeltaSol MX [Heizkreis #5]", "DeltaSol MX [Heating circuit #5]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Heating circuit #6]", "DeltaSol MX [Heizkreis #6]", "DeltaSol MX [Heating circuit #6]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Heating circuit #7]", "DeltaSol MX [Heizkreis #7]", "DeltaSol MX [Heating circuit #7]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Heating circuit #8]", "DeltaSol MX [Heizkreis #8]", "DeltaSol MX [Heating circuit #8]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Heating circuit #9]", "DeltaSol MX [Heizkreis #9]", "DeltaSol MX [Heating circuit #9]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Heating circuit #]", "DeltaSol MX [Heizkreis #]", "DeltaSol MX [Heating circuit #]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Module #0]", "DeltaSol MX [Modul #0]", "DeltaSol MX [Module #0]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Module #10]", "DeltaSol MX [Modul #10]", "DeltaSol MX [Module #10]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Module #11]", "DeltaSol MX [Modul #11]", "DeltaSol MX [Module #11]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Module #12]", "DeltaSol MX [Modul #12]", "DeltaSol MX [Module #12]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Module #13]", "DeltaSol MX [Modul #13]", "DeltaSol MX [Module #13]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Module #14]", "DeltaSol MX [Modul #14]", "DeltaSol MX [Module #14]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Module #15]", "DeltaSol MX [Modul #15]", "DeltaSol MX [Module #15]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Module #1]", "DeltaSol MX [Modul #1]", "DeltaSol MX [Module #1]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Module #2]", "DeltaSol MX [Modul #2]", "DeltaSol MX [Module #2]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Module #3]", "DeltaSol MX [Modul #3]", "DeltaSol MX [Module #3]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Module #4]", "DeltaSol MX [Modul #4]", "DeltaSol MX [Module #4]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Module #5]", "DeltaSol MX [Modul #5]", "DeltaSol MX [Module #5]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Module #6]", "DeltaSol MX [Modul #6]", "DeltaSol MX [Module #6]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Module #7]", "DeltaSol MX [Modul #7]", "DeltaSol MX [Module #7]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Module #8]", "DeltaSol MX [Modul #8]", "DeltaSol MX [Module #8]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Module #9]", "DeltaSol MX [Modul #9]", "DeltaSol MX [Module #9]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Module #]", "DeltaSol MX [Modul #]", "DeltaSol MX [Module #]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Modules]", "DeltaSol MX [Module]", "DeltaSol MX [Modules]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [Controller]", "DeltaSol MX [Regler]", "DeltaSol MX [Controller]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [HQM #0]", "DeltaSol MX [WMZ #0]", "DeltaSol MX [HQM #0]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [HQM #10]", "DeltaSol MX [WMZ #10]", "DeltaSol MX [HQM #10]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [HQM #11]", "DeltaSol MX [WMZ #11]", "DeltaSol MX [HQM #11]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [HQM #12]", "DeltaSol MX [WMZ #12]", "DeltaSol MX [HQM #12]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [HQM #13]", "DeltaSol MX [WMZ #13]", "DeltaSol MX [HQM #13]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [HQM #14]", "DeltaSol MX [WMZ #14]", "DeltaSol MX [HQM #14]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [HQM #15]", "DeltaSol MX [WMZ #15]", "DeltaSol MX [HQM #15]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [HQM #1]", "DeltaSol MX [WMZ #1]", "DeltaSol MX [HQM #1]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [HQM #2]", "DeltaSol MX [WMZ #2]", "DeltaSol MX [HQM #2]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [HQM #3]", "DeltaSol MX [WMZ #3]", "DeltaSol MX [HQM #3]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [HQM #4]", "DeltaSol MX [WMZ #4]", "DeltaSol MX [HQM #4]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [HQM #5]", "DeltaSol MX [WMZ #5]", "DeltaSol MX [HQM #5]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [HQM #6]", "DeltaSol MX [WMZ #6]", "DeltaSol MX [HQM #6]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [HQM #7]", "DeltaSol MX [WMZ #7]", "DeltaSol MX [HQM #7]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [HQM #8]", "DeltaSol MX [WMZ #8]", "DeltaSol MX [HQM #8]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [HQM #9]", "DeltaSol MX [WMZ #9]", "DeltaSol MX [HQM #9]");
		t.assertNextLocalizedTextEquals("DeltaSol MX [HQM #]", "DeltaSol MX [WMZ #]", "DeltaSol MX [HQM #]");
		t.assertNextLocalizedTextEquals("DeltaSol MiniPool", "DeltaSol MiniPool", "DeltaSol MiniPool");
		t.assertNextLocalizedTextEquals("DeltaSol Plus", "DeltaSol Plus", "DeltaSol Plus");
		t.assertNextLocalizedTextEquals("DeltaSol Pool", "DeltaSol Pool", "DeltaSol Pool");
		t.assertNextLocalizedTextEquals("DeltaSol Pool [HQM]", "DeltaSol Pool [WMZ]", "DeltaSol Pool [HQM]");
		t.assertNextLocalizedTextEquals("DeltaSol Pro", "DeltaSol Pro", "DeltaSol Pro");
		t.assertNextLocalizedTextEquals("DeltaSol SL [Controller]", "DeltaSol SL [Regler]", "DeltaSol SL [Controller]");
		t.assertNextLocalizedTextEquals("DeltaSol SL [HQM1]", "DeltaSol SL [WMZ1]", "DeltaSol SL [HQM1]");
		t.assertNextLocalizedTextEquals("DeltaSol SLL [Controller]", "DeltaSol SLL [Regler]", "DeltaSol SLL [Controller]");
		t.assertNextLocalizedTextEquals("DeltaSol SLL [HQM1]", "DeltaSol SLL [WMZ1]", "DeltaSol SLL [HQM1]");
		t.assertNextLocalizedTextEquals("DeltaSol SLT [Controller]", "DeltaSol SLT [Regler]", "DeltaSol SLT [Controller]");
		t.assertNextLocalizedTextEquals("DeltaSol SLT [HQM #0]", "DeltaSol SLT [WMZ #0]", "DeltaSol SLT [HQM #0]");
		t.assertNextLocalizedTextEquals("DeltaSol SLT [HQM #10]", "DeltaSol SLT [WMZ #10]", "DeltaSol SLT [HQM #10]");
		t.assertNextLocalizedTextEquals("DeltaSol SLT [HQM #11]", "DeltaSol SLT [WMZ #11]", "DeltaSol SLT [HQM #11]");
		t.assertNextLocalizedTextEquals("DeltaSol SLT [HQM #12]", "DeltaSol SLT [WMZ #12]", "DeltaSol SLT [HQM #12]");
		t.assertNextLocalizedTextEquals("DeltaSol SLT [HQM #13]", "DeltaSol SLT [WMZ #13]", "DeltaSol SLT [HQM #13]");
		t.assertNextLocalizedTextEquals("DeltaSol SLT [HQM #14]", "DeltaSol SLT [WMZ #14]", "DeltaSol SLT [HQM #14]");
		t.assertNextLocalizedTextEquals("DeltaSol SLT [HQM #15]", "DeltaSol SLT [WMZ #15]", "DeltaSol SLT [HQM #15]");
		t.assertNextLocalizedTextEquals("DeltaSol SLT [HQM #1]", "DeltaSol SLT [WMZ #1]", "DeltaSol SLT [HQM #1]");
		t.assertNextLocalizedTextEquals("DeltaSol SLT [HQM #2]", "DeltaSol SLT [WMZ #2]", "DeltaSol SLT [HQM #2]");
		t.assertNextLocalizedTextEquals("DeltaSol SLT [HQM #3]", "DeltaSol SLT [WMZ #3]", "DeltaSol SLT [HQM #3]");
		t.assertNextLocalizedTextEquals("DeltaSol SLT [HQM #4]", "DeltaSol SLT [WMZ #4]", "DeltaSol SLT [HQM #4]");
		t.assertNextLocalizedTextEquals("DeltaSol SLT [HQM #5]", "DeltaSol SLT [WMZ #5]", "DeltaSol SLT [HQM #5]");
		t.assertNextLocalizedTextEquals("DeltaSol SLT [HQM #6]", "DeltaSol SLT [WMZ #6]", "DeltaSol SLT [HQM #6]");
		t.assertNextLocalizedTextEquals("DeltaSol SLT [HQM #7]", "DeltaSol SLT [WMZ #7]", "DeltaSol SLT [HQM #7]");
		t.assertNextLocalizedTextEquals("DeltaSol SLT [HQM #8]", "DeltaSol SLT [WMZ #8]", "DeltaSol SLT [HQM #8]");
		t.assertNextLocalizedTextEquals("DeltaSol SLT [HQM #9]", "DeltaSol SLT [WMZ #9]", "DeltaSol SLT [HQM #9]");
		t.assertNextLocalizedTextEquals("DeltaSol SLT [HQM #]", "DeltaSol SLT [WMZ #]", "DeltaSol SLT [HQM #]");
		t.assertNextLocalizedTextEquals("DeltaT-FCT", "DeltaT-FKT", "Fonc. DeltaT");
		t.assertNextLocalizedTextEquals("DeltaTherm FK", "DeltaTherm FK", "DeltaTherm FK");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Heating circuit #0]", "DeltaTherm HC [Heizkreis #0]", "DeltaTherm HC [Heating circuit #0]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Heating circuit #10]", "DeltaTherm HC [Heizkreis #10]", "DeltaTherm HC [Heating circuit #10]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Heating circuit #11]", "DeltaTherm HC [Heizkreis #11]", "DeltaTherm HC [Heating circuit #11]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Heating circuit #12]", "DeltaTherm HC [Heizkreis #12]", "DeltaTherm HC [Heating circuit #12]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Heating circuit #13]", "DeltaTherm HC [Heizkreis #13]", "DeltaTherm HC [Heating circuit #13]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Heating circuit #14]", "DeltaTherm HC [Heizkreis #14]", "DeltaTherm HC [Heating circuit #14]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Heating circuit #15]", "DeltaTherm HC [Heizkreis #15]", "DeltaTherm HC [Heating circuit #15]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Heating circuit #1]", "DeltaTherm HC [Heizkreis #1]", "DeltaTherm HC [Heating circuit #1]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Heating circuit #2]", "DeltaTherm HC [Heizkreis #2]", "DeltaTherm HC [Heating circuit #2]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Heating circuit #3]", "DeltaTherm HC [Heizkreis #3]", "DeltaTherm HC [Heating circuit #3]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Heating circuit #4]", "DeltaTherm HC [Heizkreis #4]", "DeltaTherm HC [Heating circuit #4]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Heating circuit #5]", "DeltaTherm HC [Heizkreis #5]", "DeltaTherm HC [Heating circuit #5]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Heating circuit #6]", "DeltaTherm HC [Heizkreis #6]", "DeltaTherm HC [Heating circuit #6]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Heating circuit #7]", "DeltaTherm HC [Heizkreis #7]", "DeltaTherm HC [Heating circuit #7]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Heating circuit #8]", "DeltaTherm HC [Heizkreis #8]", "DeltaTherm HC [Heating circuit #8]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Heating circuit #9]", "DeltaTherm HC [Heizkreis #9]", "DeltaTherm HC [Heating circuit #9]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Heating circuit #]", "DeltaTherm HC [Heizkreis #]", "DeltaTherm HC [Heating circuit #]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Module #0]", "DeltaTherm HC [Modul #0]", "DeltaTherm HC [Module #0]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Module #10]", "DeltaTherm HC [Modul #10]", "DeltaTherm HC [Module #10]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Module #11]", "DeltaTherm HC [Modul #11]", "DeltaTherm HC [Module #11]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Module #12]", "DeltaTherm HC [Modul #12]", "DeltaTherm HC [Module #12]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Module #13]", "DeltaTherm HC [Modul #13]", "DeltaTherm HC [Module #13]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Module #14]", "DeltaTherm HC [Modul #14]", "DeltaTherm HC [Module #14]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Module #15]", "DeltaTherm HC [Modul #15]", "DeltaTherm HC [Module #15]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Module #1]", "DeltaTherm HC [Modul #1]", "DeltaTherm HC [Module #1]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Module #2]", "DeltaTherm HC [Modul #2]", "DeltaTherm HC [Module #2]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Module #3]", "DeltaTherm HC [Modul #3]", "DeltaTherm HC [Module #3]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Module #4]", "DeltaTherm HC [Modul #4]", "DeltaTherm HC [Module #4]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Module #5]", "DeltaTherm HC [Modul #5]", "DeltaTherm HC [Module #5]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Module #6]", "DeltaTherm HC [Modul #6]", "DeltaTherm HC [Module #6]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Module #7]", "DeltaTherm HC [Modul #7]", "DeltaTherm HC [Module #7]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Module #8]", "DeltaTherm HC [Modul #8]", "DeltaTherm HC [Module #8]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Module #9]", "DeltaTherm HC [Modul #9]", "DeltaTherm HC [Module #9]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Module #]", "DeltaTherm HC [Modul #]", "DeltaTherm HC [Module #]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [Controller]", "DeltaTherm HC [Regler]", "DeltaTherm HC [Controller]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [HQM #0]", "DeltaTherm HC [WMZ #0]", "DeltaTherm HC [HQM #0]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [HQM #10]", "DeltaTherm HC [WMZ #10]", "DeltaTherm HC [HQM #10]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [HQM #11]", "DeltaTherm HC [WMZ #11]", "DeltaTherm HC [HQM #11]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [HQM #12]", "DeltaTherm HC [WMZ #12]", "DeltaTherm HC [HQM #12]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [HQM #13]", "DeltaTherm HC [WMZ #13]", "DeltaTherm HC [HQM #13]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [HQM #14]", "DeltaTherm HC [WMZ #14]", "DeltaTherm HC [HQM #14]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [HQM #15]", "DeltaTherm HC [WMZ #15]", "DeltaTherm HC [HQM #15]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [HQM #1]", "DeltaTherm HC [WMZ #1]", "DeltaTherm HC [HQM #1]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [HQM #2]", "DeltaTherm HC [WMZ #2]", "DeltaTherm HC [HQM #2]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [HQM #3]", "DeltaTherm HC [WMZ #3]", "DeltaTherm HC [HQM #3]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [HQM #4]", "DeltaTherm HC [WMZ #4]", "DeltaTherm HC [HQM #4]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [HQM #5]", "DeltaTherm HC [WMZ #5]", "DeltaTherm HC [HQM #5]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [HQM #6]", "DeltaTherm HC [WMZ #6]", "DeltaTherm HC [HQM #6]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [HQM #7]", "DeltaTherm HC [WMZ #7]", "DeltaTherm HC [HQM #7]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [HQM #8]", "DeltaTherm HC [WMZ #8]", "DeltaTherm HC [HQM #8]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [HQM #9]", "DeltaTherm HC [WMZ #9]", "DeltaTherm HC [HQM #9]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC [HQM #]", "DeltaTherm HC [WMZ #]", "DeltaTherm HC [HQM #]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Heating circuit #0]", "DeltaTherm HC max [Heizkreis #0]", "DeltaTherm HC max [Heating circuit #0]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Heating circuit #10]", "DeltaTherm HC max [Heizkreis #10]", "DeltaTherm HC max [Heating circuit #10]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Heating circuit #11]", "DeltaTherm HC max [Heizkreis #11]", "DeltaTherm HC max [Heating circuit #11]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Heating circuit #12]", "DeltaTherm HC max [Heizkreis #12]", "DeltaTherm HC max [Heating circuit #12]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Heating circuit #13]", "DeltaTherm HC max [Heizkreis #13]", "DeltaTherm HC max [Heating circuit #13]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Heating circuit #14]", "DeltaTherm HC max [Heizkreis #14]", "DeltaTherm HC max [Heating circuit #14]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Heating circuit #15]", "DeltaTherm HC max [Heizkreis #15]", "DeltaTherm HC max [Heating circuit #15]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Heating circuit #1]", "DeltaTherm HC max [Heizkreis #1]", "DeltaTherm HC max [Heating circuit #1]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Heating circuit #2]", "DeltaTherm HC max [Heizkreis #2]", "DeltaTherm HC max [Heating circuit #2]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Heating circuit #3]", "DeltaTherm HC max [Heizkreis #3]", "DeltaTherm HC max [Heating circuit #3]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Heating circuit #4]", "DeltaTherm HC max [Heizkreis #4]", "DeltaTherm HC max [Heating circuit #4]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Heating circuit #5]", "DeltaTherm HC max [Heizkreis #5]", "DeltaTherm HC max [Heating circuit #5]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Heating circuit #6]", "DeltaTherm HC max [Heizkreis #6]", "DeltaTherm HC max [Heating circuit #6]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Heating circuit #7]", "DeltaTherm HC max [Heizkreis #7]", "DeltaTherm HC max [Heating circuit #7]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Heating circuit #8]", "DeltaTherm HC max [Heizkreis #8]", "DeltaTherm HC max [Heating circuit #8]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Heating circuit #9]", "DeltaTherm HC max [Heizkreis #9]", "DeltaTherm HC max [Heating circuit #9]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Heating circuit #]", "DeltaTherm HC max [Heizkreis #]", "DeltaTherm HC max [Heating circuit #]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Module #0]", "DeltaTherm HC max [Modul #0]", "DeltaTherm HC max [Module #0]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Module #10]", "DeltaTherm HC max [Modul #10]", "DeltaTherm HC max [Module #10]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Module #11]", "DeltaTherm HC max [Modul #11]", "DeltaTherm HC max [Module #11]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Module #12]", "DeltaTherm HC max [Modul #12]", "DeltaTherm HC max [Module #12]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Module #13]", "DeltaTherm HC max [Modul #13]", "DeltaTherm HC max [Module #13]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Module #14]", "DeltaTherm HC max [Modul #14]", "DeltaTherm HC max [Module #14]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Module #15]", "DeltaTherm HC max [Modul #15]", "DeltaTherm HC max [Module #15]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Module #1]", "DeltaTherm HC max [Modul #1]", "DeltaTherm HC max [Module #1]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Module #2]", "DeltaTherm HC max [Modul #2]", "DeltaTherm HC max [Module #2]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Module #3]", "DeltaTherm HC max [Modul #3]", "DeltaTherm HC max [Module #3]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Module #4]", "DeltaTherm HC max [Modul #4]", "DeltaTherm HC max [Module #4]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Module #5]", "DeltaTherm HC max [Modul #5]", "DeltaTherm HC max [Module #5]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Module #6]", "DeltaTherm HC max [Modul #6]", "DeltaTherm HC max [Module #6]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Module #7]", "DeltaTherm HC max [Modul #7]", "DeltaTherm HC max [Module #7]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Module #8]", "DeltaTherm HC max [Modul #8]", "DeltaTherm HC max [Module #8]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Module #9]", "DeltaTherm HC max [Modul #9]", "DeltaTherm HC max [Module #9]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Module #]", "DeltaTherm HC max [Modul #]", "DeltaTherm HC max [Module #]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [Controller]", "DeltaTherm HC max [Regler]", "DeltaTherm HC max [Controller]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [HQM #0]", "DeltaTherm HC max [WMZ #0]", "DeltaTherm HC max [HQM #0]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [HQM #10]", "DeltaTherm HC max [WMZ #10]", "DeltaTherm HC max [HQM #10]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [HQM #11]", "DeltaTherm HC max [WMZ #11]", "DeltaTherm HC max [HQM #11]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [HQM #12]", "DeltaTherm HC max [WMZ #12]", "DeltaTherm HC max [HQM #12]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [HQM #13]", "DeltaTherm HC max [WMZ #13]", "DeltaTherm HC max [HQM #13]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [HQM #14]", "DeltaTherm HC max [WMZ #14]", "DeltaTherm HC max [HQM #14]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [HQM #15]", "DeltaTherm HC max [WMZ #15]", "DeltaTherm HC max [HQM #15]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [HQM #1]", "DeltaTherm HC max [WMZ #1]", "DeltaTherm HC max [HQM #1]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [HQM #2]", "DeltaTherm HC max [WMZ #2]", "DeltaTherm HC max [HQM #2]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [HQM #3]", "DeltaTherm HC max [WMZ #3]", "DeltaTherm HC max [HQM #3]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [HQM #4]", "DeltaTherm HC max [WMZ #4]", "DeltaTherm HC max [HQM #4]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [HQM #5]", "DeltaTherm HC max [WMZ #5]", "DeltaTherm HC max [HQM #5]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [HQM #6]", "DeltaTherm HC max [WMZ #6]", "DeltaTherm HC max [HQM #6]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [HQM #7]", "DeltaTherm HC max [WMZ #7]", "DeltaTherm HC max [HQM #7]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [HQM #8]", "DeltaTherm HC max [WMZ #8]", "DeltaTherm HC max [HQM #8]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [HQM #9]", "DeltaTherm HC max [WMZ #9]", "DeltaTherm HC max [HQM #9]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC max [HQM #]", "DeltaTherm HC max [WMZ #]", "DeltaTherm HC max [HQM #]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC mini [Heating circuit 1]", "DeltaTherm HC mini [Heizkreis 1]", "DeltaTherm HC mini [Heating circuit 1]");
		t.assertNextLocalizedTextEquals("DeltaTherm HC mini [Controller]", "DeltaTherm HC mini [Regler]", "DeltaTherm HC mini [Controller]");
		t.assertNextLocalizedTextEquals("DeltaTherm PV", "DeltaTherm PV", "DeltaTherm PV");
		t.assertNextLocalizedTextEquals("Disinf. Phase", "Desinf. Phase", "Phase désinf.");
		t.assertNextLocalizedTextEquals("Disinfection: failed", "Desinfektion: Fehlgeschlagen", "Désinfection : échec");
		t.assertNextLocalizedTextEquals("Disinfection: flow to low", "Desinfektion: Vorlauf zu niedrig", "Désinfection : départ trop basse");
		t.assertNextLocalizedTextEquals("Disinfection backup heating", "Desinfektionsnachheizung", "Chauffage d'appoint désinfection");
		t.assertNextLocalizedTextEquals("Disinfection flushing", "Desinfektionsspülung", "Rinçage désinfection");
		t.assertNextLocalizedTextEquals("Disinfection circulation", "Desinfektionszirkulation", "Circulation désinfection");
		t.assertNextLocalizedTextEquals("Diemasol C", "Diemasol C", "Diemasol C");
		t.assertNextLocalizedTextEquals("Diff. TSs/1h", "Diff. TSs/1h", "Diff. TSs/1h");
		t.assertNextLocalizedTextEquals("Diff. TSs/8h", "Diff. TSs/8h", "Diff. TSs/8h");
		t.assertNextLocalizedTextEquals("Diff. Toutd/24h", "Diff. TUmg/24h", "Diff. Text/24h");
		t.assertNextLocalizedTextEquals("Diffuse radiation", "Diffusstrahlung", "Rayonnement diffus");
		t.assertNextLocalizedTextEquals("Digital Input", "Digital Input", "Entrée numérique");
		t.assertNextLocalizedTextEquals("Digital Sensor #", "Digital Sensor #", "Digital Sensor #");
		t.assertNextLocalizedTextEquals("Digital Sensor #0", "Digital Sensor #0", "Digital Sensor #0");
		t.assertNextLocalizedTextEquals("Digital Sensor #1", "Digital Sensor #1", "Digital Sensor #1");
		t.assertNextLocalizedTextEquals("Digital Sensor #10", "Digital Sensor #10", "Digital Sensor #10");
		t.assertNextLocalizedTextEquals("Digital Sensor #100", "Digital Sensor #100", "Digital Sensor #100");
		t.assertNextLocalizedTextEquals("Digital Sensor #101", "Digital Sensor #101", "Digital Sensor #101");
		t.assertNextLocalizedTextEquals("Digital Sensor #102", "Digital Sensor #102", "Digital Sensor #102");
		t.assertNextLocalizedTextEquals("Digital Sensor #103", "Digital Sensor #103", "Digital Sensor #103");
		t.assertNextLocalizedTextEquals("Digital Sensor #104", "Digital Sensor #104", "Digital Sensor #104");
		t.assertNextLocalizedTextEquals("Digital Sensor #105", "Digital Sensor #105", "Digital Sensor #105");
		t.assertNextLocalizedTextEquals("Digital Sensor #106", "Digital Sensor #106", "Digital Sensor #106");
		t.assertNextLocalizedTextEquals("Digital Sensor #107", "Digital Sensor #107", "Digital Sensor #107");
		t.assertNextLocalizedTextEquals("Digital Sensor #108", "Digital Sensor #108", "Digital Sensor #108");
		t.assertNextLocalizedTextEquals("Digital Sensor #109", "Digital Sensor #109", "Digital Sensor #109");
		t.assertNextLocalizedTextEquals("Digital Sensor #11", "Digital Sensor #11", "Digital Sensor #11");
		t.assertNextLocalizedTextEquals("Digital Sensor #110", "Digital Sensor #110", "Digital Sensor #110");
		t.assertNextLocalizedTextEquals("Digital Sensor #111", "Digital Sensor #111", "Digital Sensor #111");
		t.assertNextLocalizedTextEquals("Digital Sensor #112", "Digital Sensor #112", "Digital Sensor #112");
		t.assertNextLocalizedTextEquals("Digital Sensor #113", "Digital Sensor #113", "Digital Sensor #113");
		t.assertNextLocalizedTextEquals("Digital Sensor #114", "Digital Sensor #114", "Digital Sensor #114");
		t.assertNextLocalizedTextEquals("Digital Sensor #115", "Digital Sensor #115", "Digital Sensor #115");
		t.assertNextLocalizedTextEquals("Digital Sensor #116", "Digital Sensor #116", "Digital Sensor #116");
		t.assertNextLocalizedTextEquals("Digital Sensor #117", "Digital Sensor #117", "Digital Sensor #117");
		t.assertNextLocalizedTextEquals("Digital Sensor #118", "Digital Sensor #118", "Digital Sensor #118");
		t.assertNextLocalizedTextEquals("Digital Sensor #119", "Digital Sensor #119", "Digital Sensor #119");
		t.assertNextLocalizedTextEquals("Digital Sensor #12", "Digital Sensor #12", "Digital Sensor #12");
		t.assertNextLocalizedTextEquals("Digital Sensor #120", "Digital Sensor #120", "Digital Sensor #120");
		t.assertNextLocalizedTextEquals("Digital Sensor #121", "Digital Sensor #121", "Digital Sensor #121");
		t.assertNextLocalizedTextEquals("Digital Sensor #122", "Digital Sensor #122", "Digital Sensor #122");
		t.assertNextLocalizedTextEquals("Digital Sensor #123", "Digital Sensor #123", "Digital Sensor #123");
		t.assertNextLocalizedTextEquals("Digital Sensor #124", "Digital Sensor #124", "Digital Sensor #124");
		t.assertNextLocalizedTextEquals("Digital Sensor #125", "Digital Sensor #125", "Digital Sensor #125");
		t.assertNextLocalizedTextEquals("Digital Sensor #126", "Digital Sensor #126", "Digital Sensor #126");
		t.assertNextLocalizedTextEquals("Digital Sensor #127", "Digital Sensor #127", "Digital Sensor #127");
		t.assertNextLocalizedTextEquals("Digital Sensor #13", "Digital Sensor #13", "Digital Sensor #13");
		t.assertNextLocalizedTextEquals("Digital Sensor #14", "Digital Sensor #14", "Digital Sensor #14");
		t.assertNextLocalizedTextEquals("Digital Sensor #15", "Digital Sensor #15", "Digital Sensor #15");
		t.assertNextLocalizedTextEquals("Digital Sensor #16", "Digital Sensor #16", "Digital Sensor #16");
		t.assertNextLocalizedTextEquals("Digital Sensor #17", "Digital Sensor #17", "Digital Sensor #17");
		t.assertNextLocalizedTextEquals("Digital Sensor #18", "Digital Sensor #18", "Digital Sensor #18");
		t.assertNextLocalizedTextEquals("Digital Sensor #19", "Digital Sensor #19", "Digital Sensor #19");
		t.assertNextLocalizedTextEquals("Digital Sensor #2", "Digital Sensor #2", "Digital Sensor #2");
		t.assertNextLocalizedTextEquals("Digital Sensor #20", "Digital Sensor #20", "Digital Sensor #20");
		t.assertNextLocalizedTextEquals("Digital Sensor #21", "Digital Sensor #21", "Digital Sensor #21");
		t.assertNextLocalizedTextEquals("Digital Sensor #22", "Digital Sensor #22", "Digital Sensor #22");
		t.assertNextLocalizedTextEquals("Digital Sensor #23", "Digital Sensor #23", "Digital Sensor #23");
		t.assertNextLocalizedTextEquals("Digital Sensor #24", "Digital Sensor #24", "Digital Sensor #24");
		t.assertNextLocalizedTextEquals("Digital Sensor #25", "Digital Sensor #25", "Digital Sensor #25");
		t.assertNextLocalizedTextEquals("Digital Sensor #26", "Digital Sensor #26", "Digital Sensor #26");
		t.assertNextLocalizedTextEquals("Digital Sensor #27", "Digital Sensor #27", "Digital Sensor #27");
		t.assertNextLocalizedTextEquals("Digital Sensor #28", "Digital Sensor #28", "Digital Sensor #28");
		t.assertNextLocalizedTextEquals("Digital Sensor #29", "Digital Sensor #29", "Digital Sensor #29");
		t.assertNextLocalizedTextEquals("Digital Sensor #3", "Digital Sensor #3", "Digital Sensor #3");
		t.assertNextLocalizedTextEquals("Digital Sensor #30", "Digital Sensor #30", "Digital Sensor #30");
		t.assertNextLocalizedTextEquals("Digital Sensor #31", "Digital Sensor #31", "Digital Sensor #31");
		t.assertNextLocalizedTextEquals("Digital Sensor #32", "Digital Sensor #32", "Digital Sensor #32");
		t.assertNextLocalizedTextEquals("Digital Sensor #33", "Digital Sensor #33", "Digital Sensor #33");
		t.assertNextLocalizedTextEquals("Digital Sensor #34", "Digital Sensor #34", "Digital Sensor #34");
		t.assertNextLocalizedTextEquals("Digital Sensor #35", "Digital Sensor #35", "Digital Sensor #35");
		t.assertNextLocalizedTextEquals("Digital Sensor #36", "Digital Sensor #36", "Digital Sensor #36");
		t.assertNextLocalizedTextEquals("Digital Sensor #37", "Digital Sensor #37", "Digital Sensor #37");
		t.assertNextLocalizedTextEquals("Digital Sensor #38", "Digital Sensor #38", "Digital Sensor #38");
		t.assertNextLocalizedTextEquals("Digital Sensor #39", "Digital Sensor #39", "Digital Sensor #39");
		t.assertNextLocalizedTextEquals("Digital Sensor #4", "Digital Sensor #4", "Digital Sensor #4");
		t.assertNextLocalizedTextEquals("Digital Sensor #40", "Digital Sensor #40", "Digital Sensor #40");
		t.assertNextLocalizedTextEquals("Digital Sensor #41", "Digital Sensor #41", "Digital Sensor #41");
		t.assertNextLocalizedTextEquals("Digital Sensor #42", "Digital Sensor #42", "Digital Sensor #42");
		t.assertNextLocalizedTextEquals("Digital Sensor #43", "Digital Sensor #43", "Digital Sensor #43");
		t.assertNextLocalizedTextEquals("Digital Sensor #44", "Digital Sensor #44", "Digital Sensor #44");
		t.assertNextLocalizedTextEquals("Digital Sensor #45", "Digital Sensor #45", "Digital Sensor #45");
		t.assertNextLocalizedTextEquals("Digital Sensor #46", "Digital Sensor #46", "Digital Sensor #46");
		t.assertNextLocalizedTextEquals("Digital Sensor #47", "Digital Sensor #47", "Digital Sensor #47");
		t.assertNextLocalizedTextEquals("Digital Sensor #48", "Digital Sensor #48", "Digital Sensor #48");
		t.assertNextLocalizedTextEquals("Digital Sensor #49", "Digital Sensor #49", "Digital Sensor #49");
		t.assertNextLocalizedTextEquals("Digital Sensor #5", "Digital Sensor #5", "Digital Sensor #5");
		t.assertNextLocalizedTextEquals("Digital Sensor #50", "Digital Sensor #50", "Digital Sensor #50");
		t.assertNextLocalizedTextEquals("Digital Sensor #51", "Digital Sensor #51", "Digital Sensor #51");
		t.assertNextLocalizedTextEquals("Digital Sensor #52", "Digital Sensor #52", "Digital Sensor #52");
		t.assertNextLocalizedTextEquals("Digital Sensor #53", "Digital Sensor #53", "Digital Sensor #53");
		t.assertNextLocalizedTextEquals("Digital Sensor #54", "Digital Sensor #54", "Digital Sensor #54");
		t.assertNextLocalizedTextEquals("Digital Sensor #55", "Digital Sensor #55", "Digital Sensor #55");
		t.assertNextLocalizedTextEquals("Digital Sensor #56", "Digital Sensor #56", "Digital Sensor #56");
		t.assertNextLocalizedTextEquals("Digital Sensor #57", "Digital Sensor #57", "Digital Sensor #57");
		t.assertNextLocalizedTextEquals("Digital Sensor #58", "Digital Sensor #58", "Digital Sensor #58");
		t.assertNextLocalizedTextEquals("Digital Sensor #59", "Digital Sensor #59", "Digital Sensor #59");
		t.assertNextLocalizedTextEquals("Digital Sensor #6", "Digital Sensor #6", "Digital Sensor #6");
		t.assertNextLocalizedTextEquals("Digital Sensor #60", "Digital Sensor #60", "Digital Sensor #60");
		t.assertNextLocalizedTextEquals("Digital Sensor #61", "Digital Sensor #61", "Digital Sensor #61");
		t.assertNextLocalizedTextEquals("Digital Sensor #62", "Digital Sensor #62", "Digital Sensor #62");
		t.assertNextLocalizedTextEquals("Digital Sensor #63", "Digital Sensor #63", "Digital Sensor #63");
		t.assertNextLocalizedTextEquals("Digital Sensor #64", "Digital Sensor #64", "Digital Sensor #64");
		t.assertNextLocalizedTextEquals("Digital Sensor #65", "Digital Sensor #65", "Digital Sensor #65");
		t.assertNextLocalizedTextEquals("Digital Sensor #66", "Digital Sensor #66", "Digital Sensor #66");
		t.assertNextLocalizedTextEquals("Digital Sensor #67", "Digital Sensor #67", "Digital Sensor #67");
		t.assertNextLocalizedTextEquals("Digital Sensor #68", "Digital Sensor #68", "Digital Sensor #68");
		t.assertNextLocalizedTextEquals("Digital Sensor #69", "Digital Sensor #69", "Digital Sensor #69");
		t.assertNextLocalizedTextEquals("Digital Sensor #7", "Digital Sensor #7", "Digital Sensor #7");
		t.assertNextLocalizedTextEquals("Digital Sensor #70", "Digital Sensor #70", "Digital Sensor #70");
		t.assertNextLocalizedTextEquals("Digital Sensor #71", "Digital Sensor #71", "Digital Sensor #71");
		t.assertNextLocalizedTextEquals("Digital Sensor #72", "Digital Sensor #72", "Digital Sensor #72");
		t.assertNextLocalizedTextEquals("Digital Sensor #73", "Digital Sensor #73", "Digital Sensor #73");
		t.assertNextLocalizedTextEquals("Digital Sensor #74", "Digital Sensor #74", "Digital Sensor #74");
		t.assertNextLocalizedTextEquals("Digital Sensor #75", "Digital Sensor #75", "Digital Sensor #75");
		t.assertNextLocalizedTextEquals("Digital Sensor #76", "Digital Sensor #76", "Digital Sensor #76");
		t.assertNextLocalizedTextEquals("Digital Sensor #77", "Digital Sensor #77", "Digital Sensor #77");
		t.assertNextLocalizedTextEquals("Digital Sensor #78", "Digital Sensor #78", "Digital Sensor #78");
		t.assertNextLocalizedTextEquals("Digital Sensor #79", "Digital Sensor #79", "Digital Sensor #79");
		t.assertNextLocalizedTextEquals("Digital Sensor #8", "Digital Sensor #8", "Digital Sensor #8");
		t.assertNextLocalizedTextEquals("Digital Sensor #80", "Digital Sensor #80", "Digital Sensor #80");
		t.assertNextLocalizedTextEquals("Digital Sensor #81", "Digital Sensor #81", "Digital Sensor #81");
		t.assertNextLocalizedTextEquals("Digital Sensor #82", "Digital Sensor #82", "Digital Sensor #82");
		t.assertNextLocalizedTextEquals("Digital Sensor #83", "Digital Sensor #83", "Digital Sensor #83");
		t.assertNextLocalizedTextEquals("Digital Sensor #84", "Digital Sensor #84", "Digital Sensor #84");
		t.assertNextLocalizedTextEquals("Digital Sensor #85", "Digital Sensor #85", "Digital Sensor #85");
		t.assertNextLocalizedTextEquals("Digital Sensor #86", "Digital Sensor #86", "Digital Sensor #86");
		t.assertNextLocalizedTextEquals("Digital Sensor #87", "Digital Sensor #87", "Digital Sensor #87");
		t.assertNextLocalizedTextEquals("Digital Sensor #88", "Digital Sensor #88", "Digital Sensor #88");
		t.assertNextLocalizedTextEquals("Digital Sensor #89", "Digital Sensor #89", "Digital Sensor #89");
		t.assertNextLocalizedTextEquals("Digital Sensor #9", "Digital Sensor #9", "Digital Sensor #9");
		t.assertNextLocalizedTextEquals("Digital Sensor #90", "Digital Sensor #90", "Digital Sensor #90");
		t.assertNextLocalizedTextEquals("Digital Sensor #91", "Digital Sensor #91", "Digital Sensor #91");
		t.assertNextLocalizedTextEquals("Digital Sensor #92", "Digital Sensor #92", "Digital Sensor #92");
		t.assertNextLocalizedTextEquals("Digital Sensor #93", "Digital Sensor #93", "Digital Sensor #93");
		t.assertNextLocalizedTextEquals("Digital Sensor #94", "Digital Sensor #94", "Digital Sensor #94");
		t.assertNextLocalizedTextEquals("Digital Sensor #95", "Digital Sensor #95", "Digital Sensor #95");
		t.assertNextLocalizedTextEquals("Digital Sensor #96", "Digital Sensor #96", "Digital Sensor #96");
		t.assertNextLocalizedTextEquals("Digital Sensor #97", "Digital Sensor #97", "Digital Sensor #97");
		t.assertNextLocalizedTextEquals("Digital Sensor #98", "Digital Sensor #98", "Digital Sensor #98");
		t.assertNextLocalizedTextEquals("Digital Sensor #99", "Digital Sensor #99", "Digital Sensor #99");
		t.assertNextLocalizedTextEquals("Digital input 9", "Digitaler Eingang 9", "Entrée numérique 9");
		t.assertNextLocalizedTextEquals("DipSwitch", "DipSwitch", "DipSwitch");
		t.assertNextLocalizedTextEquals("DrainBloC", "DrainBloC", "DrainBloC");
		t.assertNextLocalizedTextEquals("Drainback DeDietrich", "Drainback DeDietrich", "Drainback DeDietrich");
		t.assertNextLocalizedTextEquals("Speed", "Drehzahl", "Vitesse");
		t.assertNextLocalizedTextEquals("Pump speed 1", "Drehzahl 1", "Vitesse 1");
		t.assertNextLocalizedTextEquals("Pump speed 1 R1", "Drehzahl 1 R1", "Vitesse 1 R1");
		t.assertNextLocalizedTextEquals("Pump speed 1 R2", "Drehzahl 1 R2", "Vitesse 1 R2");
		t.assertNextLocalizedTextEquals("Pump speed 1 R3", "Drehzahl 1 R3", "Vitesse 1 R3");
		t.assertNextLocalizedTextEquals("Pump speed 1 R4", "Drehzahl 1 R4", "Vitesse 1 R4");
		t.assertNextLocalizedTextEquals("Pump speed 1 R5", "Drehzahl 1 R5", "Vitesse 1 R5");
		t.assertNextLocalizedTextEquals("Pump speed 2", "Drehzahl 2", "Vitesse 2");
		t.assertNextLocalizedTextEquals("Pump speed 2 R1", "Drehzahl 2 R1", "Vitesse 2 R1");
		t.assertNextLocalizedTextEquals("Pump speed 2 R2", "Drehzahl 2 R2", "Vitesse 2 R2");
		t.assertNextLocalizedTextEquals("Pump speed 2 R3", "Drehzahl 2 R3", "Vitesse 2 R3");
		t.assertNextLocalizedTextEquals("Pump speed 2 R4", "Drehzahl 2 R4", "Vitesse 2 R4");
		t.assertNextLocalizedTextEquals("Pump speed 2 R5", "Drehzahl 2 R5", "Vitesse 2 R5");
		t.assertNextLocalizedTextEquals("Pump speed 3", "Drehzahl 3", "Vitesse 3");
		t.assertNextLocalizedTextEquals("Pump speed A", "Drehzahl A", "Vitesse A");
		t.assertNextLocalizedTextEquals("Pump speed A1", "Drehzahl A1", "Vitesse A1");
		t.assertNextLocalizedTextEquals("Pump speed A2", "Drehzahl A2", "Vitesse A2");
		t.assertNextLocalizedTextEquals("Pump speed A3", "Drehzahl A3", "Vitesse A3");
		t.assertNextLocalizedTextEquals("Pump speed output PWM 1", "Drehzahl Ausgang PWM 1", "Vitesse sortie PWM 1");
		t.assertNextLocalizedTextEquals("Pump speed output PWM 2", "Drehzahl Ausgang PWM 2", "Vitesse sortie PWM 2");
		t.assertNextLocalizedTextEquals("Speed Loading pump", "Drehzahl Ladepumpe", "Vitesse pompe de charge");
		t.assertNextLocalizedTextEquals("Pump speed prim. pump", "Drehzahl Primaerpumpe", "Vitesse pompe primaire");
		t.assertNextLocalizedTextEquals("Pump speed prim. pump", "Drehzahl Primärpumpe", "Vitesse pompe secondaire");
		t.assertNextLocalizedTextEquals("Pump speed pump 1", "Drehzahl Pumpe 1", "Vitesse pompe 1");
		t.assertNextLocalizedTextEquals("Pump speed pump 2", "Drehzahl Pumpe 2", "Vitesse pompe 2");
		t.assertNextLocalizedTextEquals("Pump speed R1", "Drehzahl R1", "Vitesse R1");
		t.assertNextLocalizedTextEquals("Pump speed R10", "Drehzahl R10", "Vitesse R10");
		t.assertNextLocalizedTextEquals("Pump speed R11", "Drehzahl R11", "Vitesse R11");
		t.assertNextLocalizedTextEquals("Pump speed R12", "Drehzahl R12", "Vitesse R12");
		t.assertNextLocalizedTextEquals("Pump speed R13", "Drehzahl R13", "Vitesse R13");
		t.assertNextLocalizedTextEquals("Pump speed R14", "Drehzahl R14", "Vitesse R14");
		t.assertNextLocalizedTextEquals("Pump speed R15", "Drehzahl R15", "Vitesse R15");
		t.assertNextLocalizedTextEquals("Pump speed R16", "Drehzahl R16", "Vitesse R16");
		t.assertNextLocalizedTextEquals("Pump speed R17", "Drehzahl R17", "Vitesse R17");
		t.assertNextLocalizedTextEquals("Pump speed R18", "Drehzahl R18", "Vitesse R18");
		t.assertNextLocalizedTextEquals("Pump speed R19", "Drehzahl R19", "Vitesse R19");
		t.assertNextLocalizedTextEquals("Pump speed R2", "Drehzahl R2", "Vitesse R2");
		t.assertNextLocalizedTextEquals("Pump speed R20", "Drehzahl R20", "Vitesse R20");
		t.assertNextLocalizedTextEquals("Pump speed R21", "Drehzahl R21", "Vitesse R21");
		t.assertNextLocalizedTextEquals("Pump speed R22", "Drehzahl R22", "Vitesse R22");
		t.assertNextLocalizedTextEquals("Pump speed R23", "Drehzahl R23", "Vitesse R23");
		t.assertNextLocalizedTextEquals("Pump speed R24", "Drehzahl R24", "Vitesse R24");
		t.assertNextLocalizedTextEquals("Pump speed R25", "Drehzahl R25", "Vitesse R25");
		t.assertNextLocalizedTextEquals("Pump speed R26", "Drehzahl R26", "Vitesse R26");
		t.assertNextLocalizedTextEquals("Pump speed R27", "Drehzahl R27", "Vitesse R27");
		t.assertNextLocalizedTextEquals("Pump speed R28", "Drehzahl R28", "Vitesse R28");
		t.assertNextLocalizedTextEquals("Pump speed R29", "Drehzahl R29", "Vitesse R29");
		t.assertNextLocalizedTextEquals("Pump speed R3", "Drehzahl R3", "Vitesse R3");
		t.assertNextLocalizedTextEquals("Pump speed R30", "Drehzahl R30", "Vitesse R30");
		t.assertNextLocalizedTextEquals("Pump speed R31", "Drehzahl R31", "Vitesse R31");
		t.assertNextLocalizedTextEquals("Pump speed R32", "Drehzahl R32", "Vitesse R32");
		t.assertNextLocalizedTextEquals("Pump speed R33", "Drehzahl R33", "Vitesse R33");
		t.assertNextLocalizedTextEquals("Pump speed R4", "Drehzahl R4", "Vitesse R4");
		t.assertNextLocalizedTextEquals("Pump speed R5", "Drehzahl R5", "Vitesse R5");
		t.assertNextLocalizedTextEquals("Pump speed R6", "Drehzahl R6", "Vitesse R6");
		t.assertNextLocalizedTextEquals("Pump speed R7", "Drehzahl R7", "Vitesse R7");
		t.assertNextLocalizedTextEquals("Pump speed R8", "Drehzahl R8", "Vitesse R8");
		t.assertNextLocalizedTextEquals("Pump speed R9", "Drehzahl R9", "Vitesse R9");
		t.assertNextLocalizedTextEquals("Pump speed relay", "Drehzahl Relais", "Vitesse relais");
		t.assertNextLocalizedTextEquals("Pump speed relay 1", "Drehzahl Relais 1", "Vitesse relais 1");
		t.assertNextLocalizedTextEquals("Pump speed relay 1 (<= v1.01)", "Drehzahl Relais 1 (<= v1.01)", "Vitesse relais 1 (<= v1.01)");
		t.assertNextLocalizedTextEquals("Pump speed relay 1 (>= v1.02)", "Drehzahl Relais 1 (>= v1.02)", "Vitesse relais 1 (>= v1.02)");
		t.assertNextLocalizedTextEquals("Pump speed relay 1.1", "Drehzahl Relais 1.1", "Vitesse relais 1.1");
		t.assertNextLocalizedTextEquals("Pump speed relay 1.2", "Drehzahl Relais 1.2", "Vitesse relais 1.2");
		t.assertNextLocalizedTextEquals("Pump speed relay 10", "Drehzahl Relais 10", "Vitesse relais 10");
		t.assertNextLocalizedTextEquals("Pump speed relay 11", "Drehzahl Relais 11", "Vitesse relais 11");
		t.assertNextLocalizedTextEquals("Pump speed relay 12", "Drehzahl Relais 12", "Vitesse relais 12");
		t.assertNextLocalizedTextEquals("Pump speed relay 13", "Drehzahl Relais 13", "Vitesse relais 13");
		t.assertNextLocalizedTextEquals("Pump speed relay 14", "Drehzahl Relais 14", "Vitesse relais 14");
		t.assertNextLocalizedTextEquals("Pump speed relay 2", "Drehzahl Relais 2", "Vitesse relais 2");
		t.assertNextLocalizedTextEquals("Pump speed relay 2 (<= v1.01)", "Drehzahl Relais 2 (<= v1.01)", "Vitesse relais 2 (<= v1.01)");
		t.assertNextLocalizedTextEquals("Pump speed relay 2 (>= v1.02)", "Drehzahl Relais 2 (>= v1.02)", "Vitesse relais 2 (>= v1.02)");
		t.assertNextLocalizedTextEquals("Pump speed relay 2.1", "Drehzahl Relais 2.1", "Vitesse relais 2.1");
		t.assertNextLocalizedTextEquals("Pump speed relay 2.2", "Drehzahl Relais 2.2", "Vitesse relais 2.2");
		t.assertNextLocalizedTextEquals("Pump speed relay 3", "Drehzahl Relais 3", "Vitesse relais 3");
		t.assertNextLocalizedTextEquals("Pump speed relay 3.1", "Drehzahl Relais 3.1", "Vitesse relais 3.1");
		t.assertNextLocalizedTextEquals("Pump speed relay 3.2", "Drehzahl Relais 3.2", "Vitesse relais 3.2");
		t.assertNextLocalizedTextEquals("Pump speed relay 4", "Drehzahl Relais 4", "Vitesse relais 4");
		t.assertNextLocalizedTextEquals("Pump speed relay 4.1", "Drehzahl Relais 4.1", "Vitesse relais 4.1");
		t.assertNextLocalizedTextEquals("Pump speed relay 4.2", "Drehzahl Relais 4.2", "Vitesse relais 4.2");
		t.assertNextLocalizedTextEquals("Pump speed relay 5", "Drehzahl Relais 5", "Vitesse relais 5");
		t.assertNextLocalizedTextEquals("Pump speed relay 5.1", "Drehzahl Relais 5.1", "Vitesse relais 5.1");
		t.assertNextLocalizedTextEquals("Pump speed relay 5.2", "Drehzahl Relais 5.2", "Vitesse relais 5.2");
		t.assertNextLocalizedTextEquals("Pump speed relay 6", "Drehzahl Relais 6", "Vitesse relais 6");
		t.assertNextLocalizedTextEquals("Pump speed relay 7", "Drehzahl Relais 7", "Vitesse relais 7");
		t.assertNextLocalizedTextEquals("Pump speed relay 8", "Drehzahl Relais 8", "Vitesse relais 8");
		t.assertNextLocalizedTextEquals("Pump speed relay 9", "Drehzahl Relais 9", "Vitesse relais 9");
		t.assertNextLocalizedTextEquals("Pump speed relay FastOff", "Drehzahl Relais FastOff", "Vitesse relais FastOff");
		t.assertNextLocalizedTextEquals("Pump speed relay Pumpe", "Drehzahl Relais Pumpe", "Vitesse relais pumpe");
		t.assertNextLocalizedTextEquals("Pump speed relay pot.frei", "Drehzahl Relais pot.frei", "Vitesse relais sans pot.");
		t.assertNextLocalizedTextEquals("Pump speed second. pump", "Drehzahl Sekundaerpumpe", "Vitesse pompe secondaire");
		t.assertNextLocalizedTextEquals("Pump speed heat pump", "Drehzahl Wärmepumpe", "Vitesse pompe à chaleur");
		t.assertNextLocalizedTextEquals("Pump speed circulation", "Drehzahl Zirkulation", "Vitesse circulation");
		t.assertNextLocalizedTextEquals("Pump speed circulation pump", "Drehzahl Zirkulationspumpe", "Vitesse pompe de circulation");
		t.assertNextLocalizedTextEquals("Speed 1", "Drehzahl1", "Vitesse 1");
		t.assertNextLocalizedTextEquals("Speed 2", "Drehzahl2", "Vitesse 2");
		t.assertNextLocalizedTextEquals("Pressure", "Druck", "Pression");
		t.assertNextLocalizedTextEquals("Pressure RPS", "Druck RPS", "Pression RPS");
		t.assertNextLocalizedTextEquals("Pressure RPS (S6)", "Druck RPS (S6)", "Pression RPS (S6)");
		t.assertNextLocalizedTextEquals("Pressure sensor 11", "Druck Sensor 11", "Pression sonde 11");
		t.assertNextLocalizedTextEquals("Pressure sensor 12", "Druck Sensor 12", "Pression sonde 12");
		t.assertNextLocalizedTextEquals("Pressure sensor 17", "Druck Sensor 17", "Pression sonde 17");
		t.assertNextLocalizedTextEquals("Pressure sensor 18", "Druck Sensor 18", "Pression sonde 18");
		t.assertNextLocalizedTextEquals("Pressure sensor 19", "Druck Sensor 19", "Pression sonde 19");
		t.assertNextLocalizedTextEquals("Pressure sensor 20", "Druck Sensor 20", "Pression sonde 20");
		t.assertNextLocalizedTextEquals("Pressure sensor Ga1", "Druck Sensor Ga1", "Pression sonde Ga1");
		t.assertNextLocalizedTextEquals("Pressure sensor Ga2", "Druck Sensor Ga2", "Pression sonde Ga2");
		t.assertNextLocalizedTextEquals("Pressure sensor Gds1", "Druck Sensor Gds1", "Pression sonde Gds1");
		t.assertNextLocalizedTextEquals("Pressure sensor Gds2", "Druck Sensor Gds2", "Pression sonde Gds2");
		t.assertNextLocalizedTextEquals("Pressure sensor RPS", "Druck Sensor RPS", "Pression sonde RPS");
		t.assertNextLocalizedTextEquals("Pressure (S6) defective", "Druck(S6) defekt", "Pression (S6) défectueuse");
		t.assertNextLocalizedTextEquals("Flow rate", "Durchfluss", "Débit");
		t.assertNextLocalizedTextEquals("Flow rate FlowRotor", "Durchfluss FlowRotor", "Débit FlowRotor");
		t.assertNextLocalizedTextEquals("Flow rate sensor 10", "Durchfluss Sensor 10", "Débit sonde 10");
		t.assertNextLocalizedTextEquals("Flow rate sensor 5", "Durchfluss Sensor 5", "Débit sonde 5");
		t.assertNextLocalizedTextEquals("Flow rate sensor 8", "Durchfluss Sensor 8", "Sonde de débit 8");
		t.assertNextLocalizedTextEquals("Flow rate sensor DDS", "Durchfluss Sensor DDS", "Débit sonde DDS");
		t.assertNextLocalizedTextEquals("Flow rate sensor VFS/US", "Durchfluss Sensor VFS/US", "Débit sonde VFS/US");
		t.assertNextLocalizedTextEquals("Flow rate V40", "Durchfluss V40", "Débit V40");
		t.assertNextLocalizedTextEquals("Flow rate VFS", "Durchfluss VFS", "Débit VFS");
		t.assertNextLocalizedTextEquals("Flow rate estimated", "Durchfluss erwartet", "Débit estimé");
		t.assertNextLocalizedTextEquals("Flow rate error", "Durchflussfehler", "Erreur débit");
		t.assertNextLocalizedTextEquals("Average pump speed", "DurchschnittsDrehzahl", "Vitesse moyenne");
		t.assertNextLocalizedTextEquals("EC1", "EC1", "EC1");
		t.assertNextLocalizedTextEquals("EEPROM error", "EEPROM-Fehler", "Erreur EEPROM");
		t.assertNextLocalizedTextEquals("EL1", "EL1", "EL1");
		t.assertNextLocalizedTextEquals("EL2/3", "EL2/3", "EL2/3");
		t.assertNextLocalizedTextEquals("EM #", "EM #", "EM #");
		t.assertNextLocalizedTextEquals("EM #0", "EM #0", "EM #0");
		t.assertNextLocalizedTextEquals("EM #1", "EM #1", "EM #1");
		t.assertNextLocalizedTextEquals("EM #10", "EM #10", "EM #10");
		t.assertNextLocalizedTextEquals("EM #11", "EM #11", "EM #11");
		t.assertNextLocalizedTextEquals("EM #12", "EM #12", "EM #12");
		t.assertNextLocalizedTextEquals("EM #13", "EM #13", "EM #13");
		t.assertNextLocalizedTextEquals("EM #14", "EM #14", "EM #14");
		t.assertNextLocalizedTextEquals("EM #15", "EM #15", "EM #15");
		t.assertNextLocalizedTextEquals("EM #2", "EM #2", "EM #2");
		t.assertNextLocalizedTextEquals("EM #3", "EM #3", "EM #3");
		t.assertNextLocalizedTextEquals("EM #4", "EM #4", "EM #4");
		t.assertNextLocalizedTextEquals("EM #5", "EM #5", "EM #5");
		t.assertNextLocalizedTextEquals("EM #6", "EM #6", "EM #6");
		t.assertNextLocalizedTextEquals("EM #7", "EM #7", "EM #7");
		t.assertNextLocalizedTextEquals("EM #8", "EM #8", "EM #8");
		t.assertNextLocalizedTextEquals("EM #9", "EM #9", "EM #9");
		t.assertNextLocalizedTextEquals("EMC software", "EMV-Software", "EMC software");
		t.assertNextLocalizedTextEquals("EMZ/CME", "EMZ/CME", "EMZ/CME");
		t.assertNextLocalizedTextEquals("ERR: Error mask", "ERR: Errormask", "ERR: Erro rmask");
		t.assertNextLocalizedTextEquals("ETHERM", "ETHERM", "ETHERM");
		t.assertNextLocalizedTextEquals("ETHERM 2", "ETHERM 2", "ETHERM 2");
		t.assertNextLocalizedTextEquals("EXT Volt (T-SET):", "EXT-Volt (T-SET):", "EXT-Volt (T-SET):");
		t.assertNextLocalizedTextEquals("Eff. minimum speed", "Eff_Min-Drehzahl", "Vitesse min. eff.");
		t.assertNextLocalizedTextEquals("Incidence angle", "Einfallswinkel", "Angle d'incidence");
		t.assertNextLocalizedTextEquals("Unit", "Einheit", "Unité");
		t.assertNextLocalizedTextEquals("Unit Pressure", "Einheit Druck", "Unité pression");
		t.assertNextLocalizedTextEquals("Unit Flow rate", "Einheit Durchfluss", "Unité débit");
		t.assertNextLocalizedTextEquals("Unit Energy", "Einheit Energie", "Unité énergie");
		t.assertNextLocalizedTextEquals("Unit Power", "Einheit Leistung", "Unité puissance");
		t.assertNextLocalizedTextEquals("Unit Temperature", "Einheit Temperatur", "Unité température");
		t.assertNextLocalizedTextEquals("Switch-on threshold", "Einschaltschwelle", "Seuil d'activation");
		t.assertNextLocalizedTextEquals("Switch-on temperature difference", "Einschalttemperaturdifferenz", "Différence de température d'enclenchement");
		t.assertNextLocalizedTextEquals("Irradiation", "Einstrahlung", "Irradiation");
		t.assertNextLocalizedTextEquals("Irradiation CS", "Einstrahlung CS", "Irradiation CS");
		t.assertNextLocalizedTextEquals("Irradiation sensor", "Einstrahlung Sensor", "Irradiation sonde ");
		t.assertNextLocalizedTextEquals("Irradiation sensor 10", "Einstrahlung Sensor 10", "Irradiation sonde 10");
		t.assertNextLocalizedTextEquals("Irradiation sensor 11", "Einstrahlung Sensor 11", "Irradiation sonde 11");
		t.assertNextLocalizedTextEquals("Irradiation sensor 16", "Einstrahlung Sensor 16", "Irradiation sonde 16");
		t.assertNextLocalizedTextEquals("Irradiation sensor 5", "Einstrahlung Sensor 5", "Sonde d'irradiation 5");
		t.assertNextLocalizedTextEquals("Irradiation sensor 9", "Einstrahlung Sensor 9", "Sonde d'irradiation 9");
		t.assertNextLocalizedTextEquals("Irradiation sensor CS10", "Einstrahlung Sensor CS10", "Irradiation sonde CS10");
		t.assertNextLocalizedTextEquals("Irradiation_1s", "Einstrahlung_1s", "Irradiation_1s");
		t.assertNextLocalizedTextEquals("Energie Gesamt", "Energie Gesamt", "Energie Gesamt");
		t.assertNextLocalizedTextEquals("Energy today", "Energie Heute", "Énergie aujourd'hui");
		t.assertNextLocalizedTextEquals("Underground tank maximum temperature", "Erdspeicher Maximaltemperatur", "Température max. rés. sous-sol");
		t.assertNextLocalizedTextEquals("Underground tank full", "Erdspeicher voll", "Rés. sous-sol rempli");
		t.assertNextLocalizedTextEquals("Error SensorBruch bit 0..31", "Error SensorBruch bit 0..31", "Error SensorBruch bit 0..31");
		t.assertNextLocalizedTextEquals("Error SensorBruch bit 31..63", "Error SensorBruch bit 31..63", "Error SensorBruch bit 31..63");
		t.assertNextLocalizedTextEquals("Error SensorKurzschluss bit 0..31", "Error SensorKurzschluss bit 0..31", "Error SensorKurzschluss bit 0..31");
		t.assertNextLocalizedTextEquals("Error SensorKurzschluss bit 31..63", "Error SensorKurzschluss bit 31..63", "Error SensorKurzschluss bit 31..63");
		t.assertNextLocalizedTextEquals("ErrorMask", "ErrorMask", "MasqueErreur");
		t.assertNextLocalizedTextEquals("Errormask", "Errormask", "Errormask");
		t.assertNextLocalizedTextEquals("External controller release", "Externe Reglerfreigabe", "Autorisation externe régulateur");
		t.assertNextLocalizedTextEquals("External set temperature (T-SET-EXT):", "Externe Solltemperatur (T-SET-EXT):", "Température nominale externe (T-NOM EXT) :");
		t.assertNextLocalizedTextEquals("External set temperature:", "Externe Solltemperatur:", "Température nominale externe :");
		t.assertNextLocalizedTextEquals("Extra filter runtime", "Extra Filterlaufzeit", "Marche prolongée filtre");
		t.assertNextLocalizedTextEquals("Extra filter time", "Extra-Filterzeit", "Temps filtre prolongé");
		t.assertNextLocalizedTextEquals("FRISTA-mix", "FRISTA-mix", "FRISTA-mix");
		t.assertNextLocalizedTextEquals("Error", "Fehler", "Erreur");
		t.assertNextLocalizedTextEquals("Error outdoor sensor", "Fehler Außensensor", "Erreur sonde extérieure");
		t.assertNextLocalizedTextEquals("Error flow switch", "Fehler Flussschalter", "Erreur contacteur de débit");
		t.assertNextLocalizedTextEquals("Error load detection R1", "Fehler Lasterkennung R1", "Erreur détection puisage R1");
		t.assertNextLocalizedTextEquals("Error load detection R2", "Fehler Lasterkennung R2", "Erreur détection puisage R2");
		t.assertNextLocalizedTextEquals("Error load detection R3", "Fehler Lasterkennung R3", "Erreur détection puisage R3");
		t.assertNextLocalizedTextEquals("Error load detection R4", "Fehler Lasterkennung R4", "Erreur détection puisage R4");
		t.assertNextLocalizedTextEquals("Error load detection relay", "Fehler Lasterkennung Relais", "Erreur détection puisage relais");
		t.assertNextLocalizedTextEquals("Error pump", "Fehler Pumpe", "Erreur pompe");
		t.assertNextLocalizedTextEquals("Error S1", "Fehler S1", "Erreur S1");
		t.assertNextLocalizedTextEquals("Error S2", "Fehler S2", "Erreur S2");
		t.assertNextLocalizedTextEquals("Error S3", "Fehler S3", "Erreur S3");
		t.assertNextLocalizedTextEquals("Error S4", "Fehler S4", "Erreur S4");
		t.assertNextLocalizedTextEquals("Error S5", "Fehler S5", "Erreur S5");
		t.assertNextLocalizedTextEquals("Error S6", "Fehler S6", "Erreur S6");
		t.assertNextLocalizedTextEquals("Error S7", "Fehler S7", "Erreur S7");
		t.assertNextLocalizedTextEquals("Error S8", "Fehler S8", "Erreur S8");
		t.assertNextLocalizedTextEquals("Error S9", "Fehler S9", "Erreur S9");
		t.assertNextLocalizedTextEquals("Error solar cell", "Fehler Solarzelle", "Erreur cellule solaire");
		t.assertNextLocalizedTextEquals("Error store sensor", "Fehler Speichersensor", "Erreur sonde réservoir");
		t.assertNextLocalizedTextEquals("Error V40", "Fehler V40", "Erreur V40");
		t.assertNextLocalizedTextEquals("Error heat pump", "Fehler Wärmepumpe", "Erreur pompe à chaleur");
		t.assertNextLocalizedTextEquals("Error info", "Fehler-Info", "Info erreur");
		t.assertNextLocalizedTextEquals("Error info 1", "Fehler-Info 1", "Info erreur 1");
		t.assertNextLocalizedTextEquals("Error info 2", "Fehler-Info 2", "Info erreur 2");
		t.assertNextLocalizedTextEquals("Error info 3", "Fehler-Info 3", "Info erreur 3");
		t.assertNextLocalizedTextEquals("Error info 4", "Fehler-Info 4", "Info erreur 4");
		t.assertNextLocalizedTextEquals("Error mask", "Fehler-Maske", "Masque erreur");
		t.assertNextLocalizedTextEquals("Error: Cancellation heat dump", "Fehler: Abbruch Überwärmeabfuhr", "Erreur : Annulation évacuation de l'excès de chaleur ");
		t.assertNextLocalizedTextEquals("Error: Data memory", "Fehler: Datenspeicher", "Erreur : Mémoire de données");
		t.assertNextLocalizedTextEquals("Error: Real-time clock", "Fehler: Echtzeituhr", "Erreur : Horloge temps réel");
		t.assertNextLocalizedTextEquals("Error: HC cooling below flow minimum temperature", "Fehler: HK-Kühlung unter Vorlaufminimaltemperatur", "Erreur : Refroidissement CC inférieur à la temp. minimale du départ");
		t.assertNextLocalizedTextEquals("Error: Low pressure", "Fehler: Minderdruck", "Erreur : Basse pression");
		t.assertNextLocalizedTextEquals("Error: Module error", "Fehler: Modulfehler", "Erreur : Erreur module");
		t.assertNextLocalizedTextEquals("Error: SD card", "Fehler: SD-Karte", "Erreur : Erreur carte mémoire SD");
		t.assertNextLocalizedTextEquals("Error: Sensor fault", "Fehler: Sensorfehler", "Erreur : Erreur sonde");
		t.assertNextLocalizedTextEquals("Error: Sensor fault or flow rate monitoring", "Fehler: Sensorfehler oder Volumenstromüberwachung", "Erreur : Erreur sonde ou surveillance du débit");
		t.assertNextLocalizedTextEquals("Error: Sensor line short-circuited", "Fehler: Sensorleitung kurzgeschlossen", "Erreur : Câble sonde court-circuit");
		t.assertNextLocalizedTextEquals("Error: Sensor line broken", "Fehler: Sensorleitung unterbrochen", "Erreur : Câble sonde interrompu");
		t.assertNextLocalizedTextEquals("Error: Thermal disinfection cancelled", "Fehler: Thermische Desinfektion abgebrochen", "Erreur : Désinfection thermique annulée");
		t.assertNextLocalizedTextEquals("Error: Flow rate monitoring", "Fehler: Volumstromüberwachung", "Erreur : Surveillance du débit");
		t.assertNextLocalizedTextEquals("Error: Twin pump", "Fehler: Zwillingspumpe", "Erreur : Pompe double");
		t.assertNextLocalizedTextEquals("Error: Overpressure", "Fehler: Überdruck", "Erreur : Surpression");
		t.assertNextLocalizedTextEquals("Error: Overloading protection", "Fehler: Überladeschutz", "Erreur : Protection contre le surchauffe");
		t.assertNextLocalizedTextEquals("Error: ΔT too high", "Fehler: ΔT zu hoch", "Erreur : ΔT trop élevée");
		t.assertNextLocalizedTextEquals("Error code", "Fehlercode", "Code erreur");
		t.assertNextLocalizedTextEquals("Error mask", "Fehlermaske", "Masque erreur");
		t.assertNextLocalizedTextEquals("Error mask (>= v1.02)", "Fehlermaske (>= v1.02)", "Masque erreur (>= v1.02)");
		t.assertNextLocalizedTextEquals("Error message", "Fehlermeldung", "Message d'erreur");
		t.assertNextLocalizedTextEquals("Error number", "Fehlernummer", "Numéro erreur");
		t.assertNextLocalizedTextEquals("Error relay", "Fehlerrelais", "Relais erreur");
		t.assertNextLocalizedTextEquals("Error status", "Fehlerstatus", "Etat erreur");
		t.assertNextLocalizedTextEquals("Remote control", "Fernversteller", "Dispositif de commande à distance");
		t.assertNextLocalizedTextEquals("Filter active", "Filter eingeschaltet", "Filtre actif");
		t.assertNextLocalizedTextEquals("Filter runtime", "Filterlaufzeit", "Temps de filtrage");
		t.assertNextLocalizedTextEquals("Filter runtime today", "Filterlaufzeit heute", "Temps de filtrage aujourd'hui");
		t.assertNextLocalizedTextEquals("Minimum filter runtime", "Filtermin.", "Filtre min.");
		t.assertNextLocalizedTextEquals("Flags", "Flags", "Flags");
		t.assertNextLocalizedTextEquals("Flow V40", "Flow V40", "Débit V40");
		t.assertNextLocalizedTextEquals("FriWa Kaskadenmaster Version 1", "FriWa Kaskadenmaster Version 1", "FriWa Kaskadenmaster Version 1");
		t.assertNextLocalizedTextEquals("DHW production active", "Frischwasserbereitung aktiv", "Production ECS active");
		t.assertNextLocalizedTextEquals("DHW controller", "Frischwasserregler", "DHW controller");
		t.assertNextLocalizedTextEquals("Frista", "Frista", "Frista");
		t.assertNextLocalizedTextEquals("Friwa", "Friwa", "Friwa");
		t.assertNextLocalizedTextEquals("FriwaMini", "FriwaMini", "FriwaMini");
		t.assertNextLocalizedTextEquals("Antifreeze", "Frostschutz", "Antigel");
		t.assertNextLocalizedTextEquals("Antifreeze type", "Frostschutzart", "Type d'antigel");
		t.assertNextLocalizedTextEquals("Antifreeze ratio", "Frostschutzgehalt", "Concentration d'antigel");
		t.assertNextLocalizedTextEquals("Functions", "Funktionen", "Fonctions");
		t.assertNextLocalizedTextEquals("Funktion block 1", "Funktionsblock 1", "Bloc de fonctions 1");
		t.assertNextLocalizedTextEquals("Funktion block 2", "Funktionsblock 2", "Bloc de fonctions 2");
		t.assertNextLocalizedTextEquals("Operating state Off", "Funktionsstatus Aus", "État de fonctionnement Off");
		t.assertNextLocalizedTextEquals("Operating state Ready", "Funktionsstatus Bereit", "État de fonctionnement Prêt");
		t.assertNextLocalizedTextEquals("Operating state Error", "Funktionsstatus Fehler", "État de fonctionnement Erreur");
		t.assertNextLocalizedTextEquals("Operating state Heating", "Funktionsstatus Heizung", "État de fonctionnement Chauffage");
		t.assertNextLocalizedTextEquals("Funktionsstatus Lstg. reduziert", "Funktionsstatus Lstg. reduziert", "Funktionsstatus Lstg. reduziert");
		t.assertNextLocalizedTextEquals("Funktionsstatus Max. Temp.", "Funktionsstatus Max. Temp.", "Funktionsstatus Max. Temp.");
		t.assertNextLocalizedTextEquals("Operating state Max. temp. RE", "Funktionsstatus Max. Temp. RL", "État de fonctionnement Temp. max. RET");
		t.assertNextLocalizedTextEquals("Operating state Max. temp. FL", "Funktionsstatus Max. Temp. VL", "État de fonctionnement Temp. max. DÉP");
		t.assertNextLocalizedTextEquals("Operating state Backup heating", "Funktionsstatus Nachheizung", "État de fonctionnement Chauffage d'appoint");
		t.assertNextLocalizedTextEquals("Function status SmartRemote Load ext.", "Funktionsstatus SmartRemote Verbraucher extern", "État de la fonction SmartRemote Appareil électrique externe");
		t.assertNextLocalizedTextEquals("Function status SmartRemote off", "Funktionsstatus SmartRemote aus", "État de la fonction SmartRemote off");
		t.assertNextLocalizedTextEquals("Function status SmartRemote on", "Funktionsstatus SmartRemote ein", "État de la fonction SmartRemote on");
		t.assertNextLocalizedTextEquals("Operating state Flushing", "Funktionsstatus Spülen", "État de fonctionnement Rinçer");
		t.assertNextLocalizedTextEquals("GF-Display", "GF-Display", "GF-Display");
		t.assertNextLocalizedTextEquals("GFD defective", "GFD defekt", "GFD défectueuse");
		t.assertNextLocalizedTextEquals("Gas/Oil/Pellet stove", "Gas/ÖL/Pelletofen", "Gaz/Fuel/Poêle pellet");
		t.assertNextLocalizedTextEquals("Gas1", "Gas1", "Gaz1");
		t.assertNextLocalizedTextEquals("Total operation", "Gesamtbetrieb", "Fonctionnement total");
		t.assertNextLocalizedTextEquals("Operating hours in total", "Gesamtbetriebsstunden", "Heures de fonctionnement au total");
		t.assertNextLocalizedTextEquals("Volume in total", "Gesamtvolumen", "Volume au total");
		t.assertNextLocalizedTextEquals("Glycol", "Glykol", "Glycol");
		t.assertNextLocalizedTextEquals("H-Day", "H-Day", "Jour H");
		t.assertNextLocalizedTextEquals("HC characteristic curve", "HK-Kennlinie", "CC Courbe de chauffe");
		t.assertNextLocalizedTextEquals("HC pump", "HK-Pumpe", "Pompe CC");
		t.assertNextLocalizedTextEquals("HC status", "HK-Status", "Etat CC");
		t.assertNextLocalizedTextEquals("HC1 operation status", "HK1-Betriebsstatus", "Etat de fonc. CC1");
		t.assertNextLocalizedTextEquals("HC1 status", "HK1-Status", "Etat CC1");
		t.assertNextLocalizedTextEquals("HC1 flow set", "HK1-VL-Soll", "CC1-DE-nom.");
		t.assertNextLocalizedTextEquals("HC2 operation status", "HK2-Betriebsstatus", "Etat de fonc. CC2");
		t.assertNextLocalizedTextEquals("HC2 status", "HK2-Status", "Etat CC2");
		t.assertNextLocalizedTextEquals("HC2 flow set", "HK2-VL-Soll", "CC2-DE-nom.");
		t.assertNextLocalizedTextEquals("HC3 operation status", "HK3-Betriebsstatus", "Etat de fonc. CC3");
		t.assertNextLocalizedTextEquals("HC3 status", "HK3-Status", "Etat CC3");
		t.assertNextLocalizedTextEquals("HC3 flow set", "HK3-VL-Soll", "CC3-DE-nom.");
		t.assertNextLocalizedTextEquals("HKM1 #", "HKM1 #", "HKM1 #");
		t.assertNextLocalizedTextEquals("HKM1 #0", "HKM1 #0", "HKM1 #0");
		t.assertNextLocalizedTextEquals("HKM1 #1", "HKM1 #1", "HKM1 #1");
		t.assertNextLocalizedTextEquals("HKM1 #10", "HKM1 #10", "HKM1 #10");
		t.assertNextLocalizedTextEquals("HKM1 #11", "HKM1 #11", "HKM1 #11");
		t.assertNextLocalizedTextEquals("HKM1 #12", "HKM1 #12", "HKM1 #12");
		t.assertNextLocalizedTextEquals("HKM1 #13", "HKM1 #13", "HKM1 #13");
		t.assertNextLocalizedTextEquals("HKM1 #14", "HKM1 #14", "HKM1 #14");
		t.assertNextLocalizedTextEquals("HKM1 #15", "HKM1 #15", "HKM1 #15");
		t.assertNextLocalizedTextEquals("HKM1 #2", "HKM1 #2", "HKM1 #2");
		t.assertNextLocalizedTextEquals("HKM1 #3", "HKM1 #3", "HKM1 #3");
		t.assertNextLocalizedTextEquals("HKM1 #4", "HKM1 #4", "HKM1 #4");
		t.assertNextLocalizedTextEquals("HKM1 #5", "HKM1 #5", "HKM1 #5");
		t.assertNextLocalizedTextEquals("HKM1 #6", "HKM1 #6", "HKM1 #6");
		t.assertNextLocalizedTextEquals("HKM1 #7", "HKM1 #7", "HKM1 #7");
		t.assertNextLocalizedTextEquals("HKM1 #8", "HKM1 #8", "HKM1 #8");
		t.assertNextLocalizedTextEquals("HKM1 #9", "HKM1 #9", "HKM1 #9");
		t.assertNextLocalizedTextEquals("HKM2 #", "HKM2 #", "HKM2 #");
		t.assertNextLocalizedTextEquals("HKM2 #0", "HKM2 #0", "HKM2 #0");
		t.assertNextLocalizedTextEquals("HKM2 #1", "HKM2 #1", "HKM2 #1");
		t.assertNextLocalizedTextEquals("HKM2 #10", "HKM2 #10", "HKM2 #10");
		t.assertNextLocalizedTextEquals("HKM2 #11", "HKM2 #11", "HKM2 #11");
		t.assertNextLocalizedTextEquals("HKM2 #12", "HKM2 #12", "HKM2 #12");
		t.assertNextLocalizedTextEquals("HKM2 #13", "HKM2 #13", "HKM2 #13");
		t.assertNextLocalizedTextEquals("HKM2 #14", "HKM2 #14", "HKM2 #14");
		t.assertNextLocalizedTextEquals("HKM2 #15", "HKM2 #15", "HKM2 #15");
		t.assertNextLocalizedTextEquals("HKM2 #2", "HKM2 #2", "HKM2 #2");
		t.assertNextLocalizedTextEquals("HKM2 #3", "HKM2 #3", "HKM2 #3");
		t.assertNextLocalizedTextEquals("HKM2 #4", "HKM2 #4", "HKM2 #4");
		t.assertNextLocalizedTextEquals("HKM2 #5", "HKM2 #5", "HKM2 #5");
		t.assertNextLocalizedTextEquals("HKM2 #6", "HKM2 #6", "HKM2 #6");
		t.assertNextLocalizedTextEquals("HKM2 #7", "HKM2 #7", "HKM2 #7");
		t.assertNextLocalizedTextEquals("HKM2 #8", "HKM2 #8", "HKM2 #8");
		t.assertNextLocalizedTextEquals("HKM2 #9", "HKM2 #9", "HKM2 #9");
		t.assertNextLocalizedTextEquals("HR Solar ADVANCED controller [Controller]", "HR Solar ADVANCED controller [Regler]", "HR Solar ADVANCED controller [Controller]");
		t.assertNextLocalizedTextEquals("HR Solar ADVANCED controller [HQM 1]", "HR Solar ADVANCED controller [WMZ 1]", "HR Solar ADVANCED controller [HQM 1]");
		t.assertNextLocalizedTextEquals("HR Solar BASIC controller [Controller]", "HR Solar BASIC controller [Regler]", "HR Solar BASIC controller [Controller]");
		t.assertNextLocalizedTextEquals("HR Solar BASIC controller [HQM 1]", "HR Solar BASIC controller [WMZ 1]", "HR Solar BASIC controller [HQM 1]");
		t.assertNextLocalizedTextEquals("HT Pump", "HT-Pumpe", "Pompe HAT");
		t.assertNextLocalizedTextEquals("HV_A1_IN:", "HV_A1_IN:", "HV_A1_IN:");
		t.assertNextLocalizedTextEquals("HV_A2_IN:", "HV_A2_IN:", "HV_A2_IN:");
		t.assertNextLocalizedTextEquals("HV_OUT:", "HV_OUT:", "HV_OUT:");
		t.assertNextLocalizedTextEquals("Manual operation 1", "Handbetrieb 1", "Mode manuel 1");
		t.assertNextLocalizedTextEquals("Manual operation 2", "Handbetrieb 2", "Mode manuel 2");
		t.assertNextLocalizedTextEquals("Manual mode PWM1", "Handbetrieb PWM1", "Mode manuel PWM1");
		t.assertNextLocalizedTextEquals("Manual mode relay cascade", "Handbetrieb Relais Kaskade", "Mode manuel relais cascade");
		t.assertNextLocalizedTextEquals("Manual operation active", "Handbetrieb aktiv", "Mode manuel actif");
		t.assertNextLocalizedTextEquals("Manual mode relay mixer open", "Handebetrieb Relais Mischer Auf", "Mode manuel vanne mél. ouverte");
		t.assertNextLocalizedTextEquals("Manual mode relay mixer closed", "Handebetrieb Relais Mischer Zu", "Mode manuel vanne mél. fermée");
		t.assertNextLocalizedTextEquals("Manual mode relay pump", "Handebetrieb Relais Pumpe", "Mode manuel relais pompe");
		t.assertNextLocalizedTextEquals("Hardware", "Hardware", "Matériel");
		t.assertNextLocalizedTextEquals("Heating mode:", "Heizmodus:", "Mode chauffage:");
		t.assertNextLocalizedTextEquals("Immersion heater 0 active", "Heizstab 0 aktiv", "Résistance électrique 0 active");
		t.assertNextLocalizedTextEquals("Heizung", "Heizung", "Heizung");
		t.assertNextLocalizedTextEquals("Heating Wh", "Heizung Wh", "Chauffage Wh");
		t.assertNextLocalizedTextEquals("Heating_Heating circuit1_Operating mode", "Heizung_Heizkreis1_Betriebsart", "Chauffage_Circuit de chauffage1_Mode fonc.");
		t.assertNextLocalizedTextEquals("Heating_Heating circuit1_Operating state", "Heizung_Heizkreis1_Betriebsstatus", "Chauffage_Circuit de chauffage1_Etat fonc.");
		t.assertNextLocalizedTextEquals("Heating_Heating circuit1_Boiler starts", "Heizung_Heizkreis1_Brennerstarts", "Chauffage_Circuit de chauffage1_Dém. brûl.");
		t.assertNextLocalizedTextEquals("Heating_Heating circuit1_Tflowset_C", "Heizung_Heizkreis1_TVorlaufSoll_C", "Chauffage_Circuit de chauffage1_Tdép.nom._C");
		t.assertNextLocalizedTextEquals("Heating return temperature (TR)", "Heizungsrücklauf-Temperatur (TR)", "Température retour du chauffage (TR)");
		t.assertNextLocalizedTextEquals("HC_1_T_Flowset", "Hk1_T_VorlSoll", "CC_1_T_Départnom.");
		t.assertNextLocalizedTextEquals("HC_2_T_Flowset", "Hk2_T_VorlSoll", "CC_2_T_Départnom.");
		t.assertNextLocalizedTextEquals("HC_3_T_Flowset", "Hk3_T_VorlSoll", "CC_3_T_Départnom.");
		t.assertNextLocalizedTextEquals("HC_4_T_Flowset", "Hk4_T_VorlSoll", "CC_4_T_Départnom.");
		t.assertNextLocalizedTextEquals("HC_5_T_Flowset", "Hk5_T_VorlSoll", "CC_5_T_Départnom.");
		t.assertNextLocalizedTextEquals("Huber - REGLOfresh / Felix [Controller]", "Huber - REGLOfresh / Felix [Regler]", "Huber - REGLOfresh / Felix [Controller]");
		t.assertNextLocalizedTextEquals("Hydraulics", "Hydraulik", "Hydraulique");
		t.assertNextLocalizedTextEquals("IAM", "IAM", "IAM");
		t.assertNextLocalizedTextEquals("IOC-Modul [Debug-Werte]", "IOC-Modul [Debug-Werte]", "IOC-Modul [Debug-Werte]");
		t.assertNextLocalizedTextEquals("IOC-Modul [Entnahmekreis]", "IOC-Modul [Entnahmekreis]", "IOC-Modul [Entnahmekreis]");
		t.assertNextLocalizedTextEquals("IOC-Modul [Messwerte]", "IOC-Modul [Messwerte]", "IOC-Modul [Messwerte]");
		t.assertNextLocalizedTextEquals("IOC-Modul [Messwerte_1s]", "IOC-Modul [Messwerte_1s]", "IOC-Modul [Messwerte_1s]");
		t.assertNextLocalizedTextEquals("IOC-Modul [Tagesbilanz]", "IOC-Modul [Tagesbilanz]", "IOC-Modul [Tagesbilanz]");
		t.assertNextLocalizedTextEquals("IZEN DTi2", "IZEN DTi2", "IZEN DTi2");
		t.assertNextLocalizedTextEquals("Impulse", "Impulse", "Impulsions");
		t.assertNextLocalizedTextEquals("Impulse 1 V40", "Impulse 1 V40", "Impulsions 1 V40");
		t.assertNextLocalizedTextEquals("Impulse Counter Sensor 1", "Impulse Counter Sensor 1", "Impulse Counter Sensor 1");
		t.assertNextLocalizedTextEquals("Impulse Counter Sensor 2", "Impulse Counter Sensor 2", "Impulse Counter Sensor 2");
		t.assertNextLocalizedTextEquals("Impulse Counter Sensor 3", "Impulse Counter Sensor 3", "Impulse Counter Sensor 3");
		t.assertNextLocalizedTextEquals("Impulse input 1", "Impulseingang 1", "Entrée d'impulsions 1");
		t.assertNextLocalizedTextEquals("Impulse input 2", "Impulseingang 2", "Entrée d'impulsions 2");
		t.assertNextLocalizedTextEquals("Impulse counter 1", "Impulszähler 1", "Compteur impulsions 1");
		t.assertNextLocalizedTextEquals("Impulse counter 1 (Volume 1/2)", "Impulszähler 1 (Volumen 1/2)", "Compteur d'impulsions 1 (volume 1/2)");
		t.assertNextLocalizedTextEquals("Impulse counter 2", "Impulszähler 2", "Compteur impulsions 2");
		t.assertNextLocalizedTextEquals("Impulse counter 2 (Volume 3)", "Impulszähler 2 (Volumen 3)", "Compteur d'impulsions 2 (volume 3)");
		t.assertNextLocalizedTextEquals("Impulse counter 3 (Volume 4)", "Impulszähler 3 (Volumen 4)", "Compteur d'impulsions 3 (volume 4)");
		t.assertNextLocalizedTextEquals("Impulse counter 4 (Volume 5)", "Impulszähler 4 (Volumen 5)", "Compteur d'impulsions 4 (volume 5)");
		t.assertNextLocalizedTextEquals("Impulse counter 5 (Current 1)", "Impulszähler 5 (Strom 1)", "Compteur d'impulsions 5 (courant 1)");
		t.assertNextLocalizedTextEquals("Impulse counter 6 (Current 2)", "Impulszähler 6 (Strom 2)", "Compteur d'impulsions 6 (courant 2)");
		t.assertNextLocalizedTextEquals("Impulse counter 7 (Th. energy 1)", "Impulszähler 7 (th. Energie 1)", "Compteur d'impulsions 7 (énergie th. 1)");
		t.assertNextLocalizedTextEquals("Impulse counter 8 (Th. energy 2)", "Impulszähler 8 (th. Energie 2)", "Compteur d'impulsions 8 (énergie th. 2)");
		t.assertNextLocalizedTextEquals("Impulse counter 9 (Gas 1)", "Impulszähler 9 (Gas 1)", "Compteur d'impulsions 9 (gaz 1)");
		t.assertNextLocalizedTextEquals("Timer info", "Info Schaltuhr", "Info programmateur");
		t.assertNextLocalizedTextEquals("Initialise", "Initalisieren", "Initialiser");
		t.assertNextLocalizedTextEquals("Initialisation", "Initialisierung", "Initialisation");
		t.assertNextLocalizedTextEquals("Internal value", "Interner Wert", "Valeur interne");
		t.assertNextLocalizedTextEquals("Irradiation Sensor 4", "Irradiation Sensor 4", "Irradiation sonde 4");
		t.assertNextLocalizedTextEquals("Year", "Jahr", "Année");
		t.assertNextLocalizedTextEquals("Year:", "Jahr:", "Année :");
		t.assertNextLocalizedTextEquals("KS3", "KS3", "KS3");
		t.assertNextLocalizedTextEquals("Cold start", "Kaltstart", "Dém.froid");
		t.assertNextLocalizedTextEquals("Cold water ", "Kaltwasser", "Eau froide");
		t.assertNextLocalizedTextEquals("Cold water temperature ", "Kaltwassertemperatur", "Température eau froide");
		t.assertNextLocalizedTextEquals("Kaskade BasisAdr", "Kaskade BasisAdr", "Kaskade BasisAdr");
		t.assertNextLocalizedTextEquals("Kaskade Master", "Kaskade Master", "Kaskade Master");
		t.assertNextLocalizedTextEquals("Kaskade Slave  1", "Kaskade Slave  1", "Kaskade Slave  1");
		t.assertNextLocalizedTextEquals("Kaskade Slave  2", "Kaskade Slave  2", "Kaskade Slave  2");
		t.assertNextLocalizedTextEquals("Kaskade Slave  3", "Kaskade Slave  3", "Kaskade Slave  3");
		t.assertNextLocalizedTextEquals("Kaskade Slave  4", "Kaskade Slave  4", "Kaskade Slave  4");
		t.assertNextLocalizedTextEquals("Kaskade Slave  5", "Kaskade Slave  5", "Kaskade Slave  5");
		t.assertNextLocalizedTextEquals("Kaskade Slave  6", "Kaskade Slave  6", "Kaskade Slave  6");
		t.assertNextLocalizedTextEquals("Kaskade Slave  7", "Kaskade Slave  7", "Kaskade Slave  7");
		t.assertNextLocalizedTextEquals("Kaskade Slave  8", "Kaskade Slave  8", "Kaskade Slave  8");
		t.assertNextLocalizedTextEquals("Kaskade Slave  9", "Kaskade Slave  9", "Kaskade Slave  9");
		t.assertNextLocalizedTextEquals("Kaskade Slave 10", "Kaskade Slave 10", "Kaskade Slave 10");
		t.assertNextLocalizedTextEquals("Kaskade Slave 11", "Kaskade Slave 11", "Kaskade Slave 11");
		t.assertNextLocalizedTextEquals("Kaskade Slave 12", "Kaskade Slave 12", "Kaskade Slave 12");
		t.assertNextLocalizedTextEquals("Kaskade Slave 13", "Kaskade Slave 13", "Kaskade Slave 13");
		t.assertNextLocalizedTextEquals("Kaskade Slave 14", "Kaskade Slave 14", "Kaskade Slave 14");
		t.assertNextLocalizedTextEquals("Curve", "Kennlinie", "Courbe");
		t.assertNextLocalizedTextEquals("Core: ", "Kern:", "Kern:");
		t.assertNextLocalizedTextEquals("Kioto BX Plus V2 [Heating circuit 1]", "Kioto BX Plus V2 [Heizkreis 1]", "Kioto BX Plus V2 [Heating circuit 1]");
		t.assertNextLocalizedTextEquals("Kioto BX Plus V2 [Heating circuit 2]", "Kioto BX Plus V2 [Heizkreis 2]", "Kioto BX Plus V2 [Heating circuit 2]");
		t.assertNextLocalizedTextEquals("Kioto BX Plus V2 [Modules]", "Kioto BX Plus V2 [Module]", "Kioto BX Plus V2 [Modules]");
		t.assertNextLocalizedTextEquals("Kioto BX Plus V2 [Controller]", "Kioto BX Plus V2 [Regler]", "Kioto BX Plus V2 [Controller]");
		t.assertNextLocalizedTextEquals("Kioto BX Plus V2 [HQM 1]", "Kioto BX Plus V2 [WMZ 1]", "Kioto BX Plus V2 [HQM 1]");
		t.assertNextLocalizedTextEquals("Kioto BX Plus V2 [HQM 2]", "Kioto BX Plus V2 [WMZ 2]", "Kioto BX Plus V2 [HQM 2]");
		t.assertNextLocalizedTextEquals("Kioto FWS", "Kioto FWS", "Kioto FWS");
		t.assertNextLocalizedTextEquals("Kioto Laderegler", "Kioto Laderegler", "Kioto Laderegler");
		t.assertNextLocalizedTextEquals("Kioto SLM", "Kioto SLM", "Kioto SLM");
		t.assertNextLocalizedTextEquals("Collector", "Kollektor", "Capteur");
		t.assertNextLocalizedTextEquals("Collector antifreeze", "Kollektor-Frostschutz", "Antigel capteur");
		t.assertNextLocalizedTextEquals("Collector minimum temperature", "Kollektor-Minimaltemperatur", "Température minimale capteur");
		t.assertNextLocalizedTextEquals("Collector emergency temperature", "Kollektor-Nottemperatur", "Température sécurité capteur");
		t.assertNextLocalizedTextEquals("Collector temperature (TC)", "Kollektor-Temperatur (TC)", "Température capteur (TC)");
		t.assertNextLocalizedTextEquals("Collector shutdown", "Kollektorabschaltung", "Arrêt du capteur");
		t.assertNextLocalizedTextEquals("Collector cooling", "Kollektorkühlung", "Refroidissement capteur");
		t.assertNextLocalizedTextEquals("Collector minimum", "Kollektorminimal", "Capteur minimal.");
		t.assertNextLocalizedTextEquals("Kälteleistung letzter Zyklus", "Kälteleistung letzter Zyklus", "Kälteleistung letzter Zyklus");
		t.assertNextLocalizedTextEquals("LS", "LS", "LS");
		t.assertNextLocalizedTextEquals("LT Pump", "LT-Pumpe", "Pompe LT");
		t.assertNextLocalizedTextEquals("Ladepumpe", "Ladepumpe", "Ladepumpe");
		t.assertNextLocalizedTextEquals("Loading status", "Ladestatus", "Etat de charge");
		t.assertNextLocalizedTextEquals("Loading temperature", "Ladetemperatur", "Température de charge");
		t.assertNextLocalizedTextEquals("Loading flow rate", "Ladevolumenstrom", "Débit de charge");
		t.assertNextLocalizedTextEquals("Last Impulse Interval Sensor 1", "Last Impulse Interval Sensor 1", "Last Impulse Interval Sonde 1");
		t.assertNextLocalizedTextEquals("Last Impulse Interval Sensor 2", "Last Impulse Interval Sensor 2", "Last Impulse Interval Sonde 2");
		t.assertNextLocalizedTextEquals("Last Impulse Interval Sensor 3", "Last Impulse Interval Sensor 3", "Last Impulse Interval Sonde 3");
		t.assertNextLocalizedTextEquals("Load detection R1", "Lasterkennung R1", "Détection puisage R1");
		t.assertNextLocalizedTextEquals("Load detection R2", "Lasterkennung R2", "Détection puisage R2");
		t.assertNextLocalizedTextEquals("Load detection R3", "Lasterkennung R3", "Détection puisage R3");
		t.assertNextLocalizedTextEquals("Load detection R4", "Lasterkennung R4", "Détection puisage R4");
		t.assertNextLocalizedTextEquals("Load detection Relay", "Lasterkennung Relais", "Détection puisage relais");
		t.assertNextLocalizedTextEquals("Runtime 1 R1", "Laufzeit 1 R1", "Temps de fonc. 1 R1");
		t.assertNextLocalizedTextEquals("Runtime 1 R2", "Laufzeit 1 R2", "Temps de fonc. 1 R2");
		t.assertNextLocalizedTextEquals("Runtime 1 R3", "Laufzeit 1 R3", "Temps de fonc. 1 R3");
		t.assertNextLocalizedTextEquals("Runtime 1 R4", "Laufzeit 1 R4", "Temps de fonc. 1 R4");
		t.assertNextLocalizedTextEquals("Runtime 1 R5", "Laufzeit 1 R5", "Temps de fonc. 1 R5");
		t.assertNextLocalizedTextEquals("Runtime 2 R1", "Laufzeit 2 R1", "Temps de fonc. 2 R1");
		t.assertNextLocalizedTextEquals("Runtime 2 R2", "Laufzeit 2 R2", "Temps de fonc. 2 R2");
		t.assertNextLocalizedTextEquals("Runtime 2 R3", "Laufzeit 2 R3", "Temps de fonc. 2 R3");
		t.assertNextLocalizedTextEquals("Runtime 2 R4", "Laufzeit 2 R4", "Temps de fonc. 2 R4");
		t.assertNextLocalizedTextEquals("Runtime 2 R5", "Laufzeit 2 R5", "Temps de fonc. 2 R5");
		t.assertNextLocalizedTextEquals("Heat pump runtime", "Laufzeit WP", "Temps de fonc. PAC");
		t.assertNextLocalizedTextEquals("Heat pump runtime / 24 h", "Laufzeit WP / 24h", "Temps de fonc. PAC / 24 h");
		t.assertNextLocalizedTextEquals("Leakage", "Leckage", "Fuite");
		t.assertNextLocalizedTextEquals("Power", "Leistung", "Puissance");
		t.assertNextLocalizedTextEquals("Power 2", "Leistung 2", "Puissance 2");
		t.assertNextLocalizedTextEquals("Power 3", "Leistung 3", "Puissance 3");
		t.assertNextLocalizedTextEquals("Power Heating", "Leistung Heizung", "Puissance Chauffage");
		t.assertNextLocalizedTextEquals("Power P,Ko", "Leistung P,Ko", "Puissance P, Cap");
		t.assertNextLocalizedTextEquals("Power P,S", "Leistung P,S", "Puissance P, Rés");
		t.assertNextLocalizedTextEquals("Power Load ext.", "Leistung Verbraucher extern", "Puissance Appareil électrique externe");
		t.assertNextLocalizedTextEquals("Power Excess", "Leistung Überschuss", "Puissance Excédent");
		t.assertNextLocalizedTextEquals("Air density", "Luftdichte", "Masse volumique de l'air");
		t.assertNextLocalizedTextEquals("Air pressure", "Luftdruck", "Pression atmosphérique");
		t.assertNextLocalizedTextEquals("Humidity sensor 17", "Luftfeuchtigkeit Sensor 17", "Humidity sensor 17");
		t.assertNextLocalizedTextEquals("Humidity sensor 18", "Luftfeuchtigkeit Sensor 18", "Humidity sensor 18");
		t.assertNextLocalizedTextEquals("Air duct diamter", "Luftkanal-Querschnitt", "Diamètre conduit à air");
		t.assertNextLocalizedTextEquals("Air flow mass", "Luftstrom-Masse", "Masse écoulement d'air");
		t.assertNextLocalizedTextEquals("Air flow volume", "Luftstrom-Volumen", "Volume écoulement d'air");
		t.assertNextLocalizedTextEquals("M1_A_IN:", "M1_A_IN:", "M1_A_IN:");
		t.assertNextLocalizedTextEquals("M1_A_OUT:", "M1_A_OUT:", "M1_A_OUT:");
		t.assertNextLocalizedTextEquals("M1_E_IN:", "M1_E_IN:", "M1_E_IN:");
		t.assertNextLocalizedTextEquals("M1_E_OUT:", "M1_E_OUT:", "M1_E_OUT:");
		t.assertNextLocalizedTextEquals("M2_A_IN:", "M2_A_IN:", "M2_A_IN:");
		t.assertNextLocalizedTextEquals("M2_A_OUT:", "M2_A_OUT:", "M2_A_OUT:");
		t.assertNextLocalizedTextEquals("M2_E_IN:", "M2_E_IN:", "M2_E_IN:");
		t.assertNextLocalizedTextEquals("M2_E_OUT:", "M2_E_OUT:", "M2_E_OUT:");
		t.assertNextLocalizedTextEquals("MFR [Domestic hot water]", "MFR [Frischwasser]", "MFR [Domestic hot water]");
		t.assertNextLocalizedTextEquals("MFR [Heating circuit #0]", "MFR [Heizkreis #0]", "MFR [Heating circuit #0]");
		t.assertNextLocalizedTextEquals("MFR [Heating circuit #10]", "MFR [Heizkreis #10]", "MFR [Heating circuit #10]");
		t.assertNextLocalizedTextEquals("MFR [Heating circuit #11]", "MFR [Heizkreis #11]", "MFR [Heating circuit #11]");
		t.assertNextLocalizedTextEquals("MFR [Heating circuit #12]", "MFR [Heizkreis #12]", "MFR [Heating circuit #12]");
		t.assertNextLocalizedTextEquals("MFR [Heating circuit #13]", "MFR [Heizkreis #13]", "MFR [Heating circuit #13]");
		t.assertNextLocalizedTextEquals("MFR [Heating circuit #14]", "MFR [Heizkreis #14]", "MFR [Heating circuit #14]");
		t.assertNextLocalizedTextEquals("MFR [Heating circuit #15]", "MFR [Heizkreis #15]", "MFR [Heating circuit #15]");
		t.assertNextLocalizedTextEquals("MFR [Heating circuit #1]", "MFR [Heizkreis #1]", "MFR [Heating circuit #1]");
		t.assertNextLocalizedTextEquals("MFR [Heating circuit #2]", "MFR [Heizkreis #2]", "MFR [Heating circuit #2]");
		t.assertNextLocalizedTextEquals("MFR [Heating circuit #3]", "MFR [Heizkreis #3]", "MFR [Heating circuit #3]");
		t.assertNextLocalizedTextEquals("MFR [Heating circuit #4]", "MFR [Heizkreis #4]", "MFR [Heating circuit #4]");
		t.assertNextLocalizedTextEquals("MFR [Heating circuit #5]", "MFR [Heizkreis #5]", "MFR [Heating circuit #5]");
		t.assertNextLocalizedTextEquals("MFR [Heating circuit #6]", "MFR [Heizkreis #6]", "MFR [Heating circuit #6]");
		t.assertNextLocalizedTextEquals("MFR [Heating circuit #7]", "MFR [Heizkreis #7]", "MFR [Heating circuit #7]");
		t.assertNextLocalizedTextEquals("MFR [Heating circuit #8]", "MFR [Heizkreis #8]", "MFR [Heating circuit #8]");
		t.assertNextLocalizedTextEquals("MFR [Heating circuit #9]", "MFR [Heizkreis #9]", "MFR [Heating circuit #9]");
		t.assertNextLocalizedTextEquals("MFR [Heating circuit #]", "MFR [Heizkreis #]", "MFR [Heating circuit #]");
		t.assertNextLocalizedTextEquals("MFR [Modules]", "MFR [Module]", "MFR [Modules]");
		t.assertNextLocalizedTextEquals("MFR [Controller]", "MFR [Regler]", "MFR [Controller]");
		t.assertNextLocalizedTextEquals("MFR [HQM #0]", "MFR [WMZ #0]", "MFR [HQM #0]");
		t.assertNextLocalizedTextEquals("MFR [HQM #10]", "MFR [WMZ #10]", "MFR [HQM #10]");
		t.assertNextLocalizedTextEquals("MFR [HQM #11]", "MFR [WMZ #11]", "MFR [HQM #11]");
		t.assertNextLocalizedTextEquals("MFR [HQM #12]", "MFR [WMZ #12]", "MFR [HQM #12]");
		t.assertNextLocalizedTextEquals("MFR [HQM #13]", "MFR [WMZ #13]", "MFR [HQM #13]");
		t.assertNextLocalizedTextEquals("MFR [HQM #14]", "MFR [WMZ #14]", "MFR [HQM #14]");
		t.assertNextLocalizedTextEquals("MFR [HQM #15]", "MFR [WMZ #15]", "MFR [HQM #15]");
		t.assertNextLocalizedTextEquals("MFR [HQM #1]", "MFR [WMZ #1]", "MFR [HQM #1]");
		t.assertNextLocalizedTextEquals("MFR [HQM #2]", "MFR [WMZ #2]", "MFR [HQM #2]");
		t.assertNextLocalizedTextEquals("MFR [HQM #3]", "MFR [WMZ #3]", "MFR [HQM #3]");
		t.assertNextLocalizedTextEquals("MFR [HQM #4]", "MFR [WMZ #4]", "MFR [HQM #4]");
		t.assertNextLocalizedTextEquals("MFR [HQM #5]", "MFR [WMZ #5]", "MFR [HQM #5]");
		t.assertNextLocalizedTextEquals("MFR [HQM #6]", "MFR [WMZ #6]", "MFR [HQM #6]");
		t.assertNextLocalizedTextEquals("MFR [HQM #7]", "MFR [WMZ #7]", "MFR [HQM #7]");
		t.assertNextLocalizedTextEquals("MFR [HQM #8]", "MFR [WMZ #8]", "MFR [HQM #8]");
		t.assertNextLocalizedTextEquals("MFR [HQM #9]", "MFR [WMZ #9]", "MFR [HQM #9]");
		t.assertNextLocalizedTextEquals("MFR [HQM #]", "MFR [WMZ #]", "MFR [HQM #]");
		t.assertNextLocalizedTextEquals("MSR44 #", "MSR44 #", "MSR44 #");
		t.assertNextLocalizedTextEquals("MSR44 #0", "MSR44 #0", "MSR44 #0");
		t.assertNextLocalizedTextEquals("MSR44 #1", "MSR44 #1", "MSR44 #1");
		t.assertNextLocalizedTextEquals("MSR44 #10", "MSR44 #10", "MSR44 #10");
		t.assertNextLocalizedTextEquals("MSR44 #11", "MSR44 #11", "MSR44 #11");
		t.assertNextLocalizedTextEquals("MSR44 #12", "MSR44 #12", "MSR44 #12");
		t.assertNextLocalizedTextEquals("MSR44 #13", "MSR44 #13", "MSR44 #13");
		t.assertNextLocalizedTextEquals("MSR44 #14", "MSR44 #14", "MSR44 #14");
		t.assertNextLocalizedTextEquals("MSR44 #15", "MSR44 #15", "MSR44 #15");
		t.assertNextLocalizedTextEquals("MSR44 #2", "MSR44 #2", "MSR44 #2");
		t.assertNextLocalizedTextEquals("MSR44 #3", "MSR44 #3", "MSR44 #3");
		t.assertNextLocalizedTextEquals("MSR44 #4", "MSR44 #4", "MSR44 #4");
		t.assertNextLocalizedTextEquals("MSR44 #5", "MSR44 #5", "MSR44 #5");
		t.assertNextLocalizedTextEquals("MSR44 #6", "MSR44 #6", "MSR44 #6");
		t.assertNextLocalizedTextEquals("MSR44 #7", "MSR44 #7", "MSR44 #7");
		t.assertNextLocalizedTextEquals("MSR44 #8", "MSR44 #8", "MSR44 #8");
		t.assertNextLocalizedTextEquals("MSR44 #9", "MSR44 #9", "MSR44 #9");
		t.assertNextLocalizedTextEquals("MSR65 #", "MSR65 #", "MSR65 #");
		t.assertNextLocalizedTextEquals("MSR65 #0", "MSR65 #0", "MSR65 #0");
		t.assertNextLocalizedTextEquals("MSR65 #1", "MSR65 #1", "MSR65 #1");
		t.assertNextLocalizedTextEquals("MSR65 #10", "MSR65 #10", "MSR65 #10");
		t.assertNextLocalizedTextEquals("MSR65 #11", "MSR65 #11", "MSR65 #11");
		t.assertNextLocalizedTextEquals("MSR65 #12", "MSR65 #12", "MSR65 #12");
		t.assertNextLocalizedTextEquals("MSR65 #13", "MSR65 #13", "MSR65 #13");
		t.assertNextLocalizedTextEquals("MSR65 #14", "MSR65 #14", "MSR65 #14");
		t.assertNextLocalizedTextEquals("MSR65 #15", "MSR65 #15", "MSR65 #15");
		t.assertNextLocalizedTextEquals("MSR65 #2", "MSR65 #2", "MSR65 #2");
		t.assertNextLocalizedTextEquals("MSR65 #3", "MSR65 #3", "MSR65 #3");
		t.assertNextLocalizedTextEquals("MSR65 #4", "MSR65 #4", "MSR65 #4");
		t.assertNextLocalizedTextEquals("MSR65 #5", "MSR65 #5", "MSR65 #5");
		t.assertNextLocalizedTextEquals("MSR65 #6", "MSR65 #6", "MSR65 #6");
		t.assertNextLocalizedTextEquals("MSR65 #7", "MSR65 #7", "MSR65 #7");
		t.assertNextLocalizedTextEquals("MSR65 #8", "MSR65 #8", "MSR65 #8");
		t.assertNextLocalizedTextEquals("MSR65 #9", "MSR65 #9", "MSR65 #9");
		t.assertNextLocalizedTextEquals("MT Pump", "MT-Pumpe", "Pompe MT");
		t.assertNextLocalizedTextEquals("MWh", "MWh", "MWh");
		t.assertNextLocalizedTextEquals("Mask cancelled TD", "Maske abgebrochene TD", "Masque DT annulée");
		t.assertNextLocalizedTextEquals("Mask successful TD", "Maske erfolgreiche TD", "Masque DT avec succès");
		t.assertNextLocalizedTextEquals("Master / Station 1 vorhanden", "Master / Station 1 vorhanden", "Master / Station 1 vorhanden");
		t.assertNextLocalizedTextEquals("Master: Fehlermaske", "Master: Fehlermaske", "Master: Fehlermaske");
		t.assertNextLocalizedTextEquals("Master: Primärpumpe Betriebssekunden", "Master: Primärpumpe Betriebssekunden", "Master: Primärpumpe Betriebssekunden");
		t.assertNextLocalizedTextEquals("Master: Primärpumpe Drehzahl", "Master: Primärpumpe Drehzahl", "Master: Primärpumpe Drehzahl");
		t.assertNextLocalizedTextEquals("Master: Reglervariante", "Master: Reglervariante", "Master: Reglervariante");
		t.assertNextLocalizedTextEquals("Master: Stationsbetriebssekunden", "Master: Stationsbetriebssekunden", "Master: Stationsbetriebssekunden");
		t.assertNextLocalizedTextEquals("Master: Status", "Master: Status", "Master: Status");
		t.assertNextLocalizedTextEquals("Master: Strangventil Zustand", "Master: Strangventil Zustand", "Master: Strangventil Zustand");
		t.assertNextLocalizedTextEquals("Master: T-KW", "Master: T-KW", "Master: T-KW");
		t.assertNextLocalizedTextEquals("Master: T-SpVL", "Master: T-SpVL", "Master: T-SpVL");
		t.assertNextLocalizedTextEquals("Master: T-WW", "Master: T-WW", "Master: T-WW");
		t.assertNextLocalizedTextEquals("Master: Version", "Master: Version", "Master: Version");
		t.assertNextLocalizedTextEquals("Master: Volumenstrom", "Master: Volumenstrom", "Master: Volumenstrom");
		t.assertNextLocalizedTextEquals("Message relay", "Melderelais", "Relais avertisseur");
		t.assertNextLocalizedTextEquals("Message", "Meldung", "Message");
		t.assertNextLocalizedTextEquals("Messages", "Meldungen", "Messages");
		t.assertNextLocalizedTextEquals("Sensor temperature (TM)", "Messfühler-Temperatur (TM)", "Température sonde TM");
		t.assertNextLocalizedTextEquals("Midi Pro", "Midi Pro", "Midi Pro");
		t.assertNextLocalizedTextEquals("Minorversion", "Minorversion", "Minorversion");
		t.assertNextLocalizedTextEquals("Mixer open", "Mischer Auf", "Vanne mélangeuse ouverte");
		t.assertNextLocalizedTextEquals("Mixer command", "Mischer Befehl", "Commande vanne mélangeuse");
		t.assertNextLocalizedTextEquals("Mixer closed", "Mischer Zu", "Vanne mélangeuse fermée");
		t.assertNextLocalizedTextEquals("Mixer open", "Mischer auf", "Vanne mél. ouverte");
		t.assertNextLocalizedTextEquals("Mixer dT", "Mischer dT", "Vanne mél. dT");
		t.assertNextLocalizedTextEquals("Mixer closed", "Mischer zu", "Vanne mél. fermée");
		t.assertNextLocalizedTextEquals("Mixer runtime", "Mischerlaufzeit", "Temps de fonc. vanne mél.");
		t.assertNextLocalizedTextEquals("Mixer break time", "Mischerpausenzeit", "Pause vanne mél.");
		t.assertNextLocalizedTextEquals("Mixing valve", "Mischventil", "Vanne mélangeuse");
		t.assertNextLocalizedTextEquals("Module status", "Modulstatus", "Etat module");
		t.assertNextLocalizedTextEquals("Module version", "Modulversion", "Version module");
		t.assertNextLocalizedTextEquals("Month", "Monat", "Mois");
		t.assertNextLocalizedTextEquals("Month:", "Monat:", "Mois :");
		t.assertNextLocalizedTextEquals("Multitronic [Controller]", "Multitronic [Regler]", "Multitronic [Controller]");
		t.assertNextLocalizedTextEquals("Multitronic [HQM]", "Multitronic [WMZ]", "Multitronic [HQM]");
		t.assertNextLocalizedTextEquals("BH demand", "NH-Anforderung", "Demande CA");
		t.assertNextLocalizedTextEquals("NH1", "NH1", "NH1");
		t.assertNextLocalizedTextEquals("NH2", "NH2", "NH2");
		t.assertNextLocalizedTextEquals("Backup heating", "Nachheizung", "Chauffage d'appoint");
		t.assertNextLocalizedTextEquals("Backup heating normal", "Nachhzg normal", "Chauffage app. normal");
		t.assertNextLocalizedTextEquals("Overrun", "Nachlauf", "Marche prolongée");
		t.assertNextLocalizedTextEquals("Night correction", "Nachtabsenkung", "Abaissement de nuit");
		t.assertNextLocalizedTextEquals("Night circulation", "Nachtumwälzung", "Circulation nocturne");
		t.assertNextLocalizedTextEquals("Restarts", "Neustarts", "Redémarrages");
		t.assertNextLocalizedTextEquals("Emergency operation active", "Notbetrieb aktiv", "Fonc. urgence actif");
		t.assertNextLocalizedTextEquals("Noventec Übergabestation [Controller]", "Noventec Übergabestation [Regler]", "Noventec Übergabestation [Controller]");
		t.assertNextLocalizedTextEquals("Number last cancelled TD", "Nummer letzte abgebrochene TD", "Numéro dernière DT annulée");
		t.assertNextLocalizedTextEquals("Number last successful TD", "Nummer letzte erfolgreiche TD", "Numéro dernière DT avec succès");
		t.assertNextLocalizedTextEquals("Boiler temperature", "Ofen Kesseltemp", "Température chaudière");
		t.assertNextLocalizedTextEquals("Offset Sensor 1", "Offset Sensor 1", "Offset sonde 1");
		t.assertNextLocalizedTextEquals("Offset Sensor 2", "Offset Sensor 2", "Offset sonde 2");
		t.assertNextLocalizedTextEquals("Offset Sensor 3", "Offset Sensor 3", "Offset sonde 3");
		t.assertNextLocalizedTextEquals("Offset Sensor 4", "Offset Sensor 4", "Offset sonde 4");
		t.assertNextLocalizedTextEquals("Offset Sensor 5", "Offset Sensor 5", "Offset sonde 5");
		t.assertNextLocalizedTextEquals("Offset Sensor 6", "Offset Sensor 6", "Offset sonde 6");
		t.assertNextLocalizedTextEquals("Option collector frost", "Option Kollektor Frost", "Option capteur antigel");
		t.assertNextLocalizedTextEquals("Option collector max.", "Option Kollektor Max.", "Option capteur max.");
		t.assertNextLocalizedTextEquals("Option collector min.", "Option Kollektor Min.", "Option capteur min.");
		t.assertNextLocalizedTextEquals("Option afterheating", "Option Nachheizung", "Option chauffage d'appoint");
		t.assertNextLocalizedTextEquals("Option emergency operation active", "Option Notbetrieb aktiv", "Option fonc. urgence active");
		t.assertNextLocalizedTextEquals("Option PostPulse", "Option PostPulse", "Option PostPulse");
		t.assertNextLocalizedTextEquals("Option tube collector", "Option Röhrenkollektor", "Option capteurs tubulaires");
		t.assertNextLocalizedTextEquals("Option recooling", "Option Rückkühlung", "Option refroidissement par circulation de retour");
		t.assertNextLocalizedTextEquals("Option thermostat", "Option Thermostat", "Option thermostat");
		t.assertNextLocalizedTextEquals("Option HQM", "Option WMZ", "Option calorimètre");
		t.assertNextLocalizedTextEquals("Option circulation active", "Option Zirkulation aktiv", "Option circulation active");
		t.assertNextLocalizedTextEquals("Option: Frost protection function", "Option: Frostschutzfunktion", "Option: Fonction antigel");
		t.assertNextLocalizedTextEquals("Option: collector cooling", "Option: Kollektorkühlung", "Option: Refroidissement du capteur");
		t.assertNextLocalizedTextEquals("Option: collector minimum limitation", "Option: Kollektorminimalbegrenzung", "Option: Limitation minimale du capteur");
		t.assertNextLocalizedTextEquals("Option: tube collector function", "Option: Röhrenkollektorfunktion", "Option: Fonc. capteurs tubulaires");
		t.assertNextLocalizedTextEquals("Option: recooling", "Option: Rückkühlung", "Option: Refroidissement par circulation de retour");
		t.assertNextLocalizedTextEquals("Option: heat quantity measurement", "Option: Wärmemengenzählung", "Option: Bilan calorimétrique");
		t.assertNextLocalizedTextEquals("Options", "Optionen", "Options");
		t.assertNextLocalizedTextEquals("Options: 2. collector valve", "Optionen: 2. Kollektor-Ventil", "Options: 2. vanne capteur");
		t.assertNextLocalizedTextEquals("Options: boiler loading", "Optionen: Boilerladung", "Options: Chauffage du réservoir");
		t.assertNextLocalizedTextEquals("Options: external HX", "Optionen: Externer WT", "Options: ECH externe");
		t.assertNextLocalizedTextEquals("Options: frost protection", "Optionen: Frostschutz", "Options: Antigel");
		t.assertNextLocalizedTextEquals("Options: collector cooling", "Optionen: Kollektorkühlung", "Options: Refroidissement capteur");
		t.assertNextLocalizedTextEquals("Options: minimal", "Optionen: Minimal", "Options: Minimal.");
		t.assertNextLocalizedTextEquals("Options: afterheating", "Optionen: Nachheizung", "Options: Chauffage d'appoint");
		t.assertNextLocalizedTextEquals("Options: tube collector", "Optionen: Röhrenkollektor", "Options: Capteurs tubulaires");
		t.assertNextLocalizedTextEquals("Options: recooling", "Optionen: Rückkühlung", "Options: Refroidissement par circulation de retour");
		t.assertNextLocalizedTextEquals("Options: return preheating", "Optionen: Rücklaufanhebung", "Options: Augmentation de la température de retour");
		t.assertNextLocalizedTextEquals("Options: solar cell", "Optionen: Solarzelle", "Options: Cellule solaire");
		t.assertNextLocalizedTextEquals("Options: valve", "Optionen: Ventil", "Options: Vanne");
		t.assertNextLocalizedTextEquals("Options: HQM", "Optionen: WMZ", "Options: Calorimètre");
		t.assertNextLocalizedTextEquals("Oranier HK [Controller]", "Oranier HK [Regler]", "Oranier HK [Controller]");
		t.assertNextLocalizedTextEquals("Oranier HK [HQM1]", "Oranier HK [WMZ1]", "Oranier HK [HQM1]");
		t.assertNextLocalizedTextEquals("Oventrop RQ-B XXL", "Oventrop RQ-B XXL", "Oventrop RQ-B XXL");
		t.assertNextLocalizedTextEquals("P,Ko nominal power", "P,Ko Nennleistung", "P,Cap puissance nominale");
		t.assertNextLocalizedTextEquals("P1", "P1", "P1");
		t.assertNextLocalizedTextEquals("P1S", "P1S", "P1Rés");
		t.assertNextLocalizedTextEquals("P2", "P2", "P2");
		t.assertNextLocalizedTextEquals("PAW Kaskade BasisAdr", "PAW Kaskade BasisAdr", "PAW Kaskade BasisAdr");
		t.assertNextLocalizedTextEquals("PAW Kaskade Master", "PAW Kaskade Master", "PAW Kaskade Master");
		t.assertNextLocalizedTextEquals("PAW Kaskade Slave  1", "PAW Kaskade Slave  1", "PAW Kaskade Slave  1");
		t.assertNextLocalizedTextEquals("PAW Kaskade Slave  2", "PAW Kaskade Slave  2", "PAW Kaskade Slave  2");
		t.assertNextLocalizedTextEquals("PAW Kaskade Slave  3", "PAW Kaskade Slave  3", "PAW Kaskade Slave  3");
		t.assertNextLocalizedTextEquals("PAW Kaskade Slave  4", "PAW Kaskade Slave  4", "PAW Kaskade Slave  4");
		t.assertNextLocalizedTextEquals("PAW Kaskade Slave  5", "PAW Kaskade Slave  5", "PAW Kaskade Slave  5");
		t.assertNextLocalizedTextEquals("PAW Kaskade Slave  6", "PAW Kaskade Slave  6", "PAW Kaskade Slave  6");
		t.assertNextLocalizedTextEquals("PAW Kaskade Slave  7", "PAW Kaskade Slave  7", "PAW Kaskade Slave  7");
		t.assertNextLocalizedTextEquals("PAW Kaskade Slave  8", "PAW Kaskade Slave  8", "PAW Kaskade Slave  8");
		t.assertNextLocalizedTextEquals("PAW Kaskade Slave  9", "PAW Kaskade Slave  9", "PAW Kaskade Slave  9");
		t.assertNextLocalizedTextEquals("PAW Kaskade Slave 10", "PAW Kaskade Slave 10", "PAW Kaskade Slave 10");
		t.assertNextLocalizedTextEquals("PAW Kaskade Slave 11", "PAW Kaskade Slave 11", "PAW Kaskade Slave 11");
		t.assertNextLocalizedTextEquals("PAW Kaskade Slave 12", "PAW Kaskade Slave 12", "PAW Kaskade Slave 12");
		t.assertNextLocalizedTextEquals("PAW Kaskade Slave 13", "PAW Kaskade Slave 13", "PAW Kaskade Slave 13");
		t.assertNextLocalizedTextEquals("PAW Kaskade Slave 14", "PAW Kaskade Slave 14", "PAW Kaskade Slave 14");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Heating circuit #0]", "PAW SOLEX SC5.14 [Heizkreis #0]", "PAW SOLEX SC5.14 [Heating circuit #0]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Heating circuit #10]", "PAW SOLEX SC5.14 [Heizkreis #10]", "PAW SOLEX SC5.14 [Heating circuit #10]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Heating circuit #11]", "PAW SOLEX SC5.14 [Heizkreis #11]", "PAW SOLEX SC5.14 [Heating circuit #11]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Heating circuit #12]", "PAW SOLEX SC5.14 [Heizkreis #12]", "PAW SOLEX SC5.14 [Heating circuit #12]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Heating circuit #13]", "PAW SOLEX SC5.14 [Heizkreis #13]", "PAW SOLEX SC5.14 [Heating circuit #13]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Heating circuit #14]", "PAW SOLEX SC5.14 [Heizkreis #14]", "PAW SOLEX SC5.14 [Heating circuit #14]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Heating circuit #15]", "PAW SOLEX SC5.14 [Heizkreis #15]", "PAW SOLEX SC5.14 [Heating circuit #15]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Heating circuit #1]", "PAW SOLEX SC5.14 [Heizkreis #1]", "PAW SOLEX SC5.14 [Heating circuit #1]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Heating circuit #2]", "PAW SOLEX SC5.14 [Heizkreis #2]", "PAW SOLEX SC5.14 [Heating circuit #2]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Heating circuit #3]", "PAW SOLEX SC5.14 [Heizkreis #3]", "PAW SOLEX SC5.14 [Heating circuit #3]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Heating circuit #4]", "PAW SOLEX SC5.14 [Heizkreis #4]", "PAW SOLEX SC5.14 [Heating circuit #4]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Heating circuit #5]", "PAW SOLEX SC5.14 [Heizkreis #5]", "PAW SOLEX SC5.14 [Heating circuit #5]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Heating circuit #6]", "PAW SOLEX SC5.14 [Heizkreis #6]", "PAW SOLEX SC5.14 [Heating circuit #6]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Heating circuit #7]", "PAW SOLEX SC5.14 [Heizkreis #7]", "PAW SOLEX SC5.14 [Heating circuit #7]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Heating circuit #8]", "PAW SOLEX SC5.14 [Heizkreis #8]", "PAW SOLEX SC5.14 [Heating circuit #8]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Heating circuit #9]", "PAW SOLEX SC5.14 [Heizkreis #9]", "PAW SOLEX SC5.14 [Heating circuit #9]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Heating circuit #]", "PAW SOLEX SC5.14 [Heizkreis #]", "PAW SOLEX SC5.14 [Heating circuit #]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Modules]", "PAW SOLEX SC5.14 [Module]", "PAW SOLEX SC5.14 [Modules]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [Controller]", "PAW SOLEX SC5.14 [Regler]", "PAW SOLEX SC5.14 [Controller]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [HQM #0]", "PAW SOLEX SC5.14 [WMZ #0]", "PAW SOLEX SC5.14 [HQM #0]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [HQM #10]", "PAW SOLEX SC5.14 [WMZ #10]", "PAW SOLEX SC5.14 [HQM #10]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [HQM #11]", "PAW SOLEX SC5.14 [WMZ #11]", "PAW SOLEX SC5.14 [HQM #11]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [HQM #12]", "PAW SOLEX SC5.14 [WMZ #12]", "PAW SOLEX SC5.14 [HQM #12]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [HQM #13]", "PAW SOLEX SC5.14 [WMZ #13]", "PAW SOLEX SC5.14 [HQM #13]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [HQM #14]", "PAW SOLEX SC5.14 [WMZ #14]", "PAW SOLEX SC5.14 [HQM #14]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [HQM #15]", "PAW SOLEX SC5.14 [WMZ #15]", "PAW SOLEX SC5.14 [HQM #15]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [HQM #1]", "PAW SOLEX SC5.14 [WMZ #1]", "PAW SOLEX SC5.14 [HQM #1]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [HQM #2]", "PAW SOLEX SC5.14 [WMZ #2]", "PAW SOLEX SC5.14 [HQM #2]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [HQM #3]", "PAW SOLEX SC5.14 [WMZ #3]", "PAW SOLEX SC5.14 [HQM #3]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [HQM #4]", "PAW SOLEX SC5.14 [WMZ #4]", "PAW SOLEX SC5.14 [HQM #4]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [HQM #5]", "PAW SOLEX SC5.14 [WMZ #5]", "PAW SOLEX SC5.14 [HQM #5]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [HQM #6]", "PAW SOLEX SC5.14 [WMZ #6]", "PAW SOLEX SC5.14 [HQM #6]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [HQM #7]", "PAW SOLEX SC5.14 [WMZ #7]", "PAW SOLEX SC5.14 [HQM #7]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [HQM #8]", "PAW SOLEX SC5.14 [WMZ #8]", "PAW SOLEX SC5.14 [HQM #8]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [HQM #9]", "PAW SOLEX SC5.14 [WMZ #9]", "PAW SOLEX SC5.14 [HQM #9]");
		t.assertNextLocalizedTextEquals("PAW SOLEX SC5.14 [HQM #]", "PAW SOLEX SC5.14 [WMZ #]", "PAW SOLEX SC5.14 [HQM #]");
		t.assertNextLocalizedTextEquals("PFB1 Duty", "PFB1 Duty", "PFB1 Duty");
		t.assertNextLocalizedTextEquals("PFB1 Freq.", "PFB1 Freq.", "Fréq. PFB1 ");
		t.assertNextLocalizedTextEquals("PFB1 defective", "PFB1 defekt", "PFB1 défectueux");
		t.assertNextLocalizedTextEquals("PFB2 Duty", "PFB2 Duty", "PFB2 Duty");
		t.assertNextLocalizedTextEquals("PFB2 Freq.", "PFB2 Freq.", "Fréq. PFB2");
		t.assertNextLocalizedTextEquals("PFB2 defective", "PFB2 defekt", "PFB2 défectueux");
		t.assertNextLocalizedTextEquals("PID D part", "PID D-Anteil", "Partie PID D");
		t.assertNextLocalizedTextEquals("PID I part", "PID I-Anteil", "Partie PID I");
		t.assertNextLocalizedTextEquals("PID P part", "PID P-Anteil", "Partie PID P");
		t.assertNextLocalizedTextEquals("PWM 1", "PWM 1", "PWM 1");
		t.assertNextLocalizedTextEquals("PWM 2", "PWM 2", "PWM 2");
		t.assertNextLocalizedTextEquals("PWM 28", "PWM 28", "PWM 28");
		t.assertNextLocalizedTextEquals("PWM 3", "PWM 3", "PWM 3");
		t.assertNextLocalizedTextEquals("PWM A", "PWM A", "PWM A");
		t.assertNextLocalizedTextEquals("PWM B", "PWM B", "PWM B");
		t.assertNextLocalizedTextEquals("PWM P", "PWM P", "PWM P");
		t.assertNextLocalizedTextEquals("PWM/0-10V A", "PWM/0-10V A", "PWM/0-10V A");
		t.assertNextLocalizedTextEquals("PWM/0-10V B", "PWM/0-10V B", "PWM/0-10V B");
		t.assertNextLocalizedTextEquals("PWM/0-10V C", "PWM/0-10V C", "PWM/0-10V C");
		t.assertNextLocalizedTextEquals("PWM/0-10V D", "PWM/0-10V D", "PWM/0-10V D");
		t.assertNextLocalizedTextEquals("PWM1", "PWM1", "PWM1");
		t.assertNextLocalizedTextEquals("Parameter Rise", "Parameter Anstieg", "Paramètre Augmentation");
		t.assertNextLocalizedTextEquals("Parameter Rise time", "Parameter Anstiegszeit", "Paramètre Temps d'augmentation");
		t.assertNextLocalizedTextEquals("Parameter backing time", "Parameter Haltezeit", "Paramètre Temps de maintien");
		t.assertNextLocalizedTextEquals("Parameter Max. Temp. (S1)", "Parameter Max. Temp. (S1)", "Parameter Max. Temp. (S1)");
		t.assertNextLocalizedTextEquals("Paramter Reserve", "Parameter Reserve", "Paramètre Reserve");
		t.assertNextLocalizedTextEquals("Parameter Start", "Parameter Start", "Paramètre Démarrage");
		t.assertNextLocalizedTextEquals("Parameter TMax", "Parameter TMax", "Paramètre TMax");
		t.assertNextLocalizedTextEquals("Paramter TStart", "Parameter TStart", "Paramètre TDémarrage");
		t.assertNextLocalizedTextEquals("Paramter Target temperature", "Parameter Zieltemperatur", "Paramètre Température cible");
		t.assertNextLocalizedTextEquals("Loading break time", "Pendelpause", "Pause alterné");
		t.assertNextLocalizedTextEquals("Ph", "Ph", "Ph");
		t.assertNextLocalizedTextEquals("Phase:", "Phase:", "Phase :");
		t.assertNextLocalizedTextEquals("Potentiometer", "Poti", "Potentiomètre");
		t.assertNextLocalizedTextEquals("Primärkreis Rücklaufmaximaltemperatur", "Primärkreis Rücklaufmaximaltemperatur", "Primärkreis Rücklaufmaximaltemperatur");
		t.assertNextLocalizedTextEquals("Primärkreis Rücklauftemperatur", "Primärkreis Rücklauftemperatur", "Primärkreis Rücklauftemperatur");
		t.assertNextLocalizedTextEquals("Primärkreis Stellantrieb", "Primärkreis Stellantrieb", "Primärkreis Stellantrieb");
		t.assertNextLocalizedTextEquals("Primärkreis Vorlauftemperatur", "Primärkreis Vorlauftemperatur", "Primärkreis Vorlauftemperatur");
		t.assertNextLocalizedTextEquals("Primary pump", "Primärpumpe", "Pompe primaire");
		t.assertNextLocalizedTextEquals("Programme", "Programm", "Programme");
		t.assertNextLocalizedTextEquals("Pump Stove", "Pumpe Ofen", "Pompe poêle");
		t.assertNextLocalizedTextEquals("Pump Solar", "Pumpe Solar", "Pompe solaire");
		t.assertNextLocalizedTextEquals("Pump check", "Pumpencheck", "Contrôle Pompe");
		t.assertNextLocalizedTextEquals("Pump speed (PC)", "Pumpendrehzahl (PC)", "Vitesse (PC)");
		t.assertNextLocalizedTextEquals("Pump runtime R1", "Pumpenlaufzeit R1", "Temps de fonctionnement Pompe R1");
		t.assertNextLocalizedTextEquals("Pump relay", "Pumpenrelais:", "Relais pompe");
		t.assertNextLocalizedTextEquals("Pump delay", "Pumpenverzögerung", "Départ différé de la pompe");
		t.assertNextLocalizedTextEquals("Pump monitoring", "Pumpenüberwachung", "Contrôle Pompe");
		t.assertNextLocalizedTextEquals("Q-est", "Q-erw", "Q-est");
		t.assertNextLocalizedTextEquals("Q-est2", "Q-erw2", "Q-est2");
		t.assertNextLocalizedTextEquals("Q-meas", "Q-mess", "Q-mes");
		t.assertNextLocalizedTextEquals("Qkv-e", "Qkv-e", "Qkv-e");
		t.assertNextLocalizedTextEquals("Qkv-e2", "Qkv-e2", "Qkv-e2");
		t.assertNextLocalizedTextEquals("Qmeas2", "Qmess2", "Qmes2");
		t.assertNextLocalizedTextEquals("Qskv-e", "Qskv-e", "Qskv-e");
		t.assertNextLocalizedTextEquals("Qskv-e2", "Qskv-e2", "Qskv-e2");
		t.assertNextLocalizedTextEquals("Qtv-e", "Qtv-e", "Qtv-e");
		t.assertNextLocalizedTextEquals("Qtv-e2", "Qtv-e2", "Qtv-e2");
		t.assertNextLocalizedTextEquals("Qutil-e", "Qutil-e", "Qutil-e");
		t.assertNextLocalizedTextEquals("Qutil-e2", "Qutil-e2", "Qutil-e2");
		t.assertNextLocalizedTextEquals("Qutil-m", "Qutil-m", "Qutil-m");
		t.assertNextLocalizedTextEquals("R-Wandler", "R-Wandler", "R-Wandler");
		t.assertNextLocalizedTextEquals("R1", "R1", "R1");
		t.assertNextLocalizedTextEquals("R1 manual mode", "R1 - Handbetrieb", "R1 mode manuel");
		t.assertNextLocalizedTextEquals("R1-SP-1", "R1-SP-1", "R1-SP-1");
		t.assertNextLocalizedTextEquals("R10-SV-2/HKP-2/V-RL", "R10-SV-2/HKP-2/V-RL", "R10-SV-2/HKP-2/V-RL");
		t.assertNextLocalizedTextEquals("R11-MV-2 auf/BLP-2/SV-3", "R11-MV-2 auf/BLP-2/SV-3", "R11-MV-2 auf/BLP-2/SV-3");
		t.assertNextLocalizedTextEquals("R12-MV-2 zu/SV-3/V-RLU", "R12-MV-2 zu/SV-3/V-RLU", "R12-MV-2 zu/SV-3/V-RLU");
		t.assertNextLocalizedTextEquals("R13-ZP", "R13-ZP", "R13-ZP");
		t.assertNextLocalizedTextEquals("R14-RP", "R14-RP", "R14-RP");
		t.assertNextLocalizedTextEquals("R2", "R2", "R2");
		t.assertNextLocalizedTextEquals("R2 manual mode", "R2 - Handbetrieb", "R2 mode manuel");
		t.assertNextLocalizedTextEquals("R2-SP-2", "R2-SP-2", "R2-SP-2");
		t.assertNextLocalizedTextEquals("R3", "R3", "R3");
		t.assertNextLocalizedTextEquals("R3-BLP/1", "R3-BLP/1", "R3-BLP/1");
		t.assertNextLocalizedTextEquals("R4", "R4", "R4");
		t.assertNextLocalizedTextEquals("R4-SV1/V-RLU", "R4-SV1/V-RLU", "R4-SV1/V-RLU");
		t.assertNextLocalizedTextEquals("R5-HKP1", "R5-HKP1", "R5-HKP1");
		t.assertNextLocalizedTextEquals("R6-MV-1 auf", "R6-MV-1 auf", "R6-MV-1 auf");
		t.assertNextLocalizedTextEquals("R7-MV-1 zu", "R7-MV-1 zu", "R7-MV-1 zu");
		t.assertNextLocalizedTextEquals("R8-KLP-1/HKP-2", "R8-KLP-1/HKP-2", "R8-KLP-1/HKP-2");
		t.assertNextLocalizedTextEquals("R9-KLP-2/SP-3", "R9-KLP-2/SP-3", "R9-KLP-2/SP-3");
		t.assertNextLocalizedTextEquals("RCS %:", "RCS %:", "RCS %:");
		t.assertNextLocalizedTextEquals("RPT-Steuerbox", "RPT-Steuerbox", "RPT-Steuerbox");
		t.assertNextLocalizedTextEquals("RPT-Testsoftware", "RPT-Testsoftware", "RPT-Testsoftware");
		t.assertNextLocalizedTextEquals("RTC error", "RTC Fehler", "Erreur RTC");
		t.assertNextLocalizedTextEquals("Control flags", "Regelflags", "Contrôle flags");
		t.assertNextLocalizedTextEquals("Control status", "Regelstatus", "Contrôle réglage");
		t.assertNextLocalizedTextEquals("Controller output 1", "Regler Ausgang 1", "Régulateur sortie 1");
		t.assertNextLocalizedTextEquals("Controller output 2", "Regler Ausgang 2", "Régulateur sortie 2");
		t.assertNextLocalizedTextEquals("Controller variant", "Reglervariante", "Variante régulateur");
		t.assertNextLocalizedTextEquals("Controller version", "Reglerversion", "Version régulation");
		t.assertNextLocalizedTextEquals("Regtronic RQ-B", "Regtronic RQ-B", "Regtronic RQ-B");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [Modules]", "Regtronic RX-B [Module]", "Regtronic RX-B [Modules]");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [Controller]", "Regtronic RX-B [Regler]", "Regtronic RX-B [Controller]");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [HQM #0]", "Regtronic RX-B [WMZ #0]", "Regtronic RX-B [HQM #0]");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [HQM #10]", "Regtronic RX-B [WMZ #10]", "Regtronic RX-B [HQM #10]");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [HQM #11]", "Regtronic RX-B [WMZ #11]", "Regtronic RX-B [HQM #11]");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [HQM #12]", "Regtronic RX-B [WMZ #12]", "Regtronic RX-B [HQM #12]");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [HQM #13]", "Regtronic RX-B [WMZ #13]", "Regtronic RX-B [HQM #13]");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [HQM #14]", "Regtronic RX-B [WMZ #14]", "Regtronic RX-B [HQM #14]");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [HQM #15]", "Regtronic RX-B [WMZ #15]", "Regtronic RX-B [HQM #15]");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [HQM #1]", "Regtronic RX-B [WMZ #1]", "Regtronic RX-B [HQM #1]");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [HQM #2]", "Regtronic RX-B [WMZ #2]", "Regtronic RX-B [HQM #2]");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [HQM #3]", "Regtronic RX-B [WMZ #3]", "Regtronic RX-B [HQM #3]");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [HQM #4]", "Regtronic RX-B [WMZ #4]", "Regtronic RX-B [HQM #4]");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [HQM #5]", "Regtronic RX-B [WMZ #5]", "Regtronic RX-B [HQM #5]");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [HQM #6]", "Regtronic RX-B [WMZ #6]", "Regtronic RX-B [HQM #6]");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [HQM #7]", "Regtronic RX-B [WMZ #7]", "Regtronic RX-B [HQM #7]");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [HQM #8]", "Regtronic RX-B [WMZ #8]", "Regtronic RX-B [HQM #8]");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [HQM #9]", "Regtronic RX-B [WMZ #9]", "Regtronic RX-B [HQM #9]");
		t.assertNextLocalizedTextEquals("Regtronic RX-B [HQM #]", "Regtronic RX-B [WMZ #]", "Regtronic RX-B [HQM #]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [DHW heating #0]", "Regudis H-HT [BW-Erwärmung #0]", "Regudis H-HT [DHW heating #0]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [DHW heating #10]", "Regudis H-HT [BW-Erwärmung #10]", "Regudis H-HT [DHW heating #10]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [DHW heating #11]", "Regudis H-HT [BW-Erwärmung #11]", "Regudis H-HT [DHW heating #11]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [DHW heating #12]", "Regudis H-HT [BW-Erwärmung #12]", "Regudis H-HT [DHW heating #12]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [DHW heating #13]", "Regudis H-HT [BW-Erwärmung #13]", "Regudis H-HT [DHW heating #13]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [DHW heating #14]", "Regudis H-HT [BW-Erwärmung #14]", "Regudis H-HT [DHW heating #14]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [DHW heating #15]", "Regudis H-HT [BW-Erwärmung #15]", "Regudis H-HT [DHW heating #15]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [DHW heating #1]", "Regudis H-HT [BW-Erwärmung #1]", "Regudis H-HT [DHW heating #1]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [DHW heating #2]", "Regudis H-HT [BW-Erwärmung #2]", "Regudis H-HT [DHW heating #2]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [DHW heating #3]", "Regudis H-HT [BW-Erwärmung #3]", "Regudis H-HT [DHW heating #3]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [DHW heating #4]", "Regudis H-HT [BW-Erwärmung #4]", "Regudis H-HT [DHW heating #4]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [DHW heating #5]", "Regudis H-HT [BW-Erwärmung #5]", "Regudis H-HT [DHW heating #5]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [DHW heating #6]", "Regudis H-HT [BW-Erwärmung #6]", "Regudis H-HT [DHW heating #6]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [DHW heating #7]", "Regudis H-HT [BW-Erwärmung #7]", "Regudis H-HT [DHW heating #7]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [DHW heating #8]", "Regudis H-HT [BW-Erwärmung #8]", "Regudis H-HT [DHW heating #8]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [DHW heating #9]", "Regudis H-HT [BW-Erwärmung #9]", "Regudis H-HT [DHW heating #9]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [DHW heating #]", "Regudis H-HT [BW-Erwärmung #]", "Regudis H-HT [DHW heating #]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [Transm. station #0]", "Regudis H-HT [Übergabestation #0]", "Regudis H-HT [Transm. station #0]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [Transm. station #10]", "Regudis H-HT [Übergabestation #10]", "Regudis H-HT [Transm. station #10]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [Transm. station #11]", "Regudis H-HT [Übergabestation #11]", "Regudis H-HT [Transm. station #11]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [Transm. station #12]", "Regudis H-HT [Übergabestation #12]", "Regudis H-HT [Transm. station #12]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [Transm. station #13]", "Regudis H-HT [Übergabestation #13]", "Regudis H-HT [Transm. station #13]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [Transm. station #14]", "Regudis H-HT [Übergabestation #14]", "Regudis H-HT [Transm. station #14]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [Transm. station #15]", "Regudis H-HT [Übergabestation #15]", "Regudis H-HT [Transm. station #15]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [Transm. station #1]", "Regudis H-HT [Übergabestation #1]", "Regudis H-HT [Transm. station #1]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [Transm. station #2]", "Regudis H-HT [Übergabestation #2]", "Regudis H-HT [Transm. station #2]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [Transm. station #3]", "Regudis H-HT [Übergabestation #3]", "Regudis H-HT [Transm. station #3]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [Transm. station #4]", "Regudis H-HT [Übergabestation #4]", "Regudis H-HT [Transm. station #4]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [Transm. station #5]", "Regudis H-HT [Übergabestation #5]", "Regudis H-HT [Transm. station #5]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [Transm. station #6]", "Regudis H-HT [Übergabestation #6]", "Regudis H-HT [Transm. station #6]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [Transm. station #7]", "Regudis H-HT [Übergabestation #7]", "Regudis H-HT [Transm. station #7]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [Transm. station #8]", "Regudis H-HT [Übergabestation #8]", "Regudis H-HT [Transm. station #8]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [Transm. station #9]", "Regudis H-HT [Übergabestation #9]", "Regudis H-HT [Transm. station #9]");
		t.assertNextLocalizedTextEquals("Regudis H-HT [Transm. station #]", "Regudis H-HT [Übergabestation #]", "Regudis H-HT [Transm. station #]");
		t.assertNextLocalizedTextEquals("Relay 1", "Relais 1", "Relais 1");
		t.assertNextLocalizedTextEquals("Relay 1 active", "Relais 1 an", "Relais 1 on");
		t.assertNextLocalizedTextEquals("Relais 1 used", "Relais 1 benutzt", "Relais 1 utilisé");
		t.assertNextLocalizedTextEquals("Relay 157", "Relais 157", "Relais 157");
		t.assertNextLocalizedTextEquals("Relay 2", "Relais 2", "Relais 2");
		t.assertNextLocalizedTextEquals("Relay 2 active", "Relais 2 an", "Relais 2 on");
		t.assertNextLocalizedTextEquals("Relais 2 used", "Relais 2 benutzt", "Relais 2 utilisé");
		t.assertNextLocalizedTextEquals("Relay 28", "Relais 28", "Relais 28");
		t.assertNextLocalizedTextEquals("Relay 3", "Relais 3", "Relais 3");
		t.assertNextLocalizedTextEquals("Relais 3 used", "Relais 3 benutzt", "Relais 3 utilisé");
		t.assertNextLocalizedTextEquals("Relay 4", "Relais 4", "Relais 4");
		t.assertNextLocalizedTextEquals("Relais 4 used", "Relais 4 benutzt", "Relais 4 utilisé");
		t.assertNextLocalizedTextEquals("Relay 5", "Relais 5", "Relais 5");
		t.assertNextLocalizedTextEquals("Relais 5 used", "Relais 5 benutzt", "Relais 5 utilisé");
		t.assertNextLocalizedTextEquals("Relay 6", "Relais 6", "Relais 6");
		t.assertNextLocalizedTextEquals("Relais 6 used", "Relais 6 benutzt", "Relais 6 utilisé");
		t.assertNextLocalizedTextEquals("Relay 7", "Relais 7", "Relais 7");
		t.assertNextLocalizedTextEquals("Relais 7 used", "Relais 7 benutzt", "Relais 7 utilisé");
		t.assertNextLocalizedTextEquals("Relay 8", "Relais 8", "Relais 8");
		t.assertNextLocalizedTextEquals("Relais Mixer open", "Relais Mischer Auf", "Relais vanne mél. ouv.");
		t.assertNextLocalizedTextEquals("Relais Mixer closed", "Relais Mischer Zu", "Relais vanne mél. fer.");
		t.assertNextLocalizedTextEquals("Relay P,H", "Relais P,H", "Relais P,H");
		t.assertNextLocalizedTextEquals("Relay Pump", "Relais Pumpe", "Relais pompe");
		t.assertNextLocalizedTextEquals("Relay HP", "Relais WP", "Relais PAC");
		t.assertNextLocalizedTextEquals("Relay bit mask", "Relais-Maske", "Masque relais");
		t.assertNextLocalizedTextEquals("Relay usage mask", "Relaisbenutzungsmaske", "Masque d'utilisation des relais");
		t.assertNextLocalizedTextEquals("Relay byte", "Relaisbyte", "Byte relais");
		t.assertNextLocalizedTextEquals("Relay mask", "Relaismaske", "Masque relais");
		t.assertNextLocalizedTextEquals("Relay mask (>= v1.02)", "Relaismaske (>= v1.02)", "Masque relais (>= v1.02)");
		t.assertNextLocalizedTextEquals("Relay status", "Relaisstatus", "Etat relais");
		t.assertNextLocalizedTextEquals("Relay status 1", "Relaisstatus 1", "Etat relais 1");
		t.assertNextLocalizedTextEquals("Relay status 2", "Relaisstatus 2", "Etat relais 2");
		t.assertNextLocalizedTextEquals("Relay status 3", "Relaisstatus 3", "Etat relais 3");
		t.assertNextLocalizedTextEquals("Relay status 4", "Relaisstatus 4", "Etat relais 4");
		t.assertNextLocalizedTextEquals("Relay status 5", "Relaisstatus 5", "Etat relais 5");
		t.assertNextLocalizedTextEquals("Relay status 6", "Relaisstatus 6", "Etat relais 6");
		t.assertNextLocalizedTextEquals("Relay status R4", "Relaisstatus R4", "Etat relais R4");
		t.assertNextLocalizedTextEquals("Relay status R5", "Relaisstatus R5", "Etat relais R5");
		t.assertNextLocalizedTextEquals("Relay status R6", "Relaisstatus R6", "Etat relais R6");
		t.assertNextLocalizedTextEquals("Relay status R7", "Relaisstatus R7", "Etat relais R7");
		t.assertNextLocalizedTextEquals("Relay status R8", "Relaisstatus R8", "Etat relais R8");
		t.assertNextLocalizedTextEquals("Relay status R9", "Relaisstatus R9", "Etat relais R9");
		t.assertNextLocalizedTextEquals("Relay state relay 1", "Relaisstatus Relais 1", "Etat relais Relais 1");
		t.assertNextLocalizedTextEquals("Relay state relay 2", "Relaisstatus Relais 2", "Etat relais Relais 2");
		t.assertNextLocalizedTextEquals("Remeha RemaCal", "Remeha RemaCal", "Remeha RemaCal");
		t.assertNextLocalizedTextEquals("Remeha RemaSol A", "Remeha RemaSol A", "Remeha RemaSol A");
		t.assertNextLocalizedTextEquals("Resistor 1", "Resistor 1", "Résistance 1");
		t.assertNextLocalizedTextEquals("Resistor 2", "Resistor 2", "Résistance 2");
		t.assertNextLocalizedTextEquals("Resistor 3", "Resistor 3", "Résistance 3");
		t.assertNextLocalizedTextEquals("Resistor 4", "Resistor 4", "Résistance 4");
		t.assertNextLocalizedTextEquals("Resistor 5", "Resistor 5", "Résistance 5");
		t.assertNextLocalizedTextEquals("Resistor 6", "Resistor 6", "Résistance 6");
		t.assertNextLocalizedTextEquals("Resistor sensor 1", "Resistor Sensor 1", "Résistance sonde 1");
		t.assertNextLocalizedTextEquals("Resistor sensor 2", "Resistor Sensor 2", "Résistance sonde 2");
		t.assertNextLocalizedTextEquals("Resistor sensor 3", "Resistor Sensor 3", "Résistance sonde 3");
		t.assertNextLocalizedTextEquals("Tube collector", "Röhrenkollektor", "Capteurs tubulaires");
		t.assertNextLocalizedTextEquals("Recooling", "Rückkühlung", "Refroidissement par circulation de retour");
		t.assertNextLocalizedTextEquals("Heating circuit return", "Rücklauf Heizkreis", "Retour circuit de chauffage");
		t.assertNextLocalizedTextEquals("Stratified return", "Rücklaufeinschichtung", "Stratification du retour");
		t.assertNextLocalizedTextEquals("Return temperature", "Rücklauftemperatur", "Température retour");
		t.assertNextLocalizedTextEquals("Return s defective", "S-Rücklauf defekt", "S retour défectueuse");
		t.assertNextLocalizedTextEquals("Flow s defective", "S-Vorlauf defekt", "S départ défectueuse");
		t.assertNextLocalizedTextEquals("S1", "S1", "S1");
		t.assertNextLocalizedTextEquals("S1 fault", "S1 Fehler", "S1 erreur");
		t.assertNextLocalizedTextEquals("S1 defective", "S1 defekt", "S1 défectueuse");
		t.assertNextLocalizedTextEquals("S1-SF-K", "S1-SF-K", "S1-SF-K");
		t.assertNextLocalizedTextEquals("S10-VL-F1", "S10-VL-F1", "S10-VL-F1");
		t.assertNextLocalizedTextEquals("S11-FV-1", "S11-FV-1", "S11-FV-1");
		t.assertNextLocalizedTextEquals("S12-VL-F2/WA-1/SF-4/F-RLU1", "S12-VL-F2/WA-1/SF-4/F-RLU1", "S12-VL-F2/WA-1/SF-4/F-RLU1");
		t.assertNextLocalizedTextEquals("S13-FV-2/WA-2/SF-WT", "S13-FV-2/WA-2/SF-WT", "S13-FV-2/WA-2/SF-WT");
		t.assertNextLocalizedTextEquals("S14-KF-1/KF-NH", "S14-KF-1/KF-NH", "S14-KF-1/KF-NH");
		t.assertNextLocalizedTextEquals("S15-KF-2/SF-K2", "S15-KF-2/SF-K2", "S15-KF-2/SF-K2");
		t.assertNextLocalizedTextEquals("S16-BF/BF-1/F-RLU2", "S16-BF/BF-1/F-RLU2", "S16-BF/BF-1/F-RLU2");
		t.assertNextLocalizedTextEquals("S2", "S2", "S2");
		t.assertNextLocalizedTextEquals("S2 fault", "S2 Fehler", "S2 erreur");
		t.assertNextLocalizedTextEquals("S2 defective", "S2 defekt", "S2 défectueuse");
		t.assertNextLocalizedTextEquals("S2-SF-1", "S2-SF-1", "S2-SF-1");
		t.assertNextLocalizedTextEquals("S3", "S3", "S3");
		t.assertNextLocalizedTextEquals("S3 defective", "S3 defekt", "S3 défectueuse");
		t.assertNextLocalizedTextEquals("S3-SF-2", "S3-SF-2", "S3-SF-2");
		t.assertNextLocalizedTextEquals("S4", "S4", "S4");
		t.assertNextLocalizedTextEquals("S4 defective", "S4 defekt", "S4 défectueuse");
		t.assertNextLocalizedTextEquals("S4-SF-3/WT/F-RLA1/RLU1", "S4-SF-3/WT/F-RLA1/RLU1", "S4-SF-3/WT/F-RLA1/RLU1");
		t.assertNextLocalizedTextEquals("S5", "S5", "S5");
		t.assertNextLocalizedTextEquals("S5-FN-HK/F-RLA2", "S5-FN-HK/F-RLA2", "S5-FN-HK/F-RLA2");
		t.assertNextLocalizedTextEquals("S6", "S6", "S6");
		t.assertNextLocalizedTextEquals("S6-FN-WW/BF/SF-WT", "S6-FN-WW/BF/SF-WT", "S6-FN-WW/BF/SF-WT");
		t.assertNextLocalizedTextEquals("S6_1s", "S6_1s", "S6_1s");
		t.assertNextLocalizedTextEquals("S7", "S7", "S7");
		t.assertNextLocalizedTextEquals("S7-FN-K2", "S7-FN-K2", "S7-FN-K2");
		t.assertNextLocalizedTextEquals("S7_1s", "S7_1s", "S7_1s");
		t.assertNextLocalizedTextEquals("S8", "S8", "S8");
		t.assertNextLocalizedTextEquals("S8-FZ", "S8-FZ", "S8-FZ");
		t.assertNextLocalizedTextEquals("S9", "S9", "S9");
		t.assertNextLocalizedTextEquals("S9-AF", "S9-AF", "S9-AF");
		t.assertNextLocalizedTextEquals("SC25", "SC25", "SC25");
		t.assertNextLocalizedTextEquals("SD3 / GAx", "SD3 / GAx", "SD3 / GAx");
		t.assertNextLocalizedTextEquals("SD3: Temperature sensor 1", "SD3: Temperatur Sensor 1", "SD3 : température sonde 1");
		t.assertNextLocalizedTextEquals("SD3: Temperature sensor 2", "SD3: Temperatur Sensor 2", "SD3 : température sonde 2");
		t.assertNextLocalizedTextEquals("SD3: Heat quantity", "SD3: Wärmemenge", "SD3 : Quantité de chaleur");
		t.assertNextLocalizedTextEquals("SKSC1/2", "SKSC1/2", "SKSC1/2");
		t.assertNextLocalizedTextEquals("SKSC2 HE [Controller]", "SKSC2 HE [Regler]", "SKSC2 HE [Controller]");
		t.assertNextLocalizedTextEquals("SKSC3 [HC1]", "SKSC3 [HK1]", "SKSC3 [HC1]");
		t.assertNextLocalizedTextEquals("SKSC3 [HC2]", "SKSC3 [HK2]", "SKSC3 [HC2]");
		t.assertNextLocalizedTextEquals("SKSC3 [HC3]", "SKSC3 [HK3]", "SKSC3 [HC3]");
		t.assertNextLocalizedTextEquals("SKSC3HE", "SKSC3HE", "SKSC3HE");
		t.assertNextLocalizedTextEquals("SKSC3HE [HC1]", "SKSC3HE [HK1]", "SKSC3HE [HC1]");
		t.assertNextLocalizedTextEquals("SKSC3HE [HC2]", "SKSC3HE [HK2]", "SKSC3HE [HC2]");
		t.assertNextLocalizedTextEquals("SKSC3HE [HC3]", "SKSC3HE [HK3]", "SKSC3HE [HC3]");
		t.assertNextLocalizedTextEquals("SKSR 1/2/3", "SKSR 1/2/3", "SKSR 1/2/3");
		t.assertNextLocalizedTextEquals("SLR", "SLR", "SLR");
		t.assertNextLocalizedTextEquals("SLR XT", "SLR XT", "SLR XT");
		t.assertNextLocalizedTextEquals("SLR XT-Erweiterungsmodul 1", "SLR XT-Erweiterungsmodul 1", "SLR XT-Erweiterungsmodul 1");
		t.assertNextLocalizedTextEquals("SLR XT-Erweiterungsmodul 2", "SLR XT-Erweiterungsmodul 2", "SLR XT-Erweiterungsmodul 2");
		t.assertNextLocalizedTextEquals("SLR XT-Erweiterungsmodul 3", "SLR XT-Erweiterungsmodul 3", "SLR XT-Erweiterungsmodul 3");
		t.assertNextLocalizedTextEquals("SLR XT-Erweiterungsmodul 4", "SLR XT-Erweiterungsmodul 4", "SLR XT-Erweiterungsmodul 4");
		t.assertNextLocalizedTextEquals("SLR XT-Erweiterungsmodul 5", "SLR XT-Erweiterungsmodul 5", "SLR XT-Erweiterungsmodul 5");
		t.assertNextLocalizedTextEquals("SLR-Erweiterungsmodul #01", "SLR-Erweiterungsmodul #01", "SLR-Erweiterungsmodul #01");
		t.assertNextLocalizedTextEquals("SLR-Erweiterungsmodul #02", "SLR-Erweiterungsmodul #02", "SLR-Erweiterungsmodul #02");
		t.assertNextLocalizedTextEquals("SLR-Erweiterungsmodul #03", "SLR-Erweiterungsmodul #03", "SLR-Erweiterungsmodul #03");
		t.assertNextLocalizedTextEquals("SLR-Erweiterungsmodul #04", "SLR-Erweiterungsmodul #04", "SLR-Erweiterungsmodul #04");
		t.assertNextLocalizedTextEquals("SLR-Erweiterungsmodul #1", "SLR-Erweiterungsmodul #1", "SLR-Erweiterungsmodul #1");
		t.assertNextLocalizedTextEquals("SLR-Erweiterungsmodul #2", "SLR-Erweiterungsmodul #2", "SLR-Erweiterungsmodul #2");
		t.assertNextLocalizedTextEquals("SLR-Erweiterungsmodul #3", "SLR-Erweiterungsmodul #3", "SLR-Erweiterungsmodul #3");
		t.assertNextLocalizedTextEquals("SLR-Erweiterungsmodul #4", "SLR-Erweiterungsmodul #4", "SLR-Erweiterungsmodul #4");
		t.assertNextLocalizedTextEquals("SOLEX [Controller]", "SOLEX [Regler]", "SOLEX [Controller]");
		t.assertNextLocalizedTextEquals("SOLEX [HQM]", "SOLEX [WMZ]", "SOLEX [HQM]");
		t.assertNextLocalizedTextEquals("SOLTEX-Regler [Part 1]", "SOLTEX-Regler [Teil 1]", "SOLTEX-Regler [Part 1]");
		t.assertNextLocalizedTextEquals("SOLTEX-Regler [Part 2]", "SOLTEX-Regler [Teil 2]", "SOLTEX-Regler [Part 2]");
		t.assertNextLocalizedTextEquals("SOLTOP DeltaSol S2/S3", "SOLTOP DeltaSol S2/S3", "SOLTOP DeltaSol S2/S3");
		t.assertNextLocalizedTextEquals("SPR Relay:", "SPR Relais:", "SPR Relais:");
		t.assertNextLocalizedTextEquals("SW Version", "SW Version", "SW Version");
		t.assertNextLocalizedTextEquals("SW Version", "SW-Version", "Version SW");
		t.assertNextLocalizedTextEquals("SW_FL_Set", "SW_VL_Soll", "SW_DE_nom");
		t.assertNextLocalizedTextEquals("SC irradiation", "SZ Einstrahlung", "Irradiation CS");
		t.assertNextLocalizedTextEquals("SC voltage", "SZ Spannung", "Tension CS");
		t.assertNextLocalizedTextEquals("Collective error message", "Sammelstörmeldung", "Message d’erreur centralisé");
		t.assertNextLocalizedTextEquals("Operating cycles", "Schaltspiele", "Cycles de fonctionnement");
		t.assertNextLocalizedTextEquals("Scheme", "Schema", "Schéma");
		t.assertNextLocalizedTextEquals("Seconds no.", "SekNr", "N° secondes");
		t.assertNextLocalizedTextEquals("Sekundärkreis Rücklauftemperatur", "Sekundärkreis Rücklauftemperatur", "Sekundärkreis Rücklauftemperatur");
		t.assertNextLocalizedTextEquals("Sekundärkreis Vorlaufsolltemperatur", "Sekundärkreis Vorlaufsolltemperatur", "Sekundärkreis Vorlaufsolltemperatur");
		t.assertNextLocalizedTextEquals("Sekundärkreis Vorlauftemperatur", "Sekundärkreis Vorlauftemperatur", "Sekundärkreis Vorlauftemperatur");
		t.assertNextLocalizedTextEquals("Sensor 1", "Sensor 1", "Sonde 1");
		t.assertNextLocalizedTextEquals("Sensor 1 used", "Sensor 1 benutzt", "Sonde 1 utilisée");
		t.assertNextLocalizedTextEquals("Sensor 1 defective", "Sensor 1 defekt", "Sonde 1 défectueuse");
		t.assertNextLocalizedTextEquals("Sensor 10", "Sensor 10", "Sonde 10");
		t.assertNextLocalizedTextEquals("Sensor 10 used", "Sensor 10 benutzt", "Sonde 10 utilisée");
		t.assertNextLocalizedTextEquals("Sensor 11", "Sensor 11", "Sonde 11");
		t.assertNextLocalizedTextEquals("Sensor 11 used", "Sensor 11 benutzt", "Sonde 11 utilisée");
		t.assertNextLocalizedTextEquals("Sensor 12", "Sensor 12", "Sonde 12");
		t.assertNextLocalizedTextEquals("Sensor 12 used", "Sensor 12 benutzt", "Sonde 12 utilisée");
		t.assertNextLocalizedTextEquals("Sensor 13", "Sensor 13", "Sonde 13");
		t.assertNextLocalizedTextEquals("Sensor 2", "Sensor 2", "Sonde 2");
		t.assertNextLocalizedTextEquals("Sensor 2 used", "Sensor 2 benutzt", "Sonde 2 utilisée");
		t.assertNextLocalizedTextEquals("Sensor 2 defective", "Sensor 2 defekt", "Sonde 2 défectueuse");
		t.assertNextLocalizedTextEquals("Sensor 3", "Sensor 3", "Sonde 3");
		t.assertNextLocalizedTextEquals("Sensor 3 Zustand (FS)", "Sensor 3 Zustand (FS)", "Sensor 3 Zustand (FS)");
		t.assertNextLocalizedTextEquals("Sensor 3 used", "Sensor 3 benutzt", "Sonde 3 utilisée");
		t.assertNextLocalizedTextEquals("Sensor 3 defective", "Sensor 3 defekt", "Sonde 3 défectueuse");
		t.assertNextLocalizedTextEquals("Sensor 4", "Sensor 4", "Sonde 4");
		t.assertNextLocalizedTextEquals("Sensor 4 Zustand (TA)", "Sensor 4 Zustand (TA)", "Sensor 4 Zustand (TA)");
		t.assertNextLocalizedTextEquals("Sensor 4 used", "Sensor 4 benutzt", "Sonde 4 utilisée");
		t.assertNextLocalizedTextEquals("Sensor 4 defective", "Sensor 4 defekt", "Sonde 4 défectueuse");
		t.assertNextLocalizedTextEquals("Sensor 5", "Sensor 5", "Sonde 5");
		t.assertNextLocalizedTextEquals("Sensor 5 used", "Sensor 5 benutzt", "Sonde 5 utilisée");
		t.assertNextLocalizedTextEquals("Sensor 6", "Sensor 6", "Sonde 6");
		t.assertNextLocalizedTextEquals("Sensor 6 used", "Sensor 6 benutzt", "Sonde 6 utilisée");
		t.assertNextLocalizedTextEquals("Sensor 7 used", "Sensor 7 benutzt", "Sonde 7 utilisée");
		t.assertNextLocalizedTextEquals("Sensor 8 used", "Sensor 8 benutzt", "Sonde 8 utilisée");
		t.assertNextLocalizedTextEquals("Sensor 9", "Sensor 9", "Sonde 9");
		t.assertNextLocalizedTextEquals("Sensor 9 used", "Sensor 9 benutzt", "Sonde 9 utilisée");
		t.assertNextLocalizedTextEquals("Sensor short-circuit", "Sensor Kurzschluss", "Court-circuit sonde");
		t.assertNextLocalizedTextEquals("Sensor short-circuit S1", "Sensor Kurzschluss S1", "Court-circuit sonde S1");
		t.assertNextLocalizedTextEquals("Sensor short-circuit S10", "Sensor Kurzschluss S10", "Court-circuit sonde S10");
		t.assertNextLocalizedTextEquals("Sensor short-circuit S11", "Sensor Kurzschluss S11", "Court-circuit sonde S11");
		t.assertNextLocalizedTextEquals("Sensor short-circuit S12", "Sensor Kurzschluss S12", "Court-circuit sonde S12");
		t.assertNextLocalizedTextEquals("Sensor short-circuit S2", "Sensor Kurzschluss S2", "Court-circuit sonde S2");
		t.assertNextLocalizedTextEquals("Sensor short-circuit S3", "Sensor Kurzschluss S3", "Court-circuit sonde S3");
		t.assertNextLocalizedTextEquals("Sensor short-circuit S4", "Sensor Kurzschluss S4", "Court-circuit sonde S4");
		t.assertNextLocalizedTextEquals("Sensor short-circuit S5", "Sensor Kurzschluss S5", "Court-circuit sonde S5");
		t.assertNextLocalizedTextEquals("Sensor short-circuit S6", "Sensor Kurzschluss S6", "Court-circuit sonde S6");
		t.assertNextLocalizedTextEquals("Sensor short-circuit S7", "Sensor Kurzschluss S7", "Court-circuit sonde S7");
		t.assertNextLocalizedTextEquals("Sensor short-circuit S8", "Sensor Kurzschluss S8", "Court-circuit sonde S8");
		t.assertNextLocalizedTextEquals("Sensor short-circuit S9", "Sensor Kurzschluss S9", "Court-circuit sonde S9");
		t.assertNextLocalizedTextEquals("Sensor S1", "Sensor S1", "Sonde S1");
		t.assertNextLocalizedTextEquals("Sensor S2", "Sensor S2", "Sonde S2");
		t.assertNextLocalizedTextEquals("Sensor S3", "Sensor S3", "Sonde S3");
		t.assertNextLocalizedTextEquals("Sensor S4 / dV", "Sensor S4 / dV", "Sonde S4 / dV");
		t.assertNextLocalizedTextEquals("Sensor S4 T", "Sensor S4 T", "Sonde S4 T");
		t.assertNextLocalizedTextEquals("Sensor S5", "Sensor S5", "Sonde S5");
		t.assertNextLocalizedTextEquals("Sensor cable broken", "Sensor Unterbrechung", "Rupture câble sonde");
		t.assertNextLocalizedTextEquals("Sensor cable broken S1", "Sensor Unterbrechung S1", "Rupture câble sonde S1");
		t.assertNextLocalizedTextEquals("Sensor cable broken S10", "Sensor Unterbrechung S10", "Rupture câble sonde S10");
		t.assertNextLocalizedTextEquals("Sensor cable broken S11", "Sensor Unterbrechung S11", "Rupture câble sonde S11");
		t.assertNextLocalizedTextEquals("Sensor cable broken S12", "Sensor Unterbrechung S12", "Rupture câble sonde S12");
		t.assertNextLocalizedTextEquals("Sensor cable broken S2", "Sensor Unterbrechung S2", "Rupture câble sonde S2");
		t.assertNextLocalizedTextEquals("Sensor cable broken S3", "Sensor Unterbrechung S3", "Rupture câble sonde S3");
		t.assertNextLocalizedTextEquals("Sensor cable broken S4", "Sensor Unterbrechung S4", "Rupture câble sonde S4");
		t.assertNextLocalizedTextEquals("Sensor cable broken S5", "Sensor Unterbrechung S5", "Rupture câble sonde S5");
		t.assertNextLocalizedTextEquals("Sensor cable broken S6", "Sensor Unterbrechung S6", "Rupture câble sonde S6");
		t.assertNextLocalizedTextEquals("Sensor cable broken S7", "Sensor Unterbrechung S7", "Rupture câble sonde S7");
		t.assertNextLocalizedTextEquals("Sensor cable broken S8", "Sensor Unterbrechung S8", "Rupture câble sonde S8");
		t.assertNextLocalizedTextEquals("Sensor cable broken S9", "Sensor Unterbrechung S9", "Rupture câble sonde S9");
		t.assertNextLocalizedTextEquals("Sensor used", "Sensor benutzt", "Sonde utilisée");
		t.assertNextLocalizedTextEquals("SensorBenutzt bit 0..31", "SensorBenutzt bit 0..31", "SensorBenutzt bit 0..31");
		t.assertNextLocalizedTextEquals("SensorBenutzt bit 31..63", "SensorBenutzt bit 31..63", "SensorBenutzt bit 31..63");
		t.assertNextLocalizedTextEquals("Sensor defective", "SensorDefekt", "Sonde défectueuse");
		t.assertNextLocalizedTextEquals("SensorOutputType1", "SensorOutputType1", "SensorOutputType1");
		t.assertNextLocalizedTextEquals("SensorOutputType2", "SensorOutputType2", "SensorOutputType2");
		t.assertNextLocalizedTextEquals("SensorOutputType3", "SensorOutputType3", "SensorOutputType3");
		t.assertNextLocalizedTextEquals("SensorOutputType4", "SensorOutputType4", "SensorOutputType4");
		t.assertNextLocalizedTextEquals("SensorOutputType5", "SensorOutputType5", "SensorOutputType5");
		t.assertNextLocalizedTextEquals("SensorOutputType6", "SensorOutputType6", "SensorOutputType6");
		t.assertNextLocalizedTextEquals("SensorVolume flow_Regler_GAS1_TotalWert_L", "SensorVolumenstrom_Regler_GAS1_TotalWert_L", "SensorVolume flow_Regler_GAS1_TotalWert_L");
		t.assertNextLocalizedTextEquals("SensorVolume flow_Regler_GAS2_TotalWert_L", "SensorVolumenstrom_Regler_GAS2_TotalWert_L", "SensorVolume flow_Regler_GAS2_TotalWert_L");
		t.assertNextLocalizedTextEquals("SensorVolume flow_Regler_GDS1_TotalWert_L", "SensorVolumenstrom_Regler_GDS1_TotalWert_L", "SensorVolume flow_Regler_GDS1_TotalWert_L");
		t.assertNextLocalizedTextEquals("SensorVolume flow_Regler_GDS2_TotalWert_L", "SensorVolumenstrom_Regler_GDS2_TotalWert_L", "SensorVolume flow_Regler_GDS2_TotalWert_L");
		t.assertNextLocalizedTextEquals("Sensor_Regler_Druck_GAS1_Wert_Bar", "Sensor_Regler_Druck_GAS1_Wert_Bar", "Sensor_Regler_Druck_GAS1_Wert_Bar");
		t.assertNextLocalizedTextEquals("Sensor_Regler_Druck_GAS2_Wert_Bar", "Sensor_Regler_Druck_GAS2_Wert_Bar", "Sensor_Regler_Druck_GAS2_Wert_Bar");
		t.assertNextLocalizedTextEquals("Sensor_Regler_Druck_GDS1_Wert_Bar", "Sensor_Regler_Druck_GDS1_Wert_Bar", "Sensor_Regler_Druck_GDS1_Wert_Bar");
		t.assertNextLocalizedTextEquals("Sensor_Regler_Druck_GDS2_Wert_Bar", "Sensor_Regler_Druck_GDS2_Wert_Bar", "Sensor_Regler_Druck_GDS2_Wert_Bar");
		t.assertNextLocalizedTextEquals("Sensor usage mask", "Sensorbenutzungs-Maske", "Masque d'utilisation des sondes");
		t.assertNextLocalizedTextEquals("Sensor usage mask #1", "Sensorbenutzungs-Maske #1", "Masque utilisation sondes #1");
		t.assertNextLocalizedTextEquals("Sensor usage mask #2", "Sensorbenutzungs-Maske #2", "Masque utilisation sondes #2");
		t.assertNextLocalizedTextEquals("Sensor line break mask", "Sensorbruch-Maske", "Masque de rupture sonde");
		t.assertNextLocalizedTextEquals("Sensor line break number", "Sensorbruch-Nummer", "Numéro sonde rompue");
		t.assertNextLocalizedTextEquals("Sensor defect mask", "Sensordefekt-Maske", "Masque dysfonctionnement sonde");
		t.assertNextLocalizedTextEquals("Sensor fault S1", "Sensorfehler S1", "Erreur sonde S1");
		t.assertNextLocalizedTextEquals("Sensor fault S12 VFD", "Sensorfehler S12 VFD", "Erreur sonde S12 VFD");
		t.assertNextLocalizedTextEquals("Sensor fault S2", "Sensorfehler S2", "Erreur sonde S2");
		t.assertNextLocalizedTextEquals("Sensor fault S3", "Sensorfehler S3", "Erreur sonde S3");
		t.assertNextLocalizedTextEquals("Sensor fault S4", "Sensorfehler S4", "Erreur sonde S4");
		t.assertNextLocalizedTextEquals("Sensor fault S5", "Sensorfehler S5", "Erreur sonde S5");
		t.assertNextLocalizedTextEquals("Sensor fault S6", "Sensorfehler S6", "Erreur sonde S6");
		t.assertNextLocalizedTextEquals("Sensor fault S7", "Sensorfehler S7", "Erreur sonde S7");
		t.assertNextLocalizedTextEquals("Sensor fault S8", "Sensorfehler S8", "Erreur sonde S8");
		t.assertNextLocalizedTextEquals("Sensor short-circuit mask", "Sensorkurzschluss-Maske", "Masque court-circuit sonde");
		t.assertNextLocalizedTextEquals("Sensor short-circuit number", "Sensorkurzschluss-Nummer", "Numéro sonde en court circuit");
		t.assertNextLocalizedTextEquals("Sensor mask", "Sensormaske", "Masque sonde");
		t.assertNextLocalizedTextEquals("Sensor module in use", "Sensormodul wird verwendet", "Module de sondes utilisé");
		t.assertNextLocalizedTextEquals("Sim5", "Sim5", "Sim 5");
		t.assertNextLocalizedTextEquals("Slave 1: Fehlermaske", "Slave 1: Fehlermaske", "Slave 1: Fehlermaske");
		t.assertNextLocalizedTextEquals("Slave 1: Primärpumpe Betriebssekunden", "Slave 1: Primärpumpe Betriebssekunden", "Slave 1: Primärpumpe Betriebssekunden");
		t.assertNextLocalizedTextEquals("Slave 1: Primärpumpe Drehzahl", "Slave 1: Primärpumpe Drehzahl", "Slave 1: Primärpumpe Drehzahl");
		t.assertNextLocalizedTextEquals("Slave 1: Reglervariante", "Slave 1: Reglervariante", "Slave 1: Reglervariante");
		t.assertNextLocalizedTextEquals("Slave 1: Stationsbetriebssekunden", "Slave 1: Stationsbetriebssekunden", "Slave 1: Stationsbetriebssekunden");
		t.assertNextLocalizedTextEquals("Slave 1: Status", "Slave 1: Status", "Slave 1: Status");
		t.assertNextLocalizedTextEquals("Slave 1: Strangventil Zustand", "Slave 1: Strangventil Zustand", "Slave 1: Strangventil Zustand");
		t.assertNextLocalizedTextEquals("Slave 1: T-KW", "Slave 1: T-KW", "Slave 1: T-KW");
		t.assertNextLocalizedTextEquals("Slave 1: T-SpVL", "Slave 1: T-SpVL", "Slave 1: T-SpVL");
		t.assertNextLocalizedTextEquals("Slave 1: T-WW", "Slave 1: T-WW", "Slave 1: T-WW");
		t.assertNextLocalizedTextEquals("Slave 1: Version", "Slave 1: Version", "Slave 1: Version");
		t.assertNextLocalizedTextEquals("Slave 1: Volumenstrom", "Slave 1: Volumenstrom", "Slave 1: Volumenstrom");
		t.assertNextLocalizedTextEquals("Slave 2: Fehlermaske", "Slave 2: Fehlermaske", "Slave 2: Fehlermaske");
		t.assertNextLocalizedTextEquals("Slave 2: Primärpumpe Betriebssekunden", "Slave 2: Primärpumpe Betriebssekunden", "Slave 2: Primärpumpe Betriebssekunden");
		t.assertNextLocalizedTextEquals("Slave 2: Primärpumpe Drehzahl", "Slave 2: Primärpumpe Drehzahl", "Slave 2: Primärpumpe Drehzahl");
		t.assertNextLocalizedTextEquals("Slave 2: Reglervariante", "Slave 2: Reglervariante", "Slave 2: Reglervariante");
		t.assertNextLocalizedTextEquals("Slave 2: Stationsbetriebssekunden", "Slave 2: Stationsbetriebssekunden", "Slave 2: Stationsbetriebssekunden");
		t.assertNextLocalizedTextEquals("Slave 2: Status", "Slave 2: Status", "Slave 2: Status");
		t.assertNextLocalizedTextEquals("Slave 2: Strangventil Zustand", "Slave 2: Strangventil Zustand", "Slave 2: Strangventil Zustand");
		t.assertNextLocalizedTextEquals("Slave 2: T-KW", "Slave 2: T-KW", "Slave 2: T-KW");
		t.assertNextLocalizedTextEquals("Slave 2: T-SpVL", "Slave 2: T-SpVL", "Slave 2: T-SpVL");
		t.assertNextLocalizedTextEquals("Slave 2: T-WW", "Slave 2: T-WW", "Slave 2: T-WW");
		t.assertNextLocalizedTextEquals("Slave 2: Version", "Slave 2: Version", "Slave 2: Version");
		t.assertNextLocalizedTextEquals("Slave 2: Volumenstrom", "Slave 2: Volumenstrom", "Slave 2: Volumenstrom");
		t.assertNextLocalizedTextEquals("Slave 3: Fehlermaske", "Slave 3: Fehlermaske", "Slave 3: Fehlermaske");
		t.assertNextLocalizedTextEquals("Slave 3: Primärpumpe Betriebssekunden", "Slave 3: Primärpumpe Betriebssekunden", "Slave 3: Primärpumpe Betriebssekunden");
		t.assertNextLocalizedTextEquals("Slave 3: Primärpumpe Drehzahl", "Slave 3: Primärpumpe Drehzahl", "Slave 3: Primärpumpe Drehzahl");
		t.assertNextLocalizedTextEquals("Slave 3: Reglervariante", "Slave 3: Reglervariante", "Slave 3: Reglervariante");
		t.assertNextLocalizedTextEquals("Slave 3: Stationsbetriebssekunden", "Slave 3: Stationsbetriebssekunden", "Slave 3: Stationsbetriebssekunden");
		t.assertNextLocalizedTextEquals("Slave 3: Status", "Slave 3: Status", "Slave 3: Status");
		t.assertNextLocalizedTextEquals("Slave 3: Strangventil Zustand", "Slave 3: Strangventil Zustand", "Slave 3: Strangventil Zustand");
		t.assertNextLocalizedTextEquals("Slave 3: T-KW", "Slave 3: T-KW", "Slave 3: T-KW");
		t.assertNextLocalizedTextEquals("Slave 3: T-SpVL", "Slave 3: T-SpVL", "Slave 3: T-SpVL");
		t.assertNextLocalizedTextEquals("Slave 3: T-WW", "Slave 3: T-WW", "Slave 3: T-WW");
		t.assertNextLocalizedTextEquals("Slave 3: Version", "Slave 3: Version", "Slave 3: Version");
		t.assertNextLocalizedTextEquals("Slave 3: Volumenstrom", "Slave 3: Volumenstrom", "Slave 3: Volumenstrom");
		t.assertNextLocalizedTextEquals("Software", "Software", "Software");
		t.assertNextLocalizedTextEquals("Software version", "Softwareversion", "Version logiciel");
		t.assertNextLocalizedTextEquals("Software version major", "Softwareversion major", "Software version majeure");
		t.assertNextLocalizedTextEquals("Software version minor", "Softwareversion minor", "Software version mineure");
		t.assertNextLocalizedTextEquals("Sol Plus SL", "Sol Plus SL", "Sol Plus SL");
		t.assertNextLocalizedTextEquals("Solar min. on/off", "Solar Min. Ein/Aus", "Solaire min. on/off");
		t.assertNextLocalizedTextEquals("Solar min. off", "Solar Mindestaus", "Solaire min. off");
		t.assertNextLocalizedTextEquals("Solar min on", "Solar Mindestein", "Solaire min on");
		t.assertNextLocalizedTextEquals("Solar afterheating", "Solar Nachheizung", "Solaire chauffage d'appoint");
		t.assertNextLocalizedTextEquals("Solar dToff", "Solar dTaus", "Solaire dToff");
		t.assertNextLocalizedTextEquals("Solar dTon", "Solar dTein", "Solaire dTon");
		t.assertNextLocalizedTextEquals("SolarNor Drainback", "SolarNor Drainback", "SolarNor Drainback");
		t.assertNextLocalizedTextEquals("Solar circuit active", "Solarkreis aktiv", "Circuit solaire actif");
		t.assertNextLocalizedTextEquals("Solar circuit on", "Solarkreis ein", "Circuit solaire on");
		t.assertNextLocalizedTextEquals("Solar phase", "Solarphase", "Phase solaire");
		t.assertNextLocalizedTextEquals("Solar heat", "Solarwärme", "Chaleur solaire");
		t.assertNextLocalizedTextEquals("Solar heat_1s", "Solarwärme_1s", "Chaleur solaire_1s");
		t.assertNextLocalizedTextEquals("Set value", "Sollwert", "Valeur nominale");
		t.assertNextLocalizedTextEquals("Set value adaptation", "Sollwertanpassung", "Adaptation valeur nominale");
		t.assertNextLocalizedTextEquals("Summer operation", "Sommerbetrieb", "Mode été");
		t.assertNextLocalizedTextEquals("Voltage 10 V", "Spannung 10V", "Tension 10 V");
		t.assertNextLocalizedTextEquals("Store draw-off", "Speicher Entnahme", "Réservoir puisage");
		t.assertNextLocalizedTextEquals("Store solar", "Speicher Solar", "Réservoir solaire");
		t.assertNextLocalizedTextEquals("Store empty", "Speicher leer", "Réservoir vide");
		t.assertNextLocalizedTextEquals("Store base", "Speicher unten", "Réservoir bas");
		t.assertNextLocalizedTextEquals("Speicher-Temperatur (TS)", "Speicher-Temperatur (TS)", "Speicher-Temperatur (TS)");
		t.assertNextLocalizedTextEquals("Store demand temperature (off)", "Speicheranforderungstemperatur (aus)", "Température demande réservoir (off)");
		t.assertNextLocalizedTextEquals("Store demand temperature (on)", "Speicheranforderungstemperatur (ein)", "Température demande réservoir (on)");
		t.assertNextLocalizedTextEquals("Store cooling temperature", "Speicherkühltemperatur", "Température refroidissement réservoir");
		t.assertNextLocalizedTextEquals("Store cooling", "Speicherkühlung", "Refroidissement réservoir");
		t.assertNextLocalizedTextEquals("Maximum store temperature", "Speichermaximaltemperatur", "Température maximale du réservoir");
		t.assertNextLocalizedTextEquals("Minimum store temperature", "Speicherminimaltemperatur", "Température minimale du réservoir");
		t.assertNextLocalizedTextEquals("Emergency store temperature", "Speichernottemperatur", "Température sécurité réservoir");
		t.assertNextLocalizedTextEquals("Speicherofenregler", "Speicherofenregler", "Speicherofenregler");
		t.assertNextLocalizedTextEquals("Store temperature", "Speichertemperatur", "Température réservoir");
		t.assertNextLocalizedTextEquals("Store temperature 1", "Speichertemperatur 1", "Température réservoir 1");
		t.assertNextLocalizedTextEquals("Store temperature 1 (Bus)", "Speichertemperatur 1 (Bus)", "Température réservoir 1 (Bus)");
		t.assertNextLocalizedTextEquals("Store temperature 2", "Speichertemperatur 2", "Température réservoir 2");
		t.assertNextLocalizedTextEquals("Store temperature 2 (Bus)", "Speichertemperatur 2 (Bus)", "Température réservoir 2 (Bus)");
		t.assertNextLocalizedTextEquals("Store flow", "Speichervorlauf", "Départ du réservoir");
		t.assertNextLocalizedTextEquals("Spreading", "Spreizung", "Ecart");
		t.assertNextLocalizedTextEquals("Stabilise", "Stabilisieren", "Stabiliser");
		t.assertNextLocalizedTextEquals("Stabilisation", "Stabilisierung", "Stabilisation");
		t.assertNextLocalizedTextEquals("Standard-Infos", "Standard-Infos", "Standard-Infos");
		t.assertNextLocalizedTextEquals("Station 2 vorhanden", "Station 2 vorhanden", "Station 2 vorhanden");
		t.assertNextLocalizedTextEquals("Station 3 vorhanden", "Station 3 vorhanden", "Station 3 vorhanden");
		t.assertNextLocalizedTextEquals("Station 4 vorhanden", "Station 4 vorhanden", "Station 4 vorhanden");
		t.assertNextLocalizedTextEquals("Operating seconds station", "Stationsbetriebssekunden", "Secondes de fonctionnement station");
		t.assertNextLocalizedTextEquals("Status", "Status", "Etat");
		t.assertNextLocalizedTextEquals("Status HC1 module", "Status HK1 Modul", "Etat module CC1");
		t.assertNextLocalizedTextEquals("Status HC2 module", "Status HK2 Modul", "Etat module CC2");
		t.assertNextLocalizedTextEquals("Status HC3 module ", "Status HK3 Modul", "Etat module CC3");
		t.assertNextLocalizedTextEquals("Heating circuit status", "Status Heizkreis", "Etat circuit chauffage");
		t.assertNextLocalizedTextEquals("Status relay 1", "Status Relais 1", "Etat relais 1");
		t.assertNextLocalizedTextEquals("Status relay2", "Status Relais 2", "Etat relais 2");
		t.assertNextLocalizedTextEquals("Relay 3 status", "Status Relais 3", "Etat relais 3");
		t.assertNextLocalizedTextEquals("Relay 4 status", "Status Relais 4", "Etat relais 4");
		t.assertNextLocalizedTextEquals("Status relay 5", "Status Relais 5", "Etat relais 5");
		t.assertNextLocalizedTextEquals("Status info 1", "Status-Info 1", "Etat info 1");
		t.assertNextLocalizedTextEquals("Status info 2", "Status-Info 2", "Etat info 2");
		t.assertNextLocalizedTextEquals("Remaining status runtime", "Status-Restlaufzeit", "Etat temps restant");
		t.assertNextLocalizedTextEquals("Status flag_1s", "Statusflag_1s", "Status flag_1s");
		t.assertNextLocalizedTextEquals("Status mask", "Statusmask", "Masque d'état");
		t.assertNextLocalizedTextEquals("Status mask", "Statusmaske", "Masque état");
		t.assertNextLocalizedTextEquals("Control register", "Steuerregister", "Registre de contrôle");
		t.assertNextLocalizedTextEquals("Control time (tc)", "Steuerungszeit (tc)", "Temps de contrôle (tc)");
		t.assertNextLocalizedTextEquals("Current1", "Strom1", "Tarif1");
		t.assertNextLocalizedTextEquals("Current2", "Strom2", "Tarif2");
		t.assertNextLocalizedTextEquals("Rated current 1", "Stromstärke 1", "Intensité du courant 1");
		t.assertNextLocalizedTextEquals("Rated current 2", "Stromstärke 2", "Intensité du courant 2");
		t.assertNextLocalizedTextEquals("Rated current 1_1s", "Stromstärke1_1s", "Intensité du courant1_1s");
		t.assertNextLocalizedTextEquals("Rated current 2_1s", "Stromstärke2_1s", "Intensité du courant2_1s");
		t.assertNextLocalizedTextEquals("Flow velocity", "Strömungsgeschwindigkeit", "Vitesse du débit");
		t.assertNextLocalizedTextEquals("Strömungswächter LT-Kreis:", "Strömungswächter LT-Kreis:", "Strömungswächter LT-Kreis:");
		t.assertNextLocalizedTextEquals("SunGo XL", "SunGo XL", "SunGo XL");
		t.assertNextLocalizedTextEquals("System", "System", "Système");
		t.assertNextLocalizedTextEquals("System code:", "Systemcode:", "Code système :");
		t.assertNextLocalizedTextEquals("System date", "Systemdatum", "Date système");
		t.assertNextLocalizedTextEquals("System pressure", "Systemdruck", "Pression système");
		t.assertNextLocalizedTextEquals("Systemflow.Parameteraenderungen", "Systemflow.Parameteraenderungen", "Systemflow.Parameteraenderungen");
		t.assertNextLocalizedTextEquals("System cooling", "Systemkühlung", "Refroidissement système");
		t.assertNextLocalizedTextEquals("System message", "Systemmeldung", "Message système");
		t.assertNextLocalizedTextEquals("System time", "Systemzeit", "Heure Système");
		t.assertNextLocalizedTextEquals("System time2", "Systemzeit2", "Heure Système2");
		t.assertNextLocalizedTextEquals("System time:", "Systemzeit:", "Heure Système :");
		t.assertNextLocalizedTextEquals("T A1 OUT:", "T A1 OUT:", "T A1 OUT:");
		t.assertNextLocalizedTextEquals("T A2 OUT:", "T A2 OUT:", "T A2 OUT:");
		t.assertNextLocalizedTextEquals("T AMB:", "T AMB:", "T AMB:");
		t.assertNextLocalizedTextEquals("T pool cooling function", "T Beckenkühlfkt", "T Fonction refroidissement Piscine");
		t.assertNextLocalizedTextEquals("T E1 OUT:", "T E1 OUT:", "T E1 OUT:");
		t.assertNextLocalizedTextEquals("T E2 OUT:", "T E2 OUT:", "T E2 OUT:");
		t.assertNextLocalizedTextEquals("T HT Ext:", "T HT Ext:", "T HT Ext:");
		t.assertNextLocalizedTextEquals("T HT OUT:", "T HT OUT:", "T HT OUT:");
		t.assertNextLocalizedTextEquals("T LT Ext:", "T LT Ext:", "T LT Ext:");
		t.assertNextLocalizedTextEquals("T LT IN AVG", "T LT IN AVG", "T LT IN AVG");
		t.assertNextLocalizedTextEquals("T LT IN Cycle", "T LT IN Cycle", "T LT IN Cycle");
		t.assertNextLocalizedTextEquals("T LT IN:", "T LT IN:", "T LT IN:");
		t.assertNextLocalizedTextEquals("T LT OUT Cycle", "T LT OUT Cycle", "T LT OUT Cycle");
		t.assertNextLocalizedTextEquals("T LT OUT:", "T LT OUT:", "T LT OUT:");
		t.assertNextLocalizedTextEquals("T LTS OUT AVG", "T LTS OUT AVG", "T LTS OUT AVG");
		t.assertNextLocalizedTextEquals("T MT IN:", "T MT IN:", "T MT IN:");
		t.assertNextLocalizedTextEquals("T MT OUT AVG", "T MT OUT AVG", "T MT OUT AVG");
		t.assertNextLocalizedTextEquals("T MT OUT Cycle", "T MT OUT Cycle", "T MT OUT Cycle");
		t.assertNextLocalizedTextEquals("T MT OUT:", "T MT OUT:", "T MT OUT:");
		t.assertNextLocalizedTextEquals("T-KW", "T-KW", "T-KW");
		t.assertNextLocalizedTextEquals("T-return / S2", "T-Rücklauf/S2", "T-Retour /S2");
		t.assertNextLocalizedTextEquals("T-return / S2_1s", "T-Rücklauf/S2_1s", "T-Retour /S2_1s");
		t.assertNextLocalizedTextEquals("T-sensor fault", "T-Sensor Fehler", "T-Sonde erreur");
		t.assertNextLocalizedTextEquals("T-ambient", "T-Umgebung", "T-Ambiance");
		t.assertNextLocalizedTextEquals("T-ambient_1s", "T-Umgebung_1s", "T-ambiant_1s");
		t.assertNextLocalizedTextEquals("T-VL", "T-VL", "T-VL");
		t.assertNextLocalizedTextEquals("T-flow / S1", "T-Vorlauf/S1", "T- Départ / S1");
		t.assertNextLocalizedTextEquals("T-flow / S1_1s", "T-Vorlauf/S1_1s", "T- Départ / S1_1s");
		t.assertNextLocalizedTextEquals("T-WW", "T-WW", "T-WW");
		t.assertNextLocalizedTextEquals("TAC", "TAC", "TAC");
		t.assertNextLocalizedTextEquals("TAF", "TAF", "TAF");
		t.assertNextLocalizedTextEquals("TAGE", "TAGE", "TAGE");
		t.assertNextLocalizedTextEquals("TAus", "TAus", "TAus");
		t.assertNextLocalizedTextEquals("TBC", "TBC", "TBC");
		t.assertNextLocalizedTextEquals("TBF", "TBF", "TBF");
		t.assertNextLocalizedTextEquals("TC", "TC", "TC");
		t.assertNextLocalizedTextEquals("TCAP", "TCAP", "TCAP");
		t.assertNextLocalizedTextEquals("TEF", "TEF", "TEF");
		t.assertNextLocalizedTextEquals("TEin", "TEin", "TEin");
		t.assertNextLocalizedTextEquals("TKW", "TKW", "TKW");
		t.assertNextLocalizedTextEquals("TKW (S4)", "TKW (S4)", "TKW (S4)");
		t.assertNextLocalizedTextEquals("TLR2", "TLR2", "TLR2");
		t.assertNextLocalizedTextEquals("TPlan Timer", "TPlan Timer", "TPlan Timer");
		t.assertNextLocalizedTextEquals("TRB", "TRB", "TRB");
		t.assertNextLocalizedTextEquals("TRH", "TRH", "TRH");
		t.assertNextLocalizedTextEquals("TSA", "TSA", "TSA");
		t.assertNextLocalizedTextEquals("TSC", "TSC", "TSC");
		t.assertNextLocalizedTextEquals("TSF", "TSF", "TSF");
		t.assertNextLocalizedTextEquals("TSL", "TSL", "TSL");
		t.assertNextLocalizedTextEquals("TSL_1s", "TSL_1s", "TSL_1s");
		t.assertNextLocalizedTextEquals("TSS", "TSS", "TSS");
		t.assertNextLocalizedTextEquals("TSpVL", "TSpVL", "TSpVL");
		t.assertNextLocalizedTextEquals("TSpVL (S1)", "TSpVL (S1)", "TSpVL (S1)");
		t.assertNextLocalizedTextEquals("TflowSet", "TVorlaufSoll", "TdépartNom");
		t.assertNextLocalizedTextEquals("TW: Temperature sensor 1", "TW: Temperatur Sensor 1", "TE : Température sonde 1");
		t.assertNextLocalizedTextEquals("TW: Temperature sensor 2", "TW: Temperatur Sensor 2", "TE : Température sonde 2");
		t.assertNextLocalizedTextEquals("TW: Temperature sensor 3", "TW: Temperatur Sensor 3", "TE : Température sonde 3");
		t.assertNextLocalizedTextEquals("TW: Temperature sensor 4", "TW: Temperatur Sensor 4", "TE : Température sonde 4");
		t.assertNextLocalizedTextEquals("TWAMA", "TWAMA", "TMALA");
		t.assertNextLocalizedTextEquals("THW", "TWW", "TEC");
		t.assertNextLocalizedTextEquals("T_Wabs", "T_Wabs", "T_Wabs");
		t.assertNextLocalizedTextEquals("Day", "Tag", "Jour");
		t.assertNextLocalizedTextEquals("Day:", "Tag:", "Jour:");
		t.assertNextLocalizedTextEquals("Day error code", "Tagesfehlercode", "Code erreur jour");
		t.assertNextLocalizedTextEquals("Day correction", "Tageskorrektur", "Correction jour");
		t.assertNextLocalizedTextEquals("Soil temperature", "Temperatur Erde", "Température sol");
		t.assertNextLocalizedTextEquals("Temperature GFD", "Temperatur GFD", "Température GFD");
		t.assertNextLocalizedTextEquals("Temperature GFD1", "Temperatur GFD1", "Température GFD1");
		t.assertNextLocalizedTextEquals("Temperature GFD2", "Temperatur GFD2", "Température GFD2");
		t.assertNextLocalizedTextEquals("Cold water temperature", "Temperatur Kaltwasser", "Température eau froide");
		t.assertNextLocalizedTextEquals("Collector temperature", "Temperatur Kollektoren", "Température capteurs");
		t.assertNextLocalizedTextEquals("Mixing valve temperature", "Temperatur Mischer", "Température vanne mélangeuse");
		t.assertNextLocalizedTextEquals("Temperature Module 1 Sensor 1", "Temperatur Modul 1 Sensor 1", "Température Module 1 Sonde 1");
		t.assertNextLocalizedTextEquals("Temperature Module 1 Sensor 2", "Temperatur Modul 1 Sensor 2", "Température Module 1 Sonde 2");
		t.assertNextLocalizedTextEquals("Temperature Module 1 Sensor 3", "Temperatur Modul 1 Sensor 3", "Température Module 1 Sonde 3");
		t.assertNextLocalizedTextEquals("Temperature Module 1 Sensor 4", "Temperatur Modul 1 Sensor 4", "Température Module 1 Sonde 4");
		t.assertNextLocalizedTextEquals("Temperature Module 1 Sensor 5", "Temperatur Modul 1 Sensor 5", "Température Module 1 Sonde 5");
		t.assertNextLocalizedTextEquals("Temperature Module 1 Sensor 6", "Temperatur Modul 1 Sensor 6", "Température Module 1 Sonde 6");
		t.assertNextLocalizedTextEquals("Temperature Module 2 Sensor 1", "Temperatur Modul 2 Sensor 1", "Température Module 2 Sonde 1");
		t.assertNextLocalizedTextEquals("Temperature Module 2 Sensor 2", "Temperatur Modul 2 Sensor 2", "Température Module 2 Sonde 2");
		t.assertNextLocalizedTextEquals("Temperature Module 2 Sensor 3", "Temperatur Modul 2 Sensor 3", "Température Module 2 Sonde 3");
		t.assertNextLocalizedTextEquals("Temperature Module 2 Sensor 4", "Temperatur Modul 2 Sensor 4", "Température Module 2 Sonde 4");
		t.assertNextLocalizedTextEquals("Temperature Module 2 Sensor 5", "Temperatur Modul 2 Sensor 5", "Température Module 2 Sonde 5");
		t.assertNextLocalizedTextEquals("Temperature Module 2 Sensor 6", "Temperatur Modul 2 Sensor 6", "Température Module 2 Sonde 6");
		t.assertNextLocalizedTextEquals("Temperature Module 3 Sensor 1", "Temperatur Modul 3 Sensor 1", "Température Module 3 Sonde 1");
		t.assertNextLocalizedTextEquals("Temperature Module 3 Sensor 2", "Temperatur Modul 3 Sensor 2", "Température Module 3 Sonde 2");
		t.assertNextLocalizedTextEquals("Temperature Module 3 Sensor 3", "Temperatur Modul 3 Sensor 3", "Température Module 3 Sonde 3");
		t.assertNextLocalizedTextEquals("Temperature Module 3 Sensor 4", "Temperatur Modul 3 Sensor 4", "Température Module 3 Sonde 4");
		t.assertNextLocalizedTextEquals("Temperature Module 3 Sensor 5", "Temperatur Modul 3 Sensor 5", "Température Module 3 Sonde 5");
		t.assertNextLocalizedTextEquals("Temperature Module 3 Sensor 6", "Temperatur Modul 3 Sensor 6", "Température Module 3 Sonde 6");
		t.assertNextLocalizedTextEquals("Temperature Module 4 Sensor 1", "Temperatur Modul 4 Sensor 1", "Température Module 4 Sonde 1");
		t.assertNextLocalizedTextEquals("Temperature Module 4 Sensor 2", "Temperatur Modul 4 Sensor 2", "Température Module 4 Sonde 2");
		t.assertNextLocalizedTextEquals("Temperature Module 4 Sensor 3", "Temperatur Modul 4 Sensor 3", "Température Module 4 Sonde 3");
		t.assertNextLocalizedTextEquals("Temperature Module 4 Sensor 4", "Temperatur Modul 4 Sensor 4", "Température Module 4 Sonde 4");
		t.assertNextLocalizedTextEquals("Temperature Module 4 Sensor 5", "Temperatur Modul 4 Sensor 5", "Température Module 4 Sonde 5");
		t.assertNextLocalizedTextEquals("Temperature Module 4 Sensor 6", "Temperatur Modul 4 Sensor 6", "Température Module 4 Sonde 6");
		t.assertNextLocalizedTextEquals("Temperature Module 5 Sensor 1", "Temperatur Modul 5 Sensor 1", "Température Module 5 Sonde 1");
		t.assertNextLocalizedTextEquals("Temperature Module 5 Sensor 2", "Temperatur Modul 5 Sensor 2", "Température Module 5 Sonde 2");
		t.assertNextLocalizedTextEquals("Temperature Module 5 Sensor 3", "Temperatur Modul 5 Sensor 3", "Température Module 5 Sonde 3");
		t.assertNextLocalizedTextEquals("Temperature Module 5 Sensor 4", "Temperatur Modul 5 Sensor 4", "Température Module 5 Sonde 4");
		t.assertNextLocalizedTextEquals("Temperature Module 5 Sensor 5", "Temperatur Modul 5 Sensor 5", "Température Module 5 Sonde 5");
		t.assertNextLocalizedTextEquals("Temperature Module 5 Sensor 6", "Temperatur Modul 5 Sensor 6", "Température Module 5 Sonde 6");
		t.assertNextLocalizedTextEquals("Buffer temperature", "Temperatur Puffer", "Température tampon");
		t.assertNextLocalizedTextEquals("Source temperature", "Temperatur Quelle", "Température source");
		t.assertNextLocalizedTextEquals("Source temperature (Control)", "Temperatur Quelle (Regel)", "Température source (Contrôle)");
		t.assertNextLocalizedTextEquals("Temperature RPS", "Temperatur RPS", "Température RPS");
		t.assertNextLocalizedTextEquals("Return temperature", "Temperatur Rücklauf", "Température retour");
		t.assertNextLocalizedTextEquals("Temperature Return (sensor 2)", "Temperatur Rücklauf (Sensor 2)", "Température retour (sonde 2)");
		t.assertNextLocalizedTextEquals("Temperature S,p", "Temperatur S,p", "Température S,p");
		t.assertNextLocalizedTextEquals("Temperature S,s", "Temperatur S,s", "Température S,s");
		t.assertNextLocalizedTextEquals("Temperature S1", "Temperatur S1", "Température S1");
		t.assertNextLocalizedTextEquals("Temperature S2", "Temperatur S2", "Température S2");
		t.assertNextLocalizedTextEquals("Temperature S3", "Temperatur S3", "Température S3");
		t.assertNextLocalizedTextEquals("Temperature S4", "Temperatur S4", "Température S4");
		t.assertNextLocalizedTextEquals("Temperature sensor 1", "Temperatur Sensor 1", "Température sonde 1");
		t.assertNextLocalizedTextEquals("Temperature sensor 10", "Temperatur Sensor 10", "Température sonde 10");
		t.assertNextLocalizedTextEquals("Temperature sensor 11", "Temperatur Sensor 11", "Température sonde 11");
		t.assertNextLocalizedTextEquals("Temperature sensor 12", "Temperatur Sensor 12", "Température sonde 12");
		t.assertNextLocalizedTextEquals("Temperature sensor 13", "Temperatur Sensor 13", "Température sonde 13");
		t.assertNextLocalizedTextEquals("Temperature sensor 14", "Temperatur Sensor 14", "Température sonde 14");
		t.assertNextLocalizedTextEquals("Temperature sensor 15", "Temperatur Sensor 15", "Température sonde 15");
		t.assertNextLocalizedTextEquals("Temperature sensor 16", "Temperatur Sensor 16", "Température sonde 16");
		t.assertNextLocalizedTextEquals("Temperature sensor 17", "Temperatur Sensor 17", "Température sonde 17");
		t.assertNextLocalizedTextEquals("Temperature sensor 18", "Temperatur Sensor 18", "Température sonde18");
		t.assertNextLocalizedTextEquals("Temperature sensor 19", "Temperatur Sensor 19", "Température sonde 19");
		t.assertNextLocalizedTextEquals("Temperature sensor 2", "Temperatur Sensor 2", "Température sonde 2");
		t.assertNextLocalizedTextEquals("Temperature sensor 20", "Temperatur Sensor 20", "Température sonde 20");
		t.assertNextLocalizedTextEquals("Temperature sensor 21", "Temperatur Sensor 21", "Température sonde 21");
		t.assertNextLocalizedTextEquals("Temperature sensor 22", "Temperatur Sensor 22", "Température sonde 22");
		t.assertNextLocalizedTextEquals("Temperature sensor 23", "Temperatur Sensor 23", "Température sonde 23");
		t.assertNextLocalizedTextEquals("Temperature sensor 24", "Temperatur Sensor 24", "Température sonde 24");
		t.assertNextLocalizedTextEquals("Temperature sensor 25", "Temperatur Sensor 25", "Température sonde 25");
		t.assertNextLocalizedTextEquals("Temperature sensor 26", "Temperatur Sensor 26", "Température sonde 26");
		t.assertNextLocalizedTextEquals("Temperature sensor 27", "Temperatur Sensor 27", "Température sonde 27");
		t.assertNextLocalizedTextEquals("Temperature sensor 28", "Temperatur Sensor 28", "Température sonde 28");
		t.assertNextLocalizedTextEquals("Temperature sensor 29", "Temperatur Sensor 29", "Température sonde 29");
		t.assertNextLocalizedTextEquals("Temperature sensor 3", "Temperatur Sensor 3", "Température sonde 3");
		t.assertNextLocalizedTextEquals("Temperature sensor 30", "Temperatur Sensor 30", "Température sonde 30");
		t.assertNextLocalizedTextEquals("Temperature sensor 31", "Temperatur Sensor 31", "Température sonde 31");
		t.assertNextLocalizedTextEquals("Temperature sensor 32", "Temperatur Sensor 32", "Température sonde 32");
		t.assertNextLocalizedTextEquals("Temperature sensor 33", "Temperatur Sensor 33", "Température sonde 33");
		t.assertNextLocalizedTextEquals("Temperature sensor 34", "Temperatur Sensor 34", "Température sonde 34");
		t.assertNextLocalizedTextEquals("Temperature sensor 35", "Temperatur Sensor 35", "Température sonde 35");
		t.assertNextLocalizedTextEquals("Temperature sensor 36", "Temperatur Sensor 36", "Température sonde 36");
		t.assertNextLocalizedTextEquals("Temperature sensor 37", "Temperatur Sensor 37", "Température sonde 37");
		t.assertNextLocalizedTextEquals("Temperature sensor 38", "Temperatur Sensor 38", "Température sonde 38");
		t.assertNextLocalizedTextEquals("Temperature sensor 39", "Temperatur Sensor 39", "Température sonde 39");
		t.assertNextLocalizedTextEquals("Temperature sensor 4", "Temperatur Sensor 4", "Température sonde 4");
		t.assertNextLocalizedTextEquals("Temperature sensor 4 (>= v1.02)", "Temperatur Sensor 4 (>= v1.02)", "Température sonde 4 (>= v1.02)");
		t.assertNextLocalizedTextEquals("Temperature sensor 40", "Temperatur Sensor 40", "Température sonde 40");
		t.assertNextLocalizedTextEquals("Temperature sensor 5", "Temperatur Sensor 5", "Température sonde 5");
		t.assertNextLocalizedTextEquals("Temperature sensor 6", "Temperatur Sensor 6", "Température sonde 6");
		t.assertNextLocalizedTextEquals("Temperature sensor 7", "Temperatur Sensor 7", "Température sonde 7");
		t.assertNextLocalizedTextEquals("Temperature sensor 8", "Temperatur Sensor 8", "Température sonde 8");
		t.assertNextLocalizedTextEquals("Temperature sensor 9", "Temperatur Sensor 9", "Température sonde 9");
		t.assertNextLocalizedTextEquals("Temperature sensor DDS", "Temperatur Sensor DDS", "Température sonde DDS");
		t.assertNextLocalizedTextEquals("Temperature sensor Ga1", "Temperatur Sensor Ga1", "Température sonde Ga1");
		t.assertNextLocalizedTextEquals("Temperature sensor Ga2", "Temperatur Sensor Ga2", "Température sonde Ga2");
		t.assertNextLocalizedTextEquals("Temperature sensor Gds1", "Temperatur Sensor Gds1", "Température sonde Gds1");
		t.assertNextLocalizedTextEquals("Temperature sensor Gds2", "Temperatur Sensor Gds2", "Température sonde Gds2");
		t.assertNextLocalizedTextEquals("Temperature sensor VFS", "Temperatur Sensor VFS", "Température sonde VFS");
		t.assertNextLocalizedTextEquals("Temperature sensor VFS/US", "Temperatur Sensor VFS/US", "Température sonde VFS/US");
		t.assertNextLocalizedTextEquals("Temperatur Speicher (Sensor 1)", "Temperatur Speicher (Sensor 1)", "Temperatur Speicher (Sensor 1)");
		t.assertNextLocalizedTextEquals("Temperature Speicher Oben", "Temperatur Speicher Oben", "Température réservoir en haut");
		t.assertNextLocalizedTextEquals("Temperature Speicher Unten", "Temperatur Speicher Unten", "Température réservoir en bas");
		t.assertNextLocalizedTextEquals("Temperature Store top (sensor 3)", "Temperatur Speicher oben (Sensor 3)", "Température réservoir en haut (sonde 3)");
		t.assertNextLocalizedTextEquals("Temperature T,H", "Temperatur T,H", "Temperature T,H");
		t.assertNextLocalizedTextEquals("Temperature T-x", "Temperatur T-x", "Temperature T-x");
		t.assertNextLocalizedTextEquals("Temperature T-xx", "Temperatur T-xx", "Temperature T-xx");
		t.assertNextLocalizedTextEquals("Temperature VFD1", "Temperatur VFD1", "Température VFD1");
		t.assertNextLocalizedTextEquals("Temperature VFS", "Temperatur VFS", "Température VFS");
		t.assertNextLocalizedTextEquals("Temperature VFS/RPS (S6)", "Temperatur VFS/RPS (S6)", "Température VFS/RPS (S6)");
		t.assertNextLocalizedTextEquals("Evap. temperature", "Temperatur Verdampf", "Température vaporisation");
		t.assertNextLocalizedTextEquals("Flow temperature", "Temperatur Vorlauf", "Température Départ");
		t.assertNextLocalizedTextEquals("Temperature Flow (sensor 1)", "Temperatur Vorlauf (Sensor 1)", "Température départ (sonde 1)");
		t.assertNextLocalizedTextEquals("HP return temperature", "Temperatur WP-RL", "Température retour PAC");
		t.assertNextLocalizedTextEquals("HP flow temperature", "Temperatur WP-VL", "Température départ PAC");
		t.assertNextLocalizedTextEquals("DHW set temperature", "Temperatur WW-Soll", "Température nominale ECS");
		t.assertNextLocalizedTextEquals("DHW temperature", "Temperatur Warmwasser", "Température ECS");
		t.assertNextLocalizedTextEquals("DHW temperature (Display)", "Temperatur Warmwasser (Anzeige)", "Température ECS (Affichage)");
		t.assertNextLocalizedTextEquals("DHW temperature (Control)", "Temperatur Warmwasser (Regel)", "Température ECS (Contrôle)");
		t.assertNextLocalizedTextEquals("Circulation temperature", "Temperatur Zirkulation", "Température Circulation");
		t.assertNextLocalizedTextEquals("Temperature behind underground tank (S3)", "Temperatur hinter Erdspeicher (S3)", "Température après rés. enterré (S3)");
		t.assertNextLocalizedTextEquals("Temperature behind pump 1 (S4)", "Temperatur hinter Pumpe 1 (S4)", "Température après pompe 1 (S4)");
		t.assertNextLocalizedTextEquals("Temperature behind heat pump (S2)", "Temperatur hinter Wärmepumpe (S2)", "Température après PAC (S2)");
		t.assertNextLocalizedTextEquals("Max. cold water temperature", "Temperatur max. Kaltwasser", "Température max. eau froide");
		t.assertNextLocalizedTextEquals("Min. cold water temperature", "Temperatur min. Kaltwasser", "Température min. eau froide");
		t.assertNextLocalizedTextEquals("Temperature Sensor 1", "Temperature Sensor 1", "Température Sonde 1");
		t.assertNextLocalizedTextEquals("Temperature Sensor 2", "Temperature Sensor 2", "Température Sonde 2");
		t.assertNextLocalizedTextEquals("Temperature Sensor 3", "Temperature Sensor 3", "Température Sonde 3");
		t.assertNextLocalizedTextEquals("Therm. Disinfection", "Therm. Desinfektion", "Désinfection therm.");
		t.assertNextLocalizedTextEquals("Therm. energy1", "Therm. Energie1", "Energie therm.1");
		t.assertNextLocalizedTextEquals("Therm. energy2", "Therm. Energie2", "Energie therm.2");
		t.assertNextLocalizedTextEquals("Thermal disinfection", "Thermische Desinfektion", "Désinfection thermique");
		t.assertNextLocalizedTextEquals("Thermal Circulation", "Thermische Zirkulation", "Circulation thermique");
		t.assertNextLocalizedTextEquals("Thermostat", "Thermostat", "Thermostat");
		t.assertNextLocalizedTextEquals("Thermostat 1", "Thermostat 1", "Thermostat 1");
		t.assertNextLocalizedTextEquals("Timer", "Timer", "Program.");
		t.assertNextLocalizedTextEquals("Timer 1.1", "Timer 1.1", "Programmateur 1.1");
		t.assertNextLocalizedTextEquals("Timer 1.2", "Timer 1.2", "Programmateur 1.2");
		t.assertNextLocalizedTextEquals("Timer 2.1", "Timer 2.1", "Programmateur 2.1");
		t.assertNextLocalizedTextEquals("Timer 2.2", "Timer 2.2", "Programmateur 2.2");
		t.assertNextLocalizedTextEquals("Timer 3.1", "Timer 3.1", "Programmateur 3.1");
		t.assertNextLocalizedTextEquals("Timer 3.2", "Timer 3.2", "Programmateur 3.2");
		t.assertNextLocalizedTextEquals("Timer 4.1", "Timer 4.1", "Programmateur 4.1");
		t.assertNextLocalizedTextEquals("Timer 4.2", "Timer 4.2", "Programmateur 4.2");
		t.assertNextLocalizedTextEquals("Timer 5.1", "Timer 5.1", "Programmateur 5.1");
		t.assertNextLocalizedTextEquals("Timer 5.2", "Timer 5.2", "Programmateur 5.2");
		t.assertNextLocalizedTextEquals("Tcol-est.", "Tkol-erw", "Tcap-est.");
		t.assertNextLocalizedTextEquals("Tmax-temp. / S5", "Tmax-Temp./S5", "Tmax-temp. /S5");
		t.assertNextLocalizedTextEquals("Tmax-temp. / S5_1s", "Tmax-Temp./S5_1s", "Tmax-temp. /S5_1s");
		t.assertNextLocalizedTextEquals("Tset day", "Tsoll-Day", "T nominale jour");
		t.assertNextLocalizedTextEquals("Tuxhorn BHKW", "Tuxhorn BHKW", "Tuxhorn BHKW");
		t.assertNextLocalizedTextEquals("Tuxhorn PKE", "Tuxhorn PKE", "Tuxhorn PKE");
		t.assertNextLocalizedTextEquals("Overtemperature protection active", "Uebertemperaturschutz aktiv", "Protection surtempérature active");
		t.assertNextLocalizedTextEquals("Time", "Uhrzeit", "Heure");
		t.assertNextLocalizedTextEquals("Changeover valve boiler", "Umschaltventil Kessel", "Vanne d'inversion chaudière");
		t.assertNextLocalizedTextEquals("Circulation time counter", "Umwaelzzeitzähler", "Compteur horaire circulation");
		t.assertNextLocalizedTextEquals("Circulation ", "Umwälzung", "Circulation");
		t.assertNextLocalizedTextEquals("UnitType", "UnitType", "UnitType");
		t.assertNextLocalizedTextEquals("Holiday function", "Urlaubsfunktion", "Fonction vacances");
		t.assertNextLocalizedTextEquals("F-Impulse", "V-Impuls", "D-Impulsion");
		t.assertNextLocalizedTextEquals("F sensor errror", "V-Sensor Fehler", "Sonde D erreur");
		t.assertNextLocalizedTextEquals("F-US", "V-US", "D-US");
		t.assertNextLocalizedTextEquals("VDI dT too high", "VDI dT zu hoch", "VDI dT trop élevée");
		t.assertNextLocalizedTextEquals("Variant", "Variante", "Variante");
		t.assertNextLocalizedTextEquals("Ventil", "Ventil", "Ventil");
		t.assertNextLocalizedTextEquals("Valve (R2)", "Ventil (R2)", "Vanne (R2)");
		t.assertNextLocalizedTextEquals("Valve Co", "Ventil Ko", "Vanne Cap");
		t.assertNextLocalizedTextEquals("Valve ST", "Ventil SP", "Vanne Rés");
		t.assertNextLocalizedTextEquals("Valve SW", "Ventil SW", "Vanne SW");
		t.assertNextLocalizedTextEquals("Valve So", "Ventil So", "Vanne So");
		t.assertNextLocalizedTextEquals("Valve HP", "Ventil WP", "Vanne PAC");
		t.assertNextLocalizedTextEquals("Remaining circulation time", "Verbleibende Zirkulationsdauer", "Temp de circulation restant");
		t.assertNextLocalizedTextEquals("Version", "Version", "Version");
		t.assertNextLocalizedTextEquals("Viessmann Vitotrans 353 2017", "Viessmann Vitotrans 353 2017", "Viessmann Vitotrans 353 2017");
		t.assertNextLocalizedTextEquals("Viessmann Vitotrans 353 2017 Broadcast", "Viessmann Vitotrans 353 2017 Broadcast", "Viessmann Vitotrans 353 2017 Broadcast");
		t.assertNextLocalizedTextEquals("Viessmann Vitotrans 353 2017 Master", "Viessmann Vitotrans 353 2017 Master", "Viessmann Vitotrans 353 2017 Master");
		t.assertNextLocalizedTextEquals("Viessmann Vitotrans 353 2017 Slave 1", "Viessmann Vitotrans 353 2017 Slave 1", "Viessmann Vitotrans 353 2017 Slave 1");
		t.assertNextLocalizedTextEquals("Viessmann Vitotrans 353 2017 Slave 2", "Viessmann Vitotrans 353 2017 Slave 2", "Viessmann Vitotrans 353 2017 Slave 2");
		t.assertNextLocalizedTextEquals("Viessmann Vitotrans 353 2017 Slave 3", "Viessmann Vitotrans 353 2017 Slave 3", "Viessmann Vitotrans 353 2017 Slave 3");
		t.assertNextLocalizedTextEquals("Vitosolic 200 [Controller]", "Vitosolic 200 [Regler]", "Vitosolic 200 [Controller]");
		t.assertNextLocalizedTextEquals("Vitosolic 200 [HQM 1]", "Vitosolic 200 [WMZ 1]", "Vitosolic 200 [HQM 1]");
		t.assertNextLocalizedTextEquals("Vitosolic 200 [HQM 2]", "Vitosolic 200 [WMZ 2]", "Vitosolic 200 [HQM 2]");
		t.assertNextLocalizedTextEquals("Vitosolic 200 [HQM1]", "Vitosolic 200 [WMZ1]", "Vitosolic 200 [HQM1]");
		t.assertNextLocalizedTextEquals("Vitosolic 200 [HQM2]", "Vitosolic 200 [WMZ2]", "Vitosolic 200 [HQM2]");
		t.assertNextLocalizedTextEquals("Vload-Day/Vol2", "Vlast-Day/Vol2", "Vcharge-jour/Vol2");
		t.assertNextLocalizedTextEquals("Volume", "Volumen", "Volume");
		t.assertNextLocalizedTextEquals("Volume 1", "Volumen 1", "Volume 1");
		t.assertNextLocalizedTextEquals("Volume 2", "Volumen 2", "Volume 2");
		t.assertNextLocalizedTextEquals("Volume yesterday", "Volumen Gestern", "Volume hier");
		t.assertNextLocalizedTextEquals("Volume today", "Volumen Heute", "Volume aujourd'hui");
		t.assertNextLocalizedTextEquals("Volume year", "Volumen Jahr", "Volume année");
		t.assertNextLocalizedTextEquals("Volume month", "Volumen Monat", "Volume mois");
		t.assertNextLocalizedTextEquals("Volume previous year", "Volumen Vorjahr", "Volume année dernière");
		t.assertNextLocalizedTextEquals("Volume previous month", "Volumen Vormonat", "Volume mois dernier");
		t.assertNextLocalizedTextEquals("Volume previous week", "Volumen Vorwoche", "Volume semaine dernière");
		t.assertNextLocalizedTextEquals("Volume week", "Volumen Woche", "Volume semaine");
		t.assertNextLocalizedTextEquals("Volume in total", "Volumen gesamt", "Volume au total");
		t.assertNextLocalizedTextEquals("Volume today", "Volumen heute", "Volume aujourd'hui");
		t.assertNextLocalizedTextEquals("Flow rate 1", "Volumenstr.1", "Débit 1");
		t.assertNextLocalizedTextEquals("Flow rate 2", "Volumenstr.2", "Débit 2");
		t.assertNextLocalizedTextEquals("Flow rate", "Volumenstrom", "Débit");
		t.assertNextLocalizedTextEquals("Flow rate 1", "Volumenstrom 1", "Débit 1");
		t.assertNextLocalizedTextEquals("Flow rate 2", "Volumenstrom 2", "Débit 2");
		t.assertNextLocalizedTextEquals("Flow rate 3", "Volumenstrom 3", "Débit 3");
		t.assertNextLocalizedTextEquals("Flow rate Flowrotor (S7)", "Volumenstrom Flowrotor (S7)", "Débit FlowRotor (S7)");
		t.assertNextLocalizedTextEquals("Flow rate cold water circuit (dV_LT)", "Volumenstrom Kaltwasserkreis (dV_LT)", "Débit circuit eau froide (dV_LT)");
		t.assertNextLocalizedTextEquals("Flow rate collector", "Volumenstrom Ko", "Débit capteur");
		t.assertNextLocalizedTextEquals("Flow rate Sensor 1", "Volumenstrom Sensor 1", "Débit sonde 1");
		t.assertNextLocalizedTextEquals("Flow rate Sensor 10", "Volumenstrom Sensor 10", "Débit sonde 10");
		t.assertNextLocalizedTextEquals("Flow rate Sensor 11", "Volumenstrom Sensor 11", "Débit sonde 11");
		t.assertNextLocalizedTextEquals("Flow rate Sensor 12", "Volumenstrom Sensor 12", "Débit sonde 12");
		t.assertNextLocalizedTextEquals("Flow rate sensor 13", "Volumenstrom Sensor 13", "Sonde débit 13");
		t.assertNextLocalizedTextEquals("Flow rate sensor 14", "Volumenstrom Sensor 14", "Sonde débit 14");
		t.assertNextLocalizedTextEquals("Flow rate sensor 15", "Volumenstrom Sensor 15", "Sonde débit 15");
		t.assertNextLocalizedTextEquals("Flow rate sensor 17", "Volumenstrom Sensor 17", "Sonde débit 17");
		t.assertNextLocalizedTextEquals("Flow rate sensor 18", "Volumenstrom Sensor 18", "Sonde débit 18");
		t.assertNextLocalizedTextEquals("Flow rate sensor 19", "Volumenstrom Sensor 19", "Sonde débit 19");
		t.assertNextLocalizedTextEquals("Flow rate Sensor 2", "Volumenstrom Sensor 2", "Débit sonde 2");
		t.assertNextLocalizedTextEquals("Flow rate sensor 20", "Volumenstrom Sensor 20", "Sonde débit 20");
		t.assertNextLocalizedTextEquals("Flow rate sensor 21", "Volumenstrom Sensor 21", "Sonde débit 21");
		t.assertNextLocalizedTextEquals("Flow rate Sensor 3", "Volumenstrom Sensor 3", "Débit sonde 3");
		t.assertNextLocalizedTextEquals("Flow rate sensor 8", "Volumenstrom Sensor 8", "Sonde débit 8");
		t.assertNextLocalizedTextEquals("Flow rate Sensor 9", "Volumenstrom Sensor 9", "Débit sonde 9");
		t.assertNextLocalizedTextEquals("Flow rate Sensor FlowRotor", "Volumenstrom Sensor FlowRotor", "Débit sonde FlowRotor");
		t.assertNextLocalizedTextEquals("Flow rate Sensor Ga1", "Volumenstrom Sensor Ga1", "Débit sonde Ga1");
		t.assertNextLocalizedTextEquals("Flow rate Sensor Ga2", "Volumenstrom Sensor Ga2", "Débit sonde Ga2");
		t.assertNextLocalizedTextEquals("Flow rate Sensor Gds1", "Volumenstrom Sensor Gds1", "Débit sonde Gd1");
		t.assertNextLocalizedTextEquals("Flow rate Sensor Gds2", "Volumenstrom Sensor Gds2", "Débit sonde Gd2");
		t.assertNextLocalizedTextEquals("Flow rate Sensor S10/V40", "Volumenstrom Sensor S10/V40", "Débit sonde S10/V40");
		t.assertNextLocalizedTextEquals("Flow rate Sensor V40", "Volumenstrom Sensor V40", "Débit sonde V40");
		t.assertNextLocalizedTextEquals("Flow rate Sensor VFS", "Volumenstrom Sensor VFS", "Débit sonde VFS");
		t.assertNextLocalizedTextEquals("Flow rate US in total", "Volumenstrom US gesamt", "Débit US au total");
		t.assertNextLocalizedTextEquals("Flow rate US1", "Volumenstrom US1", "Débit US1");
		t.assertNextLocalizedTextEquals("Flow rate US2", "Volumenstrom US2", "Débit US2");
		t.assertNextLocalizedTextEquals("Flow rate V40", "Volumenstrom V40", "Débit V40");
		t.assertNextLocalizedTextEquals("Flow rate VFD1", "Volumenstrom VFD1", "Débit VFD1");
		t.assertNextLocalizedTextEquals("Flow rate VFS (S6)", "Volumenstrom VFS (S6)", "Débit VFS (S6)");
		t.assertNextLocalizedTextEquals("Flow rate max.", "Volumenstrom max.", "Débit max.");
		t.assertNextLocalizedTextEquals("Flow rate(S7) defective", "Volumenstrom(S7) defekt", "Sonde débit (S7) défectueuse");
		t.assertNextLocalizedTextEquals("Flow rate-est", "Volumenstrom-erw", "Débit-est");
		t.assertNextLocalizedTextEquals("Flow rate1_1s", "Volumenstrom1_1s", "Débit1_1s");
		t.assertNextLocalizedTextEquals("Flow rate2", "Volumenstrom2", "Débit2");
		t.assertNextLocalizedTextEquals("Flow rate2_1s", "Volumenstrom2_1s", "Débit2_1s");
		t.assertNextLocalizedTextEquals("Flow rate3", "Volumenstrom3", "Débit3");
		t.assertNextLocalizedTextEquals("Flow rate4", "Volumenstrom4", "Débit4");
		t.assertNextLocalizedTextEquals("Flow rate5", "Volumenstrom5", "Débit5");
		t.assertNextLocalizedTextEquals("Flow set HC1 module sensor 18", "Vorlauf Soll HK1 Modul Sensor 18", "Départ nominale module CC1 sonde 18");
		t.assertNextLocalizedTextEquals("Flow set HC2 module sensor 25", "Vorlauf Soll HK2 Modul Sensor 25", "Départ nominale module CC2 sonde 25");
		t.assertNextLocalizedTextEquals("Flow set HC3 module sensor 32", "Vorlauf Soll HK3 Modul Sensor 32", "Départ nominale module CC3 sonde 32");
		t.assertNextLocalizedTextEquals("Flow set heating circuit Sensor 11", "Vorlauf Soll Heizkreis Sensor 11", "Départ nominale CC sonde 11");
		t.assertNextLocalizedTextEquals("Flow set temperature", "Vorlauf-Soll-Temperatur", "Température nominale départ");
		t.assertNextLocalizedTextEquals("Flow limitation", "Vorlaufbegrenzung", "Limitation départ");
		t.assertNextLocalizedTextEquals("Maximum flow temperature", "Vorlaufmaximaltemperatur", "Temparature max. départ");
		t.assertNextLocalizedTextEquals("Flow set temperature", "Vorlaufsolltemperatur", "Température nominale départ");
		t.assertNextLocalizedTextEquals("Flow temperature", "Vorlauftemperatur", "Température Départ");
		t.assertNextLocalizedTextEquals("Flow temperature HC1", "Vorlauftemperatur HK1", "Température nominale du départ CC1");
		t.assertNextLocalizedTextEquals("W Set:", "W Soll:", "W nom:");
		t.assertNextLocalizedTextEquals("WAMA (Counter)", "WAMA (Counter)", "MALA (Compteur)");
		t.assertNextLocalizedTextEquals("WM: Heat quantity", "WM: Wärmemenge", "WM: Quantité de chaleur");
		t.assertNextLocalizedTextEquals("WMZ #", "WMZ #", "WMZ #");
		t.assertNextLocalizedTextEquals("WMZ #0", "WMZ #0", "WMZ #0");
		t.assertNextLocalizedTextEquals("WMZ #1", "WMZ #1", "WMZ #1");
		t.assertNextLocalizedTextEquals("WMZ #10", "WMZ #10", "WMZ #10");
		t.assertNextLocalizedTextEquals("WMZ #11", "WMZ #11", "WMZ #11");
		t.assertNextLocalizedTextEquals("WMZ #12", "WMZ #12", "WMZ #12");
		t.assertNextLocalizedTextEquals("WMZ #13", "WMZ #13", "WMZ #13");
		t.assertNextLocalizedTextEquals("WMZ #14", "WMZ #14", "WMZ #14");
		t.assertNextLocalizedTextEquals("WMZ #15", "WMZ #15", "WMZ #15");
		t.assertNextLocalizedTextEquals("WMZ #2", "WMZ #2", "WMZ #2");
		t.assertNextLocalizedTextEquals("WMZ #3", "WMZ #3", "WMZ #3");
		t.assertNextLocalizedTextEquals("WMZ #4", "WMZ #4", "WMZ #4");
		t.assertNextLocalizedTextEquals("WMZ #5", "WMZ #5", "WMZ #5");
		t.assertNextLocalizedTextEquals("WMZ #6", "WMZ #6", "WMZ #6");
		t.assertNextLocalizedTextEquals("WMZ #7", "WMZ #7", "WMZ #7");
		t.assertNextLocalizedTextEquals("WMZ #8", "WMZ #8", "WMZ #8");
		t.assertNextLocalizedTextEquals("WMZ #9", "WMZ #9", "WMZ #9");
		t.assertNextLocalizedTextEquals("WMZ-L10", "WMZ-L10", "WMZ-L10");
		t.assertNextLocalizedTextEquals("DHW demand temperature (off)", "WW-Anforderungstemperatur (aus)", "Demande ECS (off)");
		t.assertNextLocalizedTextEquals("DHW demand temperature (on)", "WW-Anforderungstemperatur (ein)", "Demande ECS (on)");
		t.assertNextLocalizedTextEquals("DHW heating", "WW-Bereitung", "Production ECS");
		t.assertNextLocalizedTextEquals("DHW set temperature", "WW-Solltemperatur", "Température nominale ECS");
		t.assertNextLocalizedTextEquals("Heat pump operating mode", "Waermepumpe Betriebsmodus", "Mode de fonctionnement Pompe à chaleur");
		t.assertNextLocalizedTextEquals("Heat pump Tcalc. ", "Waermepumpe TProjekt", "Pompe à chaleur Tcalc.");
		t.assertNextLocalizedTextEquals("Heat pump state", "Waermepumpe Zustand", "Etat Pompe à chaleur");
		t.assertNextLocalizedTextEquals("Wagner Sungo 100 [Controller]", "Wagner Sungo 100 [Regler]", "Wagner Sungo 100 [Controller]");
		t.assertNextLocalizedTextEquals("Wagner Sungo 100 [HQM1]", "Wagner Sungo 100 [WMZ1]", "Wagner Sungo 100 [HQM1]");
		t.assertNextLocalizedTextEquals("Warm start", "Warmstart", "Démarrage à chaud");
		t.assertNextLocalizedTextEquals("Hot water set", "Warmwassersoll", "Eau chaude nominale");
		t.assertNextLocalizedTextEquals("DHW set temperature", "Warmwassersolltemperatur", "Température nominale ECS");
		t.assertNextLocalizedTextEquals("Hot water temperature", "Warmwassertemperatur", "Température ECS");
		t.assertNextLocalizedTextEquals("Warningmask", "Warningmask", "Warningmask");
		t.assertNextLocalizedTextEquals("Warning mask", "Warnmaske", "Masque avertisseur");
		t.assertNextLocalizedTextEquals("Warning: Night circulation", "Warnung: Nachtzirkulation", "Avertissement : Circulation nocturne");
		t.assertNextLocalizedTextEquals("Warning: SD card", "Warnung: SD-Karte", "Avertissement : Carte mémoire SD");
		t.assertNextLocalizedTextEquals("Warning: Maximum store temperature", "Warnung: Speichermaximaltemperatur", "Avertissement : Température maximale du réservoir");
		t.assertNextLocalizedTextEquals("Warning: Flow/Return interchanged", "Warnung: Vorlauf/Rücklauf vertauscht", "Avertissement : Départ/retour inversés");
		t.assertNextLocalizedTextEquals("Warning: ΔT too high", "Warnung: ΔT zu hoch", "Avertissement : ΔT trop élevée");
		t.assertNextLocalizedTextEquals("Warning mask", "Warnungen-Maske", "Masque alarme");
		t.assertNextLocalizedTextEquals("Warning mask", "Warnungmaske", "Masque avertisseur");
		t.assertNextLocalizedTextEquals("Warning mask", "Warnungsmaske", "Masque alarme");
		t.assertNextLocalizedTextEquals("Inverter active", "Wechselrichter Aktiv", "Onduleur actif");
		t.assertNextLocalizedTextEquals("Value", "Wert", "Valeur");
		t.assertNextLocalizedTextEquals("Value (week)", "Wert (Woche)", "Valeur (semaine)");
		t.assertNextLocalizedTextEquals("Value (today)", "Wert (heute)", "Valeur (ahjourd'hui)");
		t.assertNextLocalizedTextEquals("Value week", "Wert Woche", "Valeur semaine");
		t.assertNextLocalizedTextEquals("Value today", "Wert heute", "Valeur aujourd'hui");
		t.assertNextLocalizedTextEquals("Wmz1_Power_W", "Wmz1_Leistung_W", "Wmz1_Puissance_W");
		t.assertNextLocalizedTextEquals("Wmz1_ValueToday_Wh", "Wmz1_WertHeute_Wh", "Wmz1_ValeurAujourd'hui_Wh");
		t.assertNextLocalizedTextEquals("Wmz1_ValueWeek_Wh", "Wmz1_WertWoche_Wh", "Wmz1_ValeurSemaine_Wh");
		t.assertNextLocalizedTextEquals("Wmz1_Value_Wh", "Wmz1_Wert_Wh", "Wmz1_Valeur_Wh");
		t.assertNextLocalizedTextEquals("Wmz2_Value_Wh", "Wmz2_Wert_Wh", "Wmz2_Valeur_Wh");
		t.assertNextLocalizedTextEquals("Heat", "Wärme", "Chaleur");
		t.assertNextLocalizedTextEquals("Heat 2", "Wärme 2", "Chaleur 2");
		t.assertNextLocalizedTextEquals("Heat 3", "Wärme 3", "Chaleur 3");
		t.assertNextLocalizedTextEquals("Heat In total", "Wärme Gesamt", "Chaleur au total");
		t.assertNextLocalizedTextEquals("Heat Yesterday", "Wärme Gestern", "Chaleur hier");
		t.assertNextLocalizedTextEquals("Heat Today", "Wärme Heute", "Chaleur aujourd'hui");
		t.assertNextLocalizedTextEquals("Heat Year", "Wärme Jahr", "Chaleur année");
		t.assertNextLocalizedTextEquals("Heat MWh", "Wärme MWh", "Chaleur MWh");
		t.assertNextLocalizedTextEquals("Heat Month", "Wärme Monat", "Chaleur mois");
		t.assertNextLocalizedTextEquals("Heat Previous year", "Wärme Vorjahr", "Chaleur année dernière");
		t.assertNextLocalizedTextEquals("Heat Previuos month", "Wärme Vormonat", "Chaleur mois dernier");
		t.assertNextLocalizedTextEquals("Heat Previous week", "Wärme Vorwoche", "Chaleur semaine dernière");
		t.assertNextLocalizedTextEquals("Heat Wh", "Wärme Wh", "Chaleur Wh");
		t.assertNextLocalizedTextEquals("Heat Week", "Wärme Woche", "Chaleur semaine");
		t.assertNextLocalizedTextEquals("Heat kWh", "Wärme kWh", "Chaleur kWh");
		t.assertNextLocalizedTextEquals("Heat2", "Wärme2", "Chaleur2");
		t.assertNextLocalizedTextEquals("Heat3", "Wärme3", "Chaleur3");
		t.assertNextLocalizedTextEquals("Heat4", "Wärme4", "Chaleur4");
		t.assertNextLocalizedTextEquals("Heat5", "Wärme5", "Chaleur5");
		t.assertNextLocalizedTextEquals("Heat quantity", "Wärmemenge", "Quantité de chaleur");
		t.assertNextLocalizedTextEquals("Heat quantity (<= v1.01)", "Wärmemenge (<= v1.01)", "Quantité de chaleur (<= v1.01)");
		t.assertNextLocalizedTextEquals("Heat quantity (>= v1.02)", "Wärmemenge (>= v1.02)", "Quantité de chaleur (>= v1.02)");
		t.assertNextLocalizedTextEquals("Heat quantity 1", "Wärmemenge 1", "Quantité de chaleur 1");
		t.assertNextLocalizedTextEquals("Heat quantity 2", "Wärmemenge 2", "Quantité de chaleur 2");
		t.assertNextLocalizedTextEquals("Heat quantity MWh", "Wärmemenge MWh", "Quantité de chaleur MWh");
		t.assertNextLocalizedTextEquals("Heat quantity month", "Wärmemenge Monat", "Quantité de chaleur");
		t.assertNextLocalizedTextEquals("Heat quantity S,p", "Wärmemenge S,p", "Quantité de chaleur S,p");
		t.assertNextLocalizedTextEquals("Heat quantity S,s", "Wärmemenge S,s", "Quantité de chaleur S,s");
		t.assertNextLocalizedTextEquals("Heat quantity week", "Wärmemenge Woche", "Quantité de chaleur semaine");
		t.assertNextLocalizedTextEquals("Heat quantity today", "Wärmemenge heute", "Quantité de chaleur aujourd'hui");
		t.assertNextLocalizedTextEquals("Heat quantity kWh", "Wärmemenge kWh", "Quantité de chaleur kWh");
		t.assertNextLocalizedTextEquals("Heat pump", "Wärmepumpe", "Pompe à chaleur");
		t.assertNextLocalizedTextEquals("Heat pump active", "Wärmepumpe an", "PAC en marche");
		t.assertNextLocalizedTextEquals("Heat exchanger antifreeze", "Wärmetauscher Frostschutz", "Antigel Echangeur");
		t.assertNextLocalizedTextEquals("Heat exchanger emergency temperature", "Wärmetauscher Nottemperatur", "Température sécurité Echangeur");
		t.assertNextLocalizedTextEquals("X-Control", "X-Control", "X-Control");
		t.assertNextLocalizedTextEquals("ZEN DT6 [Controller]", "ZEN DT6 [Regler]", "ZEN DT6 [Controller]");
		t.assertNextLocalizedTextEquals("ZEN DT6 [HQM1]", "ZEN DT6 [WMZ1]", "ZEN DT6 [HQM1]");
		t.assertNextLocalizedTextEquals("Draw-off quantity", "Zapfmenge", "Quantité puisée");
		t.assertNextLocalizedTextEquals("Zapfmenge Gesamt", "Zapfmenge Gesamt", "Zapfmenge Gesamt");
		t.assertNextLocalizedTextEquals("Draw-off quantity in total", "Zapfmenge gesamt", "Quantité puisée");
		t.assertNextLocalizedTextEquals("Maximum draw-off quantity", "Zapfmenge max.", "Quantité puisée max.");
		t.assertNextLocalizedTextEquals("Draw-off", "Zapfung", "Puisage");
		t.assertNextLocalizedTextEquals("Draw-off active", "Zapfung aktiv", "Puisage actif");
		t.assertNextLocalizedTextEquals("Draw-off impulse active", "Zapfungsimpuls aktiv", "Impulsion puisage actif");
		t.assertNextLocalizedTextEquals("Draw-off flow rate", "Zapfvolumenstrom", "Débit puisage");
		t.assertNextLocalizedTextEquals("Time", "Zeit", "Heure");
		t.assertNextLocalizedTextEquals("Time period HP / 24h", "Zeitraum WP / 24h", "Période PAC / 24h");
		t.assertNextLocalizedTextEquals("Time stamp last cancelled TD", "Zeitstempel letzte abgebrochene TD", "Horodatage dernière DT annulée");
		t.assertNextLocalizedTextEquals("Time stamp last successul TD", "Zeitstempel letzte erfolgreiche TD", "Horodatage dernière DT avec succès");
		t.assertNextLocalizedTextEquals("Cell temperature", "Zelltemperatur", "Température cellule");
		t.assertNextLocalizedTextEquals("Circulation switch-on time", "Zirkulation Einschaltz.", "Temps d'activation Circulation");
		t.assertNextLocalizedTextEquals("Circulation blocking period", "Zirkulation Sperrzeit", "Période blocage Circulation");
		t.assertNextLocalizedTextEquals("Circulation active", "Zirkulation aktiv", "Circulation active");
		t.assertNextLocalizedTextEquals("Circulation sensor", "Zirkulation-Fühler", "Sonde circulation");
		t.assertNextLocalizedTextEquals("Circulation detection", "Zirkulationserfassung", "Détection circulation");
		t.assertNextLocalizedTextEquals("Circulating pump", "Zirkulationspumpe", "Pompe de circulation");
		t.assertNextLocalizedTextEquals("State sensor 5", "Zustand Sensor 5", "Etat sonde 5");
		t.assertNextLocalizedTextEquals("State sensor 8", "Zustand Sensor 8", "Etat sonde 8");
		t.assertNextLocalizedTextEquals("dQ LT Cycle", "dQ LT Cycle", "dQ LT Cycle");
		t.assertNextLocalizedTextEquals("dT pool cooling function off", "dT Beckenkühlfkt aus", "dT refroidissement Piscine off");
		t.assertNextLocalizedTextEquals("dT pool cooling function on", "dT Beckenkühlfkt ein", "dT refroidissement Piscine on");
		t.assertNextLocalizedTextEquals("dT buffer", "dT Puffer", "dT réservoir tampon");
		t.assertNextLocalizedTextEquals("dT solar afterheating", "dT Solar Nachheizung", "dT rechauffage Solaire");
		t.assertNextLocalizedTextEquals("dT heat pump active", "dT Wärmepumpe an", "dT PAC on");
		t.assertNextLocalizedTextEquals("dT heat pump inactive", "dT Wärmepumpe aus", "dT PAC off");
		t.assertNextLocalizedTextEquals("dT sufficient", "dT ausreichend", "dT suffisant");
		t.assertNextLocalizedTextEquals("dT AH off", "dT-NH-aus", "dT Appoint off");
		t.assertNextLocalizedTextEquals("dT AH on", "dT-NH-ein", "dT Appoint on");
		t.assertNextLocalizedTextEquals("dV LT", "dV LT", "dV LT");
		t.assertNextLocalizedTextEquals("dt estimated", "dt-erw", "dt estimé");
		t.assertNextLocalizedTextEquals("dt estimated2", "dt-erw2", "dt estimé2");
		t.assertNextLocalizedTextEquals("dt meas", "dt-mess", "dt mesuré");
		t.assertNextLocalizedTextEquals("errorMask", "errorMask", "errorMask");
		t.assertNextLocalizedTextEquals("h P1", "h P1", "h P1");
		t.assertNextLocalizedTextEquals("h P2", "h P2", "h P2");
		t.assertNextLocalizedTextEquals("kWh", "kWh", "kWh");
		t.assertNextLocalizedTextEquals("mStationAlive", "mStationAlive", "mStationAlive");
		t.assertNextLocalizedTextEquals("mStationAus", "mStationAus", "mStationAus");
		t.assertNextLocalizedTextEquals("mStationEin", "mStationEin", "mStationEin");
		t.assertNextLocalizedTextEquals("mStationFehler", "mStationFehler", "mStationFehler");
		t.assertNextLocalizedTextEquals("Max. cold water temperature", "max. Temperatur Kaltwasser", "Température max. eau froide");
		t.assertNextLocalizedTextEquals("Max. flow rate", "max. Volumenstrom", "Débit max.");
		t.assertNextLocalizedTextEquals("Min. cold water temperature", "min. Temperatur Kaltwasser", "Température min. eau froide");
		t.assertNextLocalizedTextEquals("nemux", "nemux", "nemux");
		t.assertNextLocalizedTextEquals("statusMask", "statusMask", "statusMask");
		t.assertNextLocalizedTextEquals("t-Ps", "t-Ps", "t-Ps");
		t.assertNextLocalizedTextEquals("t-Sp", "t-Sp", "t-Sp");
		t.assertNextLocalizedTextEquals("t-Ss", "t-Ss", "t-Ss");
		t.assertNextLocalizedTextEquals("t-WP-Ss", "t-WP-Ss", "t-PAC-Ss");
		t.assertNextLocalizedTextEquals("Remaining draw-off", "verbl. Zapfung", "Puisage restant");
		t.assertNextLocalizedTextEquals("warningMask", "warningMask", "warningMask");
		t.assertNextLocalizedTextEquals("Overpressure", "Überdruck", "Surpression");
		t.assertNextLocalizedTextEquals("Übergabestation Status", "Übergabestation Status", "Übergabestation Status");
		t.assertNextLocalizedTextEquals("Overheating active", "Überhitzung aktiv", "Surchauffe active");
		t.assertNextLocalizedTextEquals("Überschuss", "Überschuss", "Überschuss");
		t.assertNextLocalizedTextEquals("Excess Wh", "Überschuss Wh", "Excédent Wh");
		t.assertNextLocalizedTextEquals("Heat dump", "Überwärmeabfuhr", "Evacuation de l'excès de chaleur");
		t.assertNextLocalizedTextEquals("ΔT collector-store", "ΔT Kollektor-Speicher", "ΔT capteur-réservoir");
		t.assertNextLocalizedTextEquals("ΔT flow-return", "ΔT Vorlauf-Rücklauf", "ΔT départ-retour");
		t.assertNextLocalizedTextEquals("ΔT too high", "ΔT zu hoch", "ΔT trop élevée");
		t.assertNextLocalizedTextEquals("ΔT3", "ΔT3", "ΔT3");
		t.assertEndOfLocalizedTextTable();
	}
	
	class UnitTester {
		
		int index = 0;
		
		void assertNextUnitEquals(int unitId, UnitFamily unitFamily, String unitCodeText, String unitTextText) {
			Unit unit = specFile.getUnits() [index++];
			assertEquals(unitId, unit.getUnitId());
			assertEquals(unitFamily, unit.getUnitFamily());
			assertEquals(unitCodeText, unit.getUnitCodeText());
			assertEquals(unitTextText, unit.getUnitTextText());
		}
		
		void assertEndOfUnitTable() {
			assertEquals(index, specFile.getUnits().length);
		}

	}

	@Test
	public void testUnits() throws Exception {
		UnitTester t = new UnitTester();
		t.assertNextUnitEquals(55, UnitFamily.Pressure, "Bars", " bar");
		t.assertNextUnitEquals(20, UnitFamily.Energy, "Btus", " BTU");
		t.assertNextUnitEquals(80, UnitFamily.Volume, "CubicMeters", " m³");
		t.assertNextUnitEquals(135, UnitFamily.VolumeFlow, "CubicMetersPerHour", " m³/h");
		t.assertNextUnitEquals(70, UnitFamily.Time, "Days", " d");
		t.assertNextUnitEquals(90, UnitFamily.None, "DegreesAngular", " °");
		t.assertNextUnitEquals(62, UnitFamily.Temperature, "DegreesCelsius", " °C");
		t.assertNextUnitEquals(64, UnitFamily.Temperature, "DegreesFahrenheit", " °F");
		t.assertNextUnitEquals(63, UnitFamily.None, "DegreesKelvin", " K");
		t.assertNextUnitEquals(1042, UnitFamily.Volume, "Gallons", " gal");
		t.assertNextUnitEquals(1041, UnitFamily.VolumeFlow, "GallonsPerHour", " gal/h");
		t.assertNextUnitEquals(1040, UnitFamily.VolumeFlow, "GallonsPerMinute", " gal/min");
		t.assertNextUnitEquals(1035, UnitFamily.Energy, "GramsCO2Gas", " g CO₂ (Gas)");
		t.assertNextUnitEquals(1032, UnitFamily.Energy, "GramsCO2Oil", " g CO₂ (Oil)");
		t.assertNextUnitEquals(133, UnitFamily.None, "Hectopascals", " hPa");
		t.assertNextUnitEquals(27, UnitFamily.None, "Hertz", " Hz");
		t.assertNextUnitEquals(71, UnitFamily.Time, "Hours", " h");
		t.assertNextUnitEquals(1030, UnitFamily.Energy, "KiloBtus", " MBTU");
		t.assertNextUnitEquals(1024, UnitFamily.None, "KiloWattHoursPerSquareMeterPerDay", " kWh/(m²*d)");
		t.assertNextUnitEquals(1036, UnitFamily.Energy, "KilogramsCO2Gas", " kg CO₂ (Gas)");
		t.assertNextUnitEquals(1033, UnitFamily.Energy, "KilogramsCO2Oil", " kg CO₂ (Oil)");
		t.assertNextUnitEquals(186, UnitFamily.None, "KilogramsPerCubicMeter", " kg/m³");
		t.assertNextUnitEquals(44, UnitFamily.None, "KilogramsPerHour", " kg/h");
		t.assertNextUnitEquals(19, UnitFamily.Energy, "KilowattHours", " kWh");
		t.assertNextUnitEquals(48, UnitFamily.Power, "Kilowatts", " kW");
		t.assertNextUnitEquals(82, UnitFamily.Volume, "Liters", " l");
		t.assertNextUnitEquals(136, UnitFamily.VolumeFlow, "LitersPerHour", " l/h");
		t.assertNextUnitEquals(88, UnitFamily.VolumeFlow, "LitersPerMinute", " l/min");
		t.assertNextUnitEquals(1025, UnitFamily.None, "LitersPerSquareMeterPerDay", " l/(m²*d)");
		t.assertNextUnitEquals(1031, UnitFamily.Energy, "MegaBtus", " MMBTU");
		t.assertNextUnitEquals(146, UnitFamily.Energy, "MegawattHours", " MWh");
		t.assertNextUnitEquals(74, UnitFamily.None, "MetersPerSecond", " m/s");
		t.assertNextUnitEquals(2, UnitFamily.None, "Milliamperes", " mA");
		t.assertNextUnitEquals(159, UnitFamily.None, "Milliseconds", " ms");
		t.assertNextUnitEquals(72, UnitFamily.Time, "Minutes", " min");
		t.assertNextUnitEquals(-1, UnitFamily.None, "None", "");
		t.assertNextUnitEquals(4, UnitFamily.None, "Ohms", " Ω");
		t.assertNextUnitEquals(98, UnitFamily.None, "Percent", "%");
		t.assertNextUnitEquals(29, UnitFamily.None, "PercentRelativeHumidity", "%RH");
		t.assertNextUnitEquals(56, UnitFamily.Pressure, "PoundsForcePerSquareInch", " psi");
		t.assertNextUnitEquals(73, UnitFamily.Time, "Seconds", " s");
		t.assertNextUnitEquals(0, UnitFamily.None, "SquareMeters", " m²");
		t.assertNextUnitEquals(1037, UnitFamily.Energy, "TonsCO2Gas", " t CO₂ (Gas)");
		t.assertNextUnitEquals(1034, UnitFamily.Energy, "TonsCO2Oil", " t CO₂ (Oil)");
		t.assertNextUnitEquals(5, UnitFamily.None, "Volts", " V");
		t.assertNextUnitEquals(18, UnitFamily.Energy, "WattHours", " Wh");
		t.assertNextUnitEquals(47, UnitFamily.Power, "Watts", " W");
		t.assertNextUnitEquals(35, UnitFamily.None, "WattsPerSquareMeter", " W/m²");
		t.assertEndOfUnitTable();
	}

	class DeviceTemplateTester {
		
		int index = 0;
		
		void assertNextDeviceTemplateEquals(int selfAddress, int selfMask, int peerAddress, int peerMask, String nameEn) {
			DeviceTemplate deviceTemplate = specFile.getDeviceTemplates() [index++];
			assertEquals(selfAddress, deviceTemplate.getSelfAddress());
			assertEquals(selfMask, deviceTemplate.getSelfMask());
			assertEquals(peerAddress, deviceTemplate.getPeerAddress());
			assertEquals(peerMask, deviceTemplate.getPeerMask());
			assertEquals(nameEn, deviceTemplate.getNameLocalizedText(Language.En));
		}
		
		void assertEndOfDeviceTemplateTable() {
			assertEquals(index, specFile.getDeviceTemplates().length);
		}
		
	}
	
	@Test
	public void testDeviceTemplates() throws Exception {
		DeviceTemplateTester t = new DeviceTemplateTester();
		t.assertNextDeviceTemplateEquals(0x0000, 0xFFFF, 0x0000, 0x0000, "Broadcast");
		t.assertNextDeviceTemplateEquals(0x0010, 0xFFFF, 0x0000, 0x0000, "DFA");
		t.assertNextDeviceTemplateEquals(0x0015, 0xFFFF, 0x0000, 0x0000, "Standard-Infos");
		t.assertNextDeviceTemplateEquals(0x0020, 0xFFFF, 0x0000, 0x0000, "Computer");
		t.assertNextDeviceTemplateEquals(0x0040, 0xFFFF, 0x0000, 0x0000, "SD3 / GAx");
		t.assertNextDeviceTemplateEquals(0x0050, 0xFFFF, 0x0000, 0x0000, "DL2");
		t.assertNextDeviceTemplateEquals(0x0053, 0xFFFF, 0x0000, 0x0000, "DL3");
		t.assertNextDeviceTemplateEquals(0x1001, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLT [Controller]");
		t.assertNextDeviceTemplateEquals(0x1010, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLT [HQM #0]");
		t.assertNextDeviceTemplateEquals(0x1011, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLT [HQM #1]");
		t.assertNextDeviceTemplateEquals(0x1012, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLT [HQM #2]");
		t.assertNextDeviceTemplateEquals(0x1013, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLT [HQM #3]");
		t.assertNextDeviceTemplateEquals(0x1014, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLT [HQM #4]");
		t.assertNextDeviceTemplateEquals(0x1015, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLT [HQM #5]");
		t.assertNextDeviceTemplateEquals(0x1016, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLT [HQM #6]");
		t.assertNextDeviceTemplateEquals(0x1017, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLT [HQM #7]");
		t.assertNextDeviceTemplateEquals(0x1018, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLT [HQM #8]");
		t.assertNextDeviceTemplateEquals(0x1019, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLT [HQM #9]");
		t.assertNextDeviceTemplateEquals(0x101A, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLT [HQM #10]");
		t.assertNextDeviceTemplateEquals(0x101B, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLT [HQM #11]");
		t.assertNextDeviceTemplateEquals(0x101C, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLT [HQM #12]");
		t.assertNextDeviceTemplateEquals(0x101D, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLT [HQM #13]");
		t.assertNextDeviceTemplateEquals(0x101E, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLT [HQM #14]");
		t.assertNextDeviceTemplateEquals(0x101F, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLT [HQM #15]");
		t.assertNextDeviceTemplateEquals(0x1020, 0xFFFF, 0x0000, 0x0000, "Noventec Übergabestation [Controller]");
		t.assertNextDeviceTemplateEquals(0x1040, 0xFFFF, 0x0000, 0x0000, "DeltaSol E V2 HC 1 Concrete drying [Module 1]");
		t.assertNextDeviceTemplateEquals(0x1041, 0xFFFF, 0x0000, 0x0000, "DeltaSol E V2 HC 2 Concrete drying [Module 2]");
		t.assertNextDeviceTemplateEquals(0x1042, 0xFFFF, 0x0000, 0x0000, "DeltaSol E V2 HC 3 Concrete drying [Module 3]");
		t.assertNextDeviceTemplateEquals(0x1043, 0xFFFF, 0x0000, 0x0000, "DeltaSol E V2 HK Estrichtrockung [Lokal]");
		t.assertNextDeviceTemplateEquals(0x1050, 0xFFFF, 0x0000, 0x0000, "DeltaSol E V2 [Controller]");
		t.assertNextDeviceTemplateEquals(0x1051, 0xFFFF, 0x0000, 0x0000, "DeltaSol E V2 [HQM]");
		t.assertNextDeviceTemplateEquals(0x1052, 0xFFFF, 0x0000, 0x0000, "Kioto BX Plus V2 [Controller]");
		t.assertNextDeviceTemplateEquals(0x1053, 0xFFFF, 0x0000, 0x0000, "Kioto BX Plus V2 [Modules]");
		t.assertNextDeviceTemplateEquals(0x1054, 0xFFFF, 0x0000, 0x0000, "Kioto BX Plus V2 [Heating circuit 1]");
		t.assertNextDeviceTemplateEquals(0x1055, 0xFFFF, 0x0000, 0x0000, "Kioto BX Plus V2 [Heating circuit 2]");
		t.assertNextDeviceTemplateEquals(0x1056, 0xFFFF, 0x0000, 0x0000, "Kioto BX Plus V2 [HQM 1]");
		t.assertNextDeviceTemplateEquals(0x1057, 0xFFFF, 0x0000, 0x0000, "Kioto BX Plus V2 [HQM 2]");
		t.assertNextDeviceTemplateEquals(0x1058, 0xFFFF, 0x0000, 0x0000, "Caleffi Biomassa");
		t.assertNextDeviceTemplateEquals(0x1059, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC mini [Controller]");
		t.assertNextDeviceTemplateEquals(0x105A, 0xFFFF, 0x0000, 0x0000, "Remeha RemaCal");
		t.assertNextDeviceTemplateEquals(0x105B, 0xFFFF, 0x0000, 0x0000, "Atlantic SOLERIO V3");
		t.assertNextDeviceTemplateEquals(0x105D, 0xFFFF, 0x0000, 0x0000, "DeDietrich Sol Plus ER 709");
		t.assertNextDeviceTemplateEquals(0x105E, 0xFFFF, 0x0000, 0x0000, "Caleffi WP");
		t.assertNextDeviceTemplateEquals(0x105F, 0xFFFF, 0x0000, 0x0000, "Tuxhorn BHKW");
		t.assertNextDeviceTemplateEquals(0x1060, 0xFFFF, 0x0000, 0x0000, "Vitosolic 200 [Controller]");
		t.assertNextDeviceTemplateEquals(0x1065, 0xFFFF, 0x0000, 0x0000, "Vitosolic 200 [HQM 1]");
		t.assertNextDeviceTemplateEquals(0x1066, 0xFFFF, 0x0000, 0x0000, "Vitosolic 200 [HQM 2]");
		t.assertNextDeviceTemplateEquals(0x1100, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX - SorTech - eCoo [Controller]");
		t.assertNextDeviceTemplateEquals(0x1111, 0xFFFF, 0x0000, 0x0000, "EC1");
		t.assertNextDeviceTemplateEquals(0x1117, 0xFFFF, 0x0000, 0x0000, "Kioto Laderegler");
		t.assertNextDeviceTemplateEquals(0x1119, 0xFFFF, 0x0000, 0x0000, "Sol Plus SL");
		t.assertNextDeviceTemplateEquals(0x111E, 0xFFFF, 0x0000, 0x0000, "DeltaTherm PV");
		t.assertNextDeviceTemplateEquals(0x111F, 0xFFFF, 0x0000, 0x0000, "ETHERM");
		t.assertNextDeviceTemplateEquals(0x1120, 0xFFFF, 0x0000, 0x0000, "DeltaSol AL-E");
		t.assertNextDeviceTemplateEquals(0x1121, 0xFFFF, 0x0000, 0x0000, "DeltaSol CS2");
		t.assertNextDeviceTemplateEquals(0x1122, 0xFFFF, 0x0000, 0x0000, "DeltaSol CS4");
		t.assertNextDeviceTemplateEquals(0x1123, 0xFFFF, 0x0000, 0x0000, "ETHERM 2");
		t.assertNextDeviceTemplateEquals(0x1127, 0xFFFF, 0x0000, 0x0000, "DeltaSol AL E HE");
		t.assertNextDeviceTemplateEquals(0x1140, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC mini [Heating circuit 1]");
		t.assertNextDeviceTemplateEquals(0x1150, 0xFFFF, 0x0000, 0x0000, "Kioto FWS");
		t.assertNextDeviceTemplateEquals(0x1160, 0xFFFF, 0x0000, 0x0000, "MFR [Controller]");
		t.assertNextDeviceTemplateEquals(0x1161, 0xFFFF, 0x0000, 0x0000, "MFR [Modules]");
		t.assertNextDeviceTemplateEquals(0x1162, 0xFFFF, 0x0000, 0x0000, "MFR [Domestic hot water]");
		t.assertNextDeviceTemplateEquals(0x1200, 0xFFFF, 0x0000, 0x0000, "MFR [HQM #0]");
		t.assertNextDeviceTemplateEquals(0x1201, 0xFFFF, 0x0000, 0x0000, "MFR [HQM #1]");
		t.assertNextDeviceTemplateEquals(0x1202, 0xFFFF, 0x0000, 0x0000, "MFR [HQM #2]");
		t.assertNextDeviceTemplateEquals(0x1203, 0xFFFF, 0x0000, 0x0000, "MFR [HQM #3]");
		t.assertNextDeviceTemplateEquals(0x1204, 0xFFFF, 0x0000, 0x0000, "MFR [HQM #4]");
		t.assertNextDeviceTemplateEquals(0x1205, 0xFFFF, 0x0000, 0x0000, "MFR [HQM #5]");
		t.assertNextDeviceTemplateEquals(0x1206, 0xFFFF, 0x0000, 0x0000, "MFR [HQM #6]");
		t.assertNextDeviceTemplateEquals(0x1207, 0xFFFF, 0x0000, 0x0000, "MFR [HQM #7]");
		t.assertNextDeviceTemplateEquals(0x1208, 0xFFFF, 0x0000, 0x0000, "MFR [HQM #8]");
		t.assertNextDeviceTemplateEquals(0x1209, 0xFFFF, 0x0000, 0x0000, "MFR [HQM #9]");
		t.assertNextDeviceTemplateEquals(0x120A, 0xFFFF, 0x0000, 0x0000, "MFR [HQM #10]");
		t.assertNextDeviceTemplateEquals(0x120B, 0xFFFF, 0x0000, 0x0000, "MFR [HQM #11]");
		t.assertNextDeviceTemplateEquals(0x120C, 0xFFFF, 0x0000, 0x0000, "MFR [HQM #12]");
		t.assertNextDeviceTemplateEquals(0x120D, 0xFFFF, 0x0000, 0x0000, "MFR [HQM #13]");
		t.assertNextDeviceTemplateEquals(0x120E, 0xFFFF, 0x0000, 0x0000, "MFR [HQM #14]");
		t.assertNextDeviceTemplateEquals(0x120F, 0xFFFF, 0x0000, 0x0000, "MFR [HQM #15]");
		t.assertNextDeviceTemplateEquals(0x1210, 0xFFFF, 0x0000, 0x0000, "MFR [Heating circuit #0]");
		t.assertNextDeviceTemplateEquals(0x1211, 0xFFFF, 0x0000, 0x0000, "MFR [Heating circuit #1]");
		t.assertNextDeviceTemplateEquals(0x1212, 0xFFFF, 0x0000, 0x0000, "MFR [Heating circuit #2]");
		t.assertNextDeviceTemplateEquals(0x1213, 0xFFFF, 0x0000, 0x0000, "MFR [Heating circuit #3]");
		t.assertNextDeviceTemplateEquals(0x1214, 0xFFFF, 0x0000, 0x0000, "MFR [Heating circuit #4]");
		t.assertNextDeviceTemplateEquals(0x1215, 0xFFFF, 0x0000, 0x0000, "MFR [Heating circuit #5]");
		t.assertNextDeviceTemplateEquals(0x1216, 0xFFFF, 0x0000, 0x0000, "MFR [Heating circuit #6]");
		t.assertNextDeviceTemplateEquals(0x1217, 0xFFFF, 0x0000, 0x0000, "MFR [Heating circuit #7]");
		t.assertNextDeviceTemplateEquals(0x1218, 0xFFFF, 0x0000, 0x0000, "MFR [Heating circuit #8]");
		t.assertNextDeviceTemplateEquals(0x1219, 0xFFFF, 0x0000, 0x0000, "MFR [Heating circuit #9]");
		t.assertNextDeviceTemplateEquals(0x121A, 0xFFFF, 0x0000, 0x0000, "MFR [Heating circuit #10]");
		t.assertNextDeviceTemplateEquals(0x121B, 0xFFFF, 0x0000, 0x0000, "MFR [Heating circuit #11]");
		t.assertNextDeviceTemplateEquals(0x121C, 0xFFFF, 0x0000, 0x0000, "MFR [Heating circuit #12]");
		t.assertNextDeviceTemplateEquals(0x121D, 0xFFFF, 0x0000, 0x0000, "MFR [Heating circuit #13]");
		t.assertNextDeviceTemplateEquals(0x121E, 0xFFFF, 0x0000, 0x0000, "MFR [Heating circuit #14]");
		t.assertNextDeviceTemplateEquals(0x121F, 0xFFFF, 0x0000, 0x0000, "MFR [Heating circuit #15]");
		t.assertNextDeviceTemplateEquals(0x1220, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [Transm. station #0]");
		t.assertNextDeviceTemplateEquals(0x1221, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [Transm. station #1]");
		t.assertNextDeviceTemplateEquals(0x1222, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [Transm. station #2]");
		t.assertNextDeviceTemplateEquals(0x1223, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [Transm. station #3]");
		t.assertNextDeviceTemplateEquals(0x1224, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [Transm. station #4]");
		t.assertNextDeviceTemplateEquals(0x1225, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [Transm. station #5]");
		t.assertNextDeviceTemplateEquals(0x1226, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [Transm. station #6]");
		t.assertNextDeviceTemplateEquals(0x1227, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [Transm. station #7]");
		t.assertNextDeviceTemplateEquals(0x1228, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [Transm. station #8]");
		t.assertNextDeviceTemplateEquals(0x1229, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [Transm. station #9]");
		t.assertNextDeviceTemplateEquals(0x122A, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [Transm. station #10]");
		t.assertNextDeviceTemplateEquals(0x122B, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [Transm. station #11]");
		t.assertNextDeviceTemplateEquals(0x122C, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [Transm. station #12]");
		t.assertNextDeviceTemplateEquals(0x122D, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [Transm. station #13]");
		t.assertNextDeviceTemplateEquals(0x122E, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [Transm. station #14]");
		t.assertNextDeviceTemplateEquals(0x122F, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [Transm. station #15]");
		t.assertNextDeviceTemplateEquals(0x1230, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [DHW heating #0]");
		t.assertNextDeviceTemplateEquals(0x1231, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [DHW heating #1]");
		t.assertNextDeviceTemplateEquals(0x1232, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [DHW heating #2]");
		t.assertNextDeviceTemplateEquals(0x1233, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [DHW heating #3]");
		t.assertNextDeviceTemplateEquals(0x1234, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [DHW heating #4]");
		t.assertNextDeviceTemplateEquals(0x1235, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [DHW heating #5]");
		t.assertNextDeviceTemplateEquals(0x1236, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [DHW heating #6]");
		t.assertNextDeviceTemplateEquals(0x1237, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [DHW heating #7]");
		t.assertNextDeviceTemplateEquals(0x1238, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [DHW heating #8]");
		t.assertNextDeviceTemplateEquals(0x1239, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [DHW heating #9]");
		t.assertNextDeviceTemplateEquals(0x123A, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [DHW heating #10]");
		t.assertNextDeviceTemplateEquals(0x123B, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [DHW heating #11]");
		t.assertNextDeviceTemplateEquals(0x123C, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [DHW heating #12]");
		t.assertNextDeviceTemplateEquals(0x123D, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [DHW heating #13]");
		t.assertNextDeviceTemplateEquals(0x123E, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [DHW heating #14]");
		t.assertNextDeviceTemplateEquals(0x123F, 0xFFFF, 0x0000, 0x0000, "Regudis H-HT [DHW heating #15]");
		t.assertNextDeviceTemplateEquals(0x1240, 0xFFFF, 0x0000, 0x0000, "Wagner Sungo 100 [Controller]");
		t.assertNextDeviceTemplateEquals(0x1241, 0xFFFF, 0x0000, 0x0000, "Wagner Sungo 100 [HQM1]");
		t.assertNextDeviceTemplateEquals(0x1250, 0xFFFF, 0x0000, 0x0000, "Viessmann Vitotrans 353 2017");
		t.assertNextDeviceTemplateEquals(0x1260, 0xFFFF, 0x0000, 0x0000, "Viessmann Vitotrans 353 2017 Broadcast");
		t.assertNextDeviceTemplateEquals(0x1261, 0xFFFF, 0x0000, 0x0000, "Viessmann Vitotrans 353 2017 Master");
		t.assertNextDeviceTemplateEquals(0x1262, 0xFFFF, 0x0000, 0x0000, "Viessmann Vitotrans 353 2017 Slave 1");
		t.assertNextDeviceTemplateEquals(0x1263, 0xFFFF, 0x0000, 0x0000, "Viessmann Vitotrans 353 2017 Slave 2");
		t.assertNextDeviceTemplateEquals(0x1264, 0xFFFF, 0x0000, 0x0000, "Viessmann Vitotrans 353 2017 Slave 3");
		t.assertNextDeviceTemplateEquals(0x1711, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Controller]");
		t.assertNextDeviceTemplateEquals(0x1720, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Heating circuit #0]");
		t.assertNextDeviceTemplateEquals(0x1721, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Heating circuit #1]");
		t.assertNextDeviceTemplateEquals(0x1722, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Heating circuit #2]");
		t.assertNextDeviceTemplateEquals(0x1723, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Heating circuit #3]");
		t.assertNextDeviceTemplateEquals(0x1724, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Heating circuit #4]");
		t.assertNextDeviceTemplateEquals(0x1725, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Heating circuit #5]");
		t.assertNextDeviceTemplateEquals(0x1726, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Heating circuit #6]");
		t.assertNextDeviceTemplateEquals(0x1727, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Heating circuit #7]");
		t.assertNextDeviceTemplateEquals(0x1728, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Heating circuit #8]");
		t.assertNextDeviceTemplateEquals(0x1729, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Heating circuit #9]");
		t.assertNextDeviceTemplateEquals(0x172A, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Heating circuit #10]");
		t.assertNextDeviceTemplateEquals(0x172B, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Heating circuit #11]");
		t.assertNextDeviceTemplateEquals(0x172C, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Heating circuit #12]");
		t.assertNextDeviceTemplateEquals(0x172D, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Heating circuit #13]");
		t.assertNextDeviceTemplateEquals(0x172E, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Heating circuit #14]");
		t.assertNextDeviceTemplateEquals(0x172F, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Heating circuit #15]");
		t.assertNextDeviceTemplateEquals(0x1730, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [HQM #0]");
		t.assertNextDeviceTemplateEquals(0x1731, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [HQM #1]");
		t.assertNextDeviceTemplateEquals(0x1732, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [HQM #2]");
		t.assertNextDeviceTemplateEquals(0x1733, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [HQM #3]");
		t.assertNextDeviceTemplateEquals(0x1734, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [HQM #4]");
		t.assertNextDeviceTemplateEquals(0x1735, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [HQM #5]");
		t.assertNextDeviceTemplateEquals(0x1736, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [HQM #6]");
		t.assertNextDeviceTemplateEquals(0x1737, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [HQM #7]");
		t.assertNextDeviceTemplateEquals(0x1738, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [HQM #8]");
		t.assertNextDeviceTemplateEquals(0x1739, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [HQM #9]");
		t.assertNextDeviceTemplateEquals(0x173A, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [HQM #10]");
		t.assertNextDeviceTemplateEquals(0x173B, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [HQM #11]");
		t.assertNextDeviceTemplateEquals(0x173C, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [HQM #12]");
		t.assertNextDeviceTemplateEquals(0x173D, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [HQM #13]");
		t.assertNextDeviceTemplateEquals(0x173E, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [HQM #14]");
		t.assertNextDeviceTemplateEquals(0x173F, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [HQM #15]");
		t.assertNextDeviceTemplateEquals(0x1740, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Module #0]");
		t.assertNextDeviceTemplateEquals(0x1741, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Module #1]");
		t.assertNextDeviceTemplateEquals(0x1742, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Module #2]");
		t.assertNextDeviceTemplateEquals(0x1743, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Module #3]");
		t.assertNextDeviceTemplateEquals(0x1744, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Module #4]");
		t.assertNextDeviceTemplateEquals(0x1745, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Module #5]");
		t.assertNextDeviceTemplateEquals(0x1746, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Module #6]");
		t.assertNextDeviceTemplateEquals(0x1747, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Module #7]");
		t.assertNextDeviceTemplateEquals(0x1748, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Module #8]");
		t.assertNextDeviceTemplateEquals(0x1749, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Module #9]");
		t.assertNextDeviceTemplateEquals(0x174A, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Module #10]");
		t.assertNextDeviceTemplateEquals(0x174B, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Module #11]");
		t.assertNextDeviceTemplateEquals(0x174C, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Module #12]");
		t.assertNextDeviceTemplateEquals(0x174D, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Module #13]");
		t.assertNextDeviceTemplateEquals(0x174E, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Module #14]");
		t.assertNextDeviceTemplateEquals(0x174F, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC max [Module #15]");
		t.assertNextDeviceTemplateEquals(0x2000, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #0");
		t.assertNextDeviceTemplateEquals(0x2001, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #1");
		t.assertNextDeviceTemplateEquals(0x2002, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #2");
		t.assertNextDeviceTemplateEquals(0x2003, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #3");
		t.assertNextDeviceTemplateEquals(0x2004, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #4");
		t.assertNextDeviceTemplateEquals(0x2005, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #5");
		t.assertNextDeviceTemplateEquals(0x2006, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #6");
		t.assertNextDeviceTemplateEquals(0x2007, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #7");
		t.assertNextDeviceTemplateEquals(0x2008, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #8");
		t.assertNextDeviceTemplateEquals(0x2009, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #9");
		t.assertNextDeviceTemplateEquals(0x200A, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #10");
		t.assertNextDeviceTemplateEquals(0x200B, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #11");
		t.assertNextDeviceTemplateEquals(0x200C, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #12");
		t.assertNextDeviceTemplateEquals(0x200D, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #13");
		t.assertNextDeviceTemplateEquals(0x200E, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #14");
		t.assertNextDeviceTemplateEquals(0x200F, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #15");
		t.assertNextDeviceTemplateEquals(0x2010, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #16");
		t.assertNextDeviceTemplateEquals(0x2011, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #17");
		t.assertNextDeviceTemplateEquals(0x2012, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #18");
		t.assertNextDeviceTemplateEquals(0x2013, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #19");
		t.assertNextDeviceTemplateEquals(0x2014, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #20");
		t.assertNextDeviceTemplateEquals(0x2015, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #21");
		t.assertNextDeviceTemplateEquals(0x2016, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #22");
		t.assertNextDeviceTemplateEquals(0x2017, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #23");
		t.assertNextDeviceTemplateEquals(0x2018, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #24");
		t.assertNextDeviceTemplateEquals(0x2019, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #25");
		t.assertNextDeviceTemplateEquals(0x201A, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #26");
		t.assertNextDeviceTemplateEquals(0x201B, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #27");
		t.assertNextDeviceTemplateEquals(0x201C, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #28");
		t.assertNextDeviceTemplateEquals(0x201D, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #29");
		t.assertNextDeviceTemplateEquals(0x201E, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #30");
		t.assertNextDeviceTemplateEquals(0x201F, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #31");
		t.assertNextDeviceTemplateEquals(0x2020, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #32");
		t.assertNextDeviceTemplateEquals(0x2021, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #33");
		t.assertNextDeviceTemplateEquals(0x2022, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #34");
		t.assertNextDeviceTemplateEquals(0x2023, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #35");
		t.assertNextDeviceTemplateEquals(0x2024, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #36");
		t.assertNextDeviceTemplateEquals(0x2025, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #37");
		t.assertNextDeviceTemplateEquals(0x2026, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #38");
		t.assertNextDeviceTemplateEquals(0x2027, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #39");
		t.assertNextDeviceTemplateEquals(0x2028, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #40");
		t.assertNextDeviceTemplateEquals(0x2029, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #41");
		t.assertNextDeviceTemplateEquals(0x202A, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #42");
		t.assertNextDeviceTemplateEquals(0x202B, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #43");
		t.assertNextDeviceTemplateEquals(0x202C, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #44");
		t.assertNextDeviceTemplateEquals(0x202D, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #45");
		t.assertNextDeviceTemplateEquals(0x202E, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #46");
		t.assertNextDeviceTemplateEquals(0x202F, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #47");
		t.assertNextDeviceTemplateEquals(0x2030, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #48");
		t.assertNextDeviceTemplateEquals(0x2031, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #49");
		t.assertNextDeviceTemplateEquals(0x2032, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #50");
		t.assertNextDeviceTemplateEquals(0x2033, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #51");
		t.assertNextDeviceTemplateEquals(0x2034, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #52");
		t.assertNextDeviceTemplateEquals(0x2035, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #53");
		t.assertNextDeviceTemplateEquals(0x2036, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #54");
		t.assertNextDeviceTemplateEquals(0x2037, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #55");
		t.assertNextDeviceTemplateEquals(0x2038, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #56");
		t.assertNextDeviceTemplateEquals(0x2039, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #57");
		t.assertNextDeviceTemplateEquals(0x203A, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #58");
		t.assertNextDeviceTemplateEquals(0x203B, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #59");
		t.assertNextDeviceTemplateEquals(0x203C, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #60");
		t.assertNextDeviceTemplateEquals(0x203D, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #61");
		t.assertNextDeviceTemplateEquals(0x203E, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #62");
		t.assertNextDeviceTemplateEquals(0x203F, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #63");
		t.assertNextDeviceTemplateEquals(0x2040, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #64");
		t.assertNextDeviceTemplateEquals(0x2041, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #65");
		t.assertNextDeviceTemplateEquals(0x2042, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #66");
		t.assertNextDeviceTemplateEquals(0x2043, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #67");
		t.assertNextDeviceTemplateEquals(0x2044, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #68");
		t.assertNextDeviceTemplateEquals(0x2045, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #69");
		t.assertNextDeviceTemplateEquals(0x2046, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #70");
		t.assertNextDeviceTemplateEquals(0x2047, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #71");
		t.assertNextDeviceTemplateEquals(0x2048, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #72");
		t.assertNextDeviceTemplateEquals(0x2049, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #73");
		t.assertNextDeviceTemplateEquals(0x204A, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #74");
		t.assertNextDeviceTemplateEquals(0x204B, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #75");
		t.assertNextDeviceTemplateEquals(0x204C, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #76");
		t.assertNextDeviceTemplateEquals(0x204D, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #77");
		t.assertNextDeviceTemplateEquals(0x204E, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #78");
		t.assertNextDeviceTemplateEquals(0x204F, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #79");
		t.assertNextDeviceTemplateEquals(0x2050, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #80");
		t.assertNextDeviceTemplateEquals(0x2051, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #81");
		t.assertNextDeviceTemplateEquals(0x2052, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #82");
		t.assertNextDeviceTemplateEquals(0x2053, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #83");
		t.assertNextDeviceTemplateEquals(0x2054, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #84");
		t.assertNextDeviceTemplateEquals(0x2055, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #85");
		t.assertNextDeviceTemplateEquals(0x2056, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #86");
		t.assertNextDeviceTemplateEquals(0x2057, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #87");
		t.assertNextDeviceTemplateEquals(0x2058, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #88");
		t.assertNextDeviceTemplateEquals(0x2059, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #89");
		t.assertNextDeviceTemplateEquals(0x205A, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #90");
		t.assertNextDeviceTemplateEquals(0x205B, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #91");
		t.assertNextDeviceTemplateEquals(0x205C, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #92");
		t.assertNextDeviceTemplateEquals(0x205D, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #93");
		t.assertNextDeviceTemplateEquals(0x205E, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #94");
		t.assertNextDeviceTemplateEquals(0x205F, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #95");
		t.assertNextDeviceTemplateEquals(0x2060, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #96");
		t.assertNextDeviceTemplateEquals(0x2061, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #97");
		t.assertNextDeviceTemplateEquals(0x2062, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #98");
		t.assertNextDeviceTemplateEquals(0x2063, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #99");
		t.assertNextDeviceTemplateEquals(0x2064, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #100");
		t.assertNextDeviceTemplateEquals(0x2065, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #101");
		t.assertNextDeviceTemplateEquals(0x2066, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #102");
		t.assertNextDeviceTemplateEquals(0x2067, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #103");
		t.assertNextDeviceTemplateEquals(0x2068, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #104");
		t.assertNextDeviceTemplateEquals(0x2069, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #105");
		t.assertNextDeviceTemplateEquals(0x206A, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #106");
		t.assertNextDeviceTemplateEquals(0x206B, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #107");
		t.assertNextDeviceTemplateEquals(0x206C, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #108");
		t.assertNextDeviceTemplateEquals(0x206D, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #109");
		t.assertNextDeviceTemplateEquals(0x206E, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #110");
		t.assertNextDeviceTemplateEquals(0x206F, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #111");
		t.assertNextDeviceTemplateEquals(0x2070, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #112");
		t.assertNextDeviceTemplateEquals(0x2071, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #113");
		t.assertNextDeviceTemplateEquals(0x2072, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #114");
		t.assertNextDeviceTemplateEquals(0x2073, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #115");
		t.assertNextDeviceTemplateEquals(0x2074, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #116");
		t.assertNextDeviceTemplateEquals(0x2075, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #117");
		t.assertNextDeviceTemplateEquals(0x2076, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #118");
		t.assertNextDeviceTemplateEquals(0x2077, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #119");
		t.assertNextDeviceTemplateEquals(0x2078, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #120");
		t.assertNextDeviceTemplateEquals(0x2079, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #121");
		t.assertNextDeviceTemplateEquals(0x207A, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #122");
		t.assertNextDeviceTemplateEquals(0x207B, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #123");
		t.assertNextDeviceTemplateEquals(0x207C, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #124");
		t.assertNextDeviceTemplateEquals(0x207D, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #125");
		t.assertNextDeviceTemplateEquals(0x207E, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #126");
		t.assertNextDeviceTemplateEquals(0x207F, 0xFFFF, 0x0000, 0x0000, "Digital Sensor #127");
		t.assertNextDeviceTemplateEquals(0x2111, 0xFFFF, 0x0000, 0x0000, "TLR2");
		t.assertNextDeviceTemplateEquals(0x2211, 0xFFFF, 0x0000, 0x0000, "DeltaSol CS Plus");
		t.assertNextDeviceTemplateEquals(0x2213, 0xFFFF, 0x0000, 0x0000, "DeltaSol CS Plus 2.x");
		t.assertNextDeviceTemplateEquals(0x2231, 0xFFFF, 0x0000, 0x0000, "Oranier HK [Controller]");
		t.assertNextDeviceTemplateEquals(0x2232, 0xFFFF, 0x0000, 0x0000, "Oranier HK [HQM1]");
		t.assertNextDeviceTemplateEquals(0x2241, 0xFFFF, 0x0000, 0x0000, "DHW controller");
		t.assertNextDeviceTemplateEquals(0x2251, 0xFFFF, 0x0000, 0x0000, "DeltaSol SL [Controller]");
		t.assertNextDeviceTemplateEquals(0x2252, 0xFFFF, 0x0000, 0x0000, "DeltaSol SL [HQM1]");
		t.assertNextDeviceTemplateEquals(0x2261, 0xFFFF, 0x0000, 0x0000, "HR Solar BASIC controller [Controller]");
		t.assertNextDeviceTemplateEquals(0x2262, 0xFFFF, 0x0000, 0x0000, "HR Solar BASIC controller [HQM 1]");
		t.assertNextDeviceTemplateEquals(0x2271, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLL [Controller]");
		t.assertNextDeviceTemplateEquals(0x2272, 0xFFFF, 0x0000, 0x0000, "DeltaSol SLL [HQM1]");
		t.assertNextDeviceTemplateEquals(0x2360, 0xFFFF, 0x0000, 0x0000, "HR Solar ADVANCED controller [Controller]");
		t.assertNextDeviceTemplateEquals(0x2362, 0xFFFF, 0x0000, 0x0000, "HR Solar ADVANCED controller [HQM 1]");
		t.assertNextDeviceTemplateEquals(0x3011, 0xFFFF, 0x0000, 0x0000, "WMZ-L10");
		t.assertNextDeviceTemplateEquals(0x3112, 0xFFFF, 0x0000, 0x0000, "Remeha RemaSol A");
		t.assertNextDeviceTemplateEquals(0x3113, 0xFFFF, 0x0000, 0x0000, "DeDietrich Diemasol Ai v2");
		t.assertNextDeviceTemplateEquals(0x3114, 0xFFFF, 0x0000, 0x0000, "DeDietrich Sol Plus Trio");
		t.assertNextDeviceTemplateEquals(0x3211, 0xFFFF, 0x0000, 0x0000, "EL1");
		t.assertNextDeviceTemplateEquals(0x3221, 0xFFFF, 0x0000, 0x0000, "DeltaSol Pro");
		t.assertNextDeviceTemplateEquals(0x3231, 0xFFFF, 0x0000, 0x0000, "DeltaSol B");
		t.assertNextDeviceTemplateEquals(0x3241, 0xFFFF, 0x0000, 0x0000, "DT4 (B)");
		t.assertNextDeviceTemplateEquals(0x3251, 0xFFFF, 0x0000, 0x0000, "DeltaSol BS");
		t.assertNextDeviceTemplateEquals(0x3261, 0xFFFF, 0x0000, 0x0000, "DeltaSol BS (DT4)");
		t.assertNextDeviceTemplateEquals(0x3271, 0xFFFF, 0x0000, 0x0000, "ConergyDT5");
		t.assertNextDeviceTemplateEquals(0x3311, 0xFFFF, 0x0000, 0x0000, "Diemasol C");
		t.assertNextDeviceTemplateEquals(0x4010, 0xFFFF, 0x0000, 0x0000, "WMZ #0");
		t.assertNextDeviceTemplateEquals(0x4011, 0xFFFF, 0x0000, 0x0000, "WMZ #1");
		t.assertNextDeviceTemplateEquals(0x4012, 0xFFFF, 0x0000, 0x0000, "WMZ #2");
		t.assertNextDeviceTemplateEquals(0x4013, 0xFFFF, 0x0000, 0x0000, "WMZ #3");
		t.assertNextDeviceTemplateEquals(0x4014, 0xFFFF, 0x0000, 0x0000, "WMZ #4");
		t.assertNextDeviceTemplateEquals(0x4015, 0xFFFF, 0x0000, 0x0000, "WMZ #5");
		t.assertNextDeviceTemplateEquals(0x4016, 0xFFFF, 0x0000, 0x0000, "WMZ #6");
		t.assertNextDeviceTemplateEquals(0x4017, 0xFFFF, 0x0000, 0x0000, "WMZ #7");
		t.assertNextDeviceTemplateEquals(0x4018, 0xFFFF, 0x0000, 0x0000, "WMZ #8");
		t.assertNextDeviceTemplateEquals(0x4019, 0xFFFF, 0x0000, 0x0000, "WMZ #9");
		t.assertNextDeviceTemplateEquals(0x401A, 0xFFFF, 0x0000, 0x0000, "WMZ #10");
		t.assertNextDeviceTemplateEquals(0x401B, 0xFFFF, 0x0000, 0x0000, "WMZ #11");
		t.assertNextDeviceTemplateEquals(0x401C, 0xFFFF, 0x0000, 0x0000, "WMZ #12");
		t.assertNextDeviceTemplateEquals(0x401D, 0xFFFF, 0x0000, 0x0000, "WMZ #13");
		t.assertNextDeviceTemplateEquals(0x401E, 0xFFFF, 0x0000, 0x0000, "WMZ #14");
		t.assertNextDeviceTemplateEquals(0x401F, 0xFFFF, 0x0000, 0x0000, "WMZ #15");
		t.assertNextDeviceTemplateEquals(0x4021, 0xFFFF, 0x0000, 0x0000, "GF-Display");
		t.assertNextDeviceTemplateEquals(0x4111, 0xFFFF, 0x0000, 0x0000, "DeltaSol AL");
		t.assertNextDeviceTemplateEquals(0x4211, 0xFFFF, 0x0000, 0x0000, "SKSC1/2");
		t.assertNextDeviceTemplateEquals(0x4212, 0xFFFF, 0x0000, 0x0000, "DeltaSol C");
		t.assertNextDeviceTemplateEquals(0x4213, 0xFFFF, 0x0000, 0x0000, "SKSC2 HE [Controller]");
		t.assertNextDeviceTemplateEquals(0x4214, 0xFFFF, 0x0000, 0x0000, "SKSC2 HE [Controller]");
		t.assertNextDeviceTemplateEquals(0x4221, 0xFFFF, 0x0000, 0x0000, "DeltaSol BS Plus");
		t.assertNextDeviceTemplateEquals(0x4223, 0xFFFF, 0x0000, 0x0000, "DeltaSol BS Plus BTU");
		t.assertNextDeviceTemplateEquals(0x4224, 0xFFFF, 0x0000, 0x0000, "CS2.2");
		t.assertNextDeviceTemplateEquals(0x4225, 0xFFFF, 0x0000, 0x0000, "CS1.2");
		t.assertNextDeviceTemplateEquals(0x4231, 0xFFFF, 0x0000, 0x0000, "Frista");
		t.assertNextDeviceTemplateEquals(0x4241, 0xFFFF, 0x0000, 0x0000, "Huber - REGLOfresh / Felix [Controller]");
		t.assertNextDeviceTemplateEquals(0x4251, 0xFFFF, 0x0000, 0x0000, "DSPlus UMSYS [Controller]");
		t.assertNextDeviceTemplateEquals(0x4252, 0xFFFF, 0x0000, 0x0000, "BS Solex US");
		t.assertNextDeviceTemplateEquals(0x4258, 0xFFFF, 0x0000, 0x0000, "SolarNor Drainback");
		t.assertNextDeviceTemplateEquals(0x4261, 0xFFFF, 0x0000, 0x0000, "DeltaSol E SorTech [Controller]");
		t.assertNextDeviceTemplateEquals(0x4265, 0xFFFF, 0x0000, 0x0000, "Aton DeltaSol BS");
		t.assertNextDeviceTemplateEquals(0x4278, 0xFFFF, 0x0000, 0x0000, "DeltaSol BS/DrainBack");
		t.assertNextDeviceTemplateEquals(0x4279, 0xFFFF, 0x0000, 0x0000, "DeltaSol BS/DrainBack (Fahrenheit)");
		t.assertNextDeviceTemplateEquals(0x427A, 0xFFFF, 0x0000, 0x0000, "DeltaSol BS/DrainBack (Fahrenheit/BTU)");
		t.assertNextDeviceTemplateEquals(0x427B, 0xFFFF, 0x0000, 0x0000, "DeltaSol BS 2009");
		t.assertNextDeviceTemplateEquals(0x4311, 0xFFFF, 0x0000, 0x0000, "DeDietrich DrainBack");
		t.assertNextDeviceTemplateEquals(0x4312, 0xFFFF, 0x0000, 0x0000, "DeDietrich Drainback (Control)");
		t.assertNextDeviceTemplateEquals(0x4321, 0xFFFF, 0x0000, 0x0000, "DeltaSol MiniPool");
		t.assertNextDeviceTemplateEquals(0x4410, 0xFFFF, 0x0000, 0x0000, "MSR44 #0");
		t.assertNextDeviceTemplateEquals(0x4411, 0xFFFF, 0x0000, 0x0000, "MSR44 #1");
		t.assertNextDeviceTemplateEquals(0x4412, 0xFFFF, 0x0000, 0x0000, "MSR44 #2");
		t.assertNextDeviceTemplateEquals(0x4413, 0xFFFF, 0x0000, 0x0000, "MSR44 #3");
		t.assertNextDeviceTemplateEquals(0x4414, 0xFFFF, 0x0000, 0x0000, "MSR44 #4");
		t.assertNextDeviceTemplateEquals(0x4415, 0xFFFF, 0x0000, 0x0000, "MSR44 #5");
		t.assertNextDeviceTemplateEquals(0x4416, 0xFFFF, 0x0000, 0x0000, "MSR44 #6");
		t.assertNextDeviceTemplateEquals(0x4417, 0xFFFF, 0x0000, 0x0000, "MSR44 #7");
		t.assertNextDeviceTemplateEquals(0x4418, 0xFFFF, 0x0000, 0x0000, "MSR44 #8");
		t.assertNextDeviceTemplateEquals(0x4419, 0xFFFF, 0x0000, 0x0000, "MSR44 #9");
		t.assertNextDeviceTemplateEquals(0x441A, 0xFFFF, 0x0000, 0x0000, "MSR44 #10");
		t.assertNextDeviceTemplateEquals(0x441B, 0xFFFF, 0x0000, 0x0000, "MSR44 #11");
		t.assertNextDeviceTemplateEquals(0x441C, 0xFFFF, 0x0000, 0x0000, "MSR44 #12");
		t.assertNextDeviceTemplateEquals(0x441D, 0xFFFF, 0x0000, 0x0000, "MSR44 #13");
		t.assertNextDeviceTemplateEquals(0x441E, 0xFFFF, 0x0000, 0x0000, "MSR44 #14");
		t.assertNextDeviceTemplateEquals(0x441F, 0xFFFF, 0x0000, 0x0000, "MSR44 #15");
		t.assertNextDeviceTemplateEquals(0x4420, 0xFFFF, 0x0000, 0x0000, "HKM1 #0");
		t.assertNextDeviceTemplateEquals(0x4421, 0xFFFF, 0x0000, 0x0000, "HKM1 #1");
		t.assertNextDeviceTemplateEquals(0x4422, 0xFFFF, 0x0000, 0x0000, "HKM1 #2");
		t.assertNextDeviceTemplateEquals(0x4423, 0xFFFF, 0x0000, 0x0000, "HKM1 #3");
		t.assertNextDeviceTemplateEquals(0x4424, 0xFFFF, 0x0000, 0x0000, "HKM1 #4");
		t.assertNextDeviceTemplateEquals(0x4425, 0xFFFF, 0x0000, 0x0000, "HKM1 #5");
		t.assertNextDeviceTemplateEquals(0x4426, 0xFFFF, 0x0000, 0x0000, "HKM1 #6");
		t.assertNextDeviceTemplateEquals(0x4427, 0xFFFF, 0x0000, 0x0000, "HKM1 #7");
		t.assertNextDeviceTemplateEquals(0x4428, 0xFFFF, 0x0000, 0x0000, "HKM1 #8");
		t.assertNextDeviceTemplateEquals(0x4429, 0xFFFF, 0x0000, 0x0000, "HKM1 #9");
		t.assertNextDeviceTemplateEquals(0x442A, 0xFFFF, 0x0000, 0x0000, "HKM1 #10");
		t.assertNextDeviceTemplateEquals(0x442B, 0xFFFF, 0x0000, 0x0000, "HKM1 #11");
		t.assertNextDeviceTemplateEquals(0x442C, 0xFFFF, 0x0000, 0x0000, "HKM1 #12");
		t.assertNextDeviceTemplateEquals(0x442D, 0xFFFF, 0x0000, 0x0000, "HKM1 #13");
		t.assertNextDeviceTemplateEquals(0x442E, 0xFFFF, 0x0000, 0x0000, "HKM1 #14");
		t.assertNextDeviceTemplateEquals(0x442F, 0xFFFF, 0x0000, 0x0000, "HKM1 #15");
		t.assertNextDeviceTemplateEquals(0x4720, 0xFFFF, 0x0000, 0x0000, "DeltaSol BS/2 HE");
		t.assertNextDeviceTemplateEquals(0x4721, 0xFFFF, 0x0000, 0x0000, "DeltaSol BS/2 HE [HQM]");
		t.assertNextDeviceTemplateEquals(0x4730, 0xFFFF, 0x0000, 0x0000, "DeltaSol BS/4 HE");
		t.assertNextDeviceTemplateEquals(0x4731, 0xFFFF, 0x0000, 0x0000, "DeltaSol BS/4 HE [HQM]");
		t.assertNextDeviceTemplateEquals(0x4A00, 0xFFFF, 0x0000, 0x0000, "Drainback DeDietrich");
		t.assertNextDeviceTemplateEquals(0x5111, 0xFFFF, 0x0000, 0x0000, "DeltaSol D");
		t.assertNextDeviceTemplateEquals(0x5112, 0xFFFF, 0x0000, 0x0000, "Speicherofenregler");
		t.assertNextDeviceTemplateEquals(0x5121, 0xFFFF, 0x0000, 0x0000, "FriwaMini");
		t.assertNextDeviceTemplateEquals(0x5141, 0xFFFF, 0x0000, 0x0000, "Tuxhorn PKE");
		t.assertNextDeviceTemplateEquals(0x5210, 0xFFFF, 0x0000, 0x0000, "DeltaSol Plus");
		t.assertNextDeviceTemplateEquals(0x5221, 0xFFFF, 0x0000, 0x0000, "DT4 (MS)");
		t.assertNextDeviceTemplateEquals(0x5231, 0xFFFF, 0x0000, 0x0000, "nemux");
		t.assertNextDeviceTemplateEquals(0x5251, 0xFFFF, 0x0000, 0x0000, "DHW controller");
		t.assertNextDeviceTemplateEquals(0x5260, 0xFFFF, 0x0000, 0x0000, "Kaskade BasisAdr");
		t.assertNextDeviceTemplateEquals(0x5261, 0xFFFF, 0x0000, 0x0000, "Kaskade Master");
		t.assertNextDeviceTemplateEquals(0x5262, 0xFFFF, 0x0000, 0x0000, "Kaskade Slave  1");
		t.assertNextDeviceTemplateEquals(0x5263, 0xFFFF, 0x0000, 0x0000, "Kaskade Slave  2");
		t.assertNextDeviceTemplateEquals(0x5264, 0xFFFF, 0x0000, 0x0000, "Kaskade Slave  3");
		t.assertNextDeviceTemplateEquals(0x5265, 0xFFFF, 0x0000, 0x0000, "Kaskade Slave  4");
		t.assertNextDeviceTemplateEquals(0x5266, 0xFFFF, 0x0000, 0x0000, "Kaskade Slave  5");
		t.assertNextDeviceTemplateEquals(0x5267, 0xFFFF, 0x0000, 0x0000, "Kaskade Slave  6");
		t.assertNextDeviceTemplateEquals(0x5268, 0xFFFF, 0x0000, 0x0000, "Kaskade Slave  7");
		t.assertNextDeviceTemplateEquals(0x5269, 0xFFFF, 0x0000, 0x0000, "Kaskade Slave  8");
		t.assertNextDeviceTemplateEquals(0x526A, 0xFFFF, 0x0000, 0x0000, "Kaskade Slave  9");
		t.assertNextDeviceTemplateEquals(0x526B, 0xFFFF, 0x0000, 0x0000, "Kaskade Slave 10");
		t.assertNextDeviceTemplateEquals(0x526C, 0xFFFF, 0x0000, 0x0000, "Kaskade Slave 11");
		t.assertNextDeviceTemplateEquals(0x526D, 0xFFFF, 0x0000, 0x0000, "Kaskade Slave 12");
		t.assertNextDeviceTemplateEquals(0x526E, 0xFFFF, 0x0000, 0x0000, "Kaskade Slave 13");
		t.assertNextDeviceTemplateEquals(0x526F, 0xFFFF, 0x0000, 0x0000, "Kaskade Slave 14");
		t.assertNextDeviceTemplateEquals(0x5311, 0xFFFF, 0x0000, 0x0000, "X-Control");
		t.assertNextDeviceTemplateEquals(0x5351, 0xFFFF, 0x0000, 0x0000, "DHW controller");
		t.assertNextDeviceTemplateEquals(0x5360, 0xFFFF, 0x0000, 0x0000, "PAW Kaskade BasisAdr");
		t.assertNextDeviceTemplateEquals(0x5361, 0xFFFF, 0x0000, 0x0000, "PAW Kaskade Master");
		t.assertNextDeviceTemplateEquals(0x5362, 0xFFFF, 0x0000, 0x0000, "PAW Kaskade Slave  1");
		t.assertNextDeviceTemplateEquals(0x5363, 0xFFFF, 0x0000, 0x0000, "PAW Kaskade Slave  2");
		t.assertNextDeviceTemplateEquals(0x5364, 0xFFFF, 0x0000, 0x0000, "PAW Kaskade Slave  3");
		t.assertNextDeviceTemplateEquals(0x5365, 0xFFFF, 0x0000, 0x0000, "PAW Kaskade Slave  4");
		t.assertNextDeviceTemplateEquals(0x5366, 0xFFFF, 0x0000, 0x0000, "PAW Kaskade Slave  5");
		t.assertNextDeviceTemplateEquals(0x5367, 0xFFFF, 0x0000, 0x0000, "PAW Kaskade Slave  6");
		t.assertNextDeviceTemplateEquals(0x5368, 0xFFFF, 0x0000, 0x0000, "PAW Kaskade Slave  7");
		t.assertNextDeviceTemplateEquals(0x5369, 0xFFFF, 0x0000, 0x0000, "PAW Kaskade Slave  8");
		t.assertNextDeviceTemplateEquals(0x536A, 0xFFFF, 0x0000, 0x0000, "PAW Kaskade Slave  9");
		t.assertNextDeviceTemplateEquals(0x536B, 0xFFFF, 0x0000, 0x0000, "PAW Kaskade Slave 10");
		t.assertNextDeviceTemplateEquals(0x536C, 0xFFFF, 0x0000, 0x0000, "PAW Kaskade Slave 11");
		t.assertNextDeviceTemplateEquals(0x536D, 0xFFFF, 0x0000, 0x0000, "PAW Kaskade Slave 12");
		t.assertNextDeviceTemplateEquals(0x536E, 0xFFFF, 0x0000, 0x0000, "PAW Kaskade Slave 13");
		t.assertNextDeviceTemplateEquals(0x536F, 0xFFFF, 0x0000, 0x0000, "PAW Kaskade Slave 14");
		t.assertNextDeviceTemplateEquals(0x5400, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Controller]");
		t.assertNextDeviceTemplateEquals(0x5410, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Heating circuit #0]");
		t.assertNextDeviceTemplateEquals(0x5411, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Heating circuit #1]");
		t.assertNextDeviceTemplateEquals(0x5412, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Heating circuit #2]");
		t.assertNextDeviceTemplateEquals(0x5413, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Heating circuit #3]");
		t.assertNextDeviceTemplateEquals(0x5414, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Heating circuit #4]");
		t.assertNextDeviceTemplateEquals(0x5415, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Heating circuit #5]");
		t.assertNextDeviceTemplateEquals(0x5416, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Heating circuit #6]");
		t.assertNextDeviceTemplateEquals(0x5417, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Heating circuit #7]");
		t.assertNextDeviceTemplateEquals(0x5418, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Heating circuit #8]");
		t.assertNextDeviceTemplateEquals(0x5419, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Heating circuit #9]");
		t.assertNextDeviceTemplateEquals(0x541A, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Heating circuit #10]");
		t.assertNextDeviceTemplateEquals(0x541B, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Heating circuit #11]");
		t.assertNextDeviceTemplateEquals(0x541C, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Heating circuit #12]");
		t.assertNextDeviceTemplateEquals(0x541D, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Heating circuit #13]");
		t.assertNextDeviceTemplateEquals(0x541E, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Heating circuit #14]");
		t.assertNextDeviceTemplateEquals(0x541F, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Heating circuit #15]");
		t.assertNextDeviceTemplateEquals(0x5420, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [HQM #0]");
		t.assertNextDeviceTemplateEquals(0x5421, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [HQM #1]");
		t.assertNextDeviceTemplateEquals(0x5422, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [HQM #2]");
		t.assertNextDeviceTemplateEquals(0x5423, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [HQM #3]");
		t.assertNextDeviceTemplateEquals(0x5424, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [HQM #4]");
		t.assertNextDeviceTemplateEquals(0x5425, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [HQM #5]");
		t.assertNextDeviceTemplateEquals(0x5426, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [HQM #6]");
		t.assertNextDeviceTemplateEquals(0x5427, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [HQM #7]");
		t.assertNextDeviceTemplateEquals(0x5428, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [HQM #8]");
		t.assertNextDeviceTemplateEquals(0x5429, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [HQM #9]");
		t.assertNextDeviceTemplateEquals(0x542A, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [HQM #10]");
		t.assertNextDeviceTemplateEquals(0x542B, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [HQM #11]");
		t.assertNextDeviceTemplateEquals(0x542C, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [HQM #12]");
		t.assertNextDeviceTemplateEquals(0x542D, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [HQM #13]");
		t.assertNextDeviceTemplateEquals(0x542E, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [HQM #14]");
		t.assertNextDeviceTemplateEquals(0x542F, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [HQM #15]");
		t.assertNextDeviceTemplateEquals(0x5430, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Module #0]");
		t.assertNextDeviceTemplateEquals(0x5431, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Module #1]");
		t.assertNextDeviceTemplateEquals(0x5432, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Module #2]");
		t.assertNextDeviceTemplateEquals(0x5433, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Module #3]");
		t.assertNextDeviceTemplateEquals(0x5434, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Module #4]");
		t.assertNextDeviceTemplateEquals(0x5435, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Module #5]");
		t.assertNextDeviceTemplateEquals(0x5436, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Module #6]");
		t.assertNextDeviceTemplateEquals(0x5437, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Module #7]");
		t.assertNextDeviceTemplateEquals(0x5438, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Module #8]");
		t.assertNextDeviceTemplateEquals(0x5439, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Module #9]");
		t.assertNextDeviceTemplateEquals(0x543A, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Module #10]");
		t.assertNextDeviceTemplateEquals(0x543B, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Module #11]");
		t.assertNextDeviceTemplateEquals(0x543C, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Module #12]");
		t.assertNextDeviceTemplateEquals(0x543D, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Module #13]");
		t.assertNextDeviceTemplateEquals(0x543E, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Module #14]");
		t.assertNextDeviceTemplateEquals(0x543F, 0xFFFF, 0x0000, 0x0000, "DeltaTherm HC [Module #15]");
		t.assertNextDeviceTemplateEquals(0x5510, 0xFFFF, 0x0000, 0x0000, "EL2/3");
		t.assertNextDeviceTemplateEquals(0x5611, 0xFFFF, 0x0000, 0x0000, "DeltaTherm FK");
		t.assertNextDeviceTemplateEquals(0x6510, 0xFFFF, 0x0000, 0x0000, "HKM2 #0");
		t.assertNextDeviceTemplateEquals(0x6511, 0xFFFF, 0x0000, 0x0000, "HKM2 #1");
		t.assertNextDeviceTemplateEquals(0x6512, 0xFFFF, 0x0000, 0x0000, "HKM2 #2");
		t.assertNextDeviceTemplateEquals(0x6513, 0xFFFF, 0x0000, 0x0000, "HKM2 #3");
		t.assertNextDeviceTemplateEquals(0x6514, 0xFFFF, 0x0000, 0x0000, "HKM2 #4");
		t.assertNextDeviceTemplateEquals(0x6515, 0xFFFF, 0x0000, 0x0000, "HKM2 #5");
		t.assertNextDeviceTemplateEquals(0x6516, 0xFFFF, 0x0000, 0x0000, "HKM2 #6");
		t.assertNextDeviceTemplateEquals(0x6517, 0xFFFF, 0x0000, 0x0000, "HKM2 #7");
		t.assertNextDeviceTemplateEquals(0x6518, 0xFFFF, 0x0000, 0x0000, "HKM2 #8");
		t.assertNextDeviceTemplateEquals(0x6519, 0xFFFF, 0x0000, 0x0000, "HKM2 #9");
		t.assertNextDeviceTemplateEquals(0x651A, 0xFFFF, 0x0000, 0x0000, "HKM2 #10");
		t.assertNextDeviceTemplateEquals(0x651B, 0xFFFF, 0x0000, 0x0000, "HKM2 #11");
		t.assertNextDeviceTemplateEquals(0x651C, 0xFFFF, 0x0000, 0x0000, "HKM2 #12");
		t.assertNextDeviceTemplateEquals(0x651D, 0xFFFF, 0x0000, 0x0000, "HKM2 #13");
		t.assertNextDeviceTemplateEquals(0x651E, 0xFFFF, 0x0000, 0x0000, "HKM2 #14");
		t.assertNextDeviceTemplateEquals(0x651F, 0xFFFF, 0x0000, 0x0000, "HKM2 #15");
		t.assertNextDeviceTemplateEquals(0x6520, 0xFFFF, 0x0000, 0x0000, "MSR65 #0");
		t.assertNextDeviceTemplateEquals(0x6521, 0xFFFF, 0x0000, 0x0000, "MSR65 #1");
		t.assertNextDeviceTemplateEquals(0x6522, 0xFFFF, 0x0000, 0x0000, "MSR65 #2");
		t.assertNextDeviceTemplateEquals(0x6523, 0xFFFF, 0x0000, 0x0000, "MSR65 #3");
		t.assertNextDeviceTemplateEquals(0x6524, 0xFFFF, 0x0000, 0x0000, "MSR65 #4");
		t.assertNextDeviceTemplateEquals(0x6525, 0xFFFF, 0x0000, 0x0000, "MSR65 #5");
		t.assertNextDeviceTemplateEquals(0x6526, 0xFFFF, 0x0000, 0x0000, "MSR65 #6");
		t.assertNextDeviceTemplateEquals(0x6527, 0xFFFF, 0x0000, 0x0000, "MSR65 #7");
		t.assertNextDeviceTemplateEquals(0x6528, 0xFFFF, 0x0000, 0x0000, "MSR65 #8");
		t.assertNextDeviceTemplateEquals(0x6529, 0xFFFF, 0x0000, 0x0000, "MSR65 #9");
		t.assertNextDeviceTemplateEquals(0x652A, 0xFFFF, 0x0000, 0x0000, "MSR65 #10");
		t.assertNextDeviceTemplateEquals(0x652B, 0xFFFF, 0x0000, 0x0000, "MSR65 #11");
		t.assertNextDeviceTemplateEquals(0x652C, 0xFFFF, 0x0000, 0x0000, "MSR65 #12");
		t.assertNextDeviceTemplateEquals(0x652D, 0xFFFF, 0x0000, 0x0000, "MSR65 #13");
		t.assertNextDeviceTemplateEquals(0x652E, 0xFFFF, 0x0000, 0x0000, "MSR65 #14");
		t.assertNextDeviceTemplateEquals(0x652F, 0xFFFF, 0x0000, 0x0000, "MSR65 #15");
		t.assertNextDeviceTemplateEquals(0x6610, 0xFFFF, 0x0000, 0x0000, "Midi Pro");
		t.assertNextDeviceTemplateEquals(0x6620, 0xFFFF, 0x0000, 0x0000, "SunGo XL");
		t.assertNextDeviceTemplateEquals(0x6650, 0xFFFF, 0x0000, 0x0000, "EM #0");
		t.assertNextDeviceTemplateEquals(0x6651, 0xFFFF, 0x0000, 0x0000, "EM #1");
		t.assertNextDeviceTemplateEquals(0x6652, 0xFFFF, 0x0000, 0x0000, "EM #2");
		t.assertNextDeviceTemplateEquals(0x6653, 0xFFFF, 0x0000, 0x0000, "EM #3");
		t.assertNextDeviceTemplateEquals(0x6654, 0xFFFF, 0x0000, 0x0000, "EM #4");
		t.assertNextDeviceTemplateEquals(0x6655, 0xFFFF, 0x0000, 0x0000, "EM #5");
		t.assertNextDeviceTemplateEquals(0x6656, 0xFFFF, 0x0000, 0x0000, "EM #6");
		t.assertNextDeviceTemplateEquals(0x6657, 0xFFFF, 0x0000, 0x0000, "EM #7");
		t.assertNextDeviceTemplateEquals(0x6658, 0xFFFF, 0x0000, 0x0000, "EM #8");
		t.assertNextDeviceTemplateEquals(0x6659, 0xFFFF, 0x0000, 0x0000, "EM #9");
		t.assertNextDeviceTemplateEquals(0x665A, 0xFFFF, 0x0000, 0x0000, "EM #10");
		t.assertNextDeviceTemplateEquals(0x665B, 0xFFFF, 0x0000, 0x0000, "EM #11");
		t.assertNextDeviceTemplateEquals(0x665C, 0xFFFF, 0x0000, 0x0000, "EM #12");
		t.assertNextDeviceTemplateEquals(0x665D, 0xFFFF, 0x0000, 0x0000, "EM #13");
		t.assertNextDeviceTemplateEquals(0x665E, 0xFFFF, 0x0000, 0x0000, "EM #14");
		t.assertNextDeviceTemplateEquals(0x665F, 0xFFFF, 0x0000, 0x0000, "EM #15");
		t.assertNextDeviceTemplateEquals(0x7101, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX WMZ");
		t.assertNextDeviceTemplateEquals(0x7112, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Controller]");
		t.assertNextDeviceTemplateEquals(0x7113, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Modules]");
		t.assertNextDeviceTemplateEquals(0x7120, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Heating circuit #0]");
		t.assertNextDeviceTemplateEquals(0x7121, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Heating circuit #1]");
		t.assertNextDeviceTemplateEquals(0x7122, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Heating circuit #2]");
		t.assertNextDeviceTemplateEquals(0x7123, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Heating circuit #3]");
		t.assertNextDeviceTemplateEquals(0x7124, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Heating circuit #4]");
		t.assertNextDeviceTemplateEquals(0x7125, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Heating circuit #5]");
		t.assertNextDeviceTemplateEquals(0x7126, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Heating circuit #6]");
		t.assertNextDeviceTemplateEquals(0x7127, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Heating circuit #7]");
		t.assertNextDeviceTemplateEquals(0x7128, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Heating circuit #8]");
		t.assertNextDeviceTemplateEquals(0x7129, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Heating circuit #9]");
		t.assertNextDeviceTemplateEquals(0x712A, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Heating circuit #10]");
		t.assertNextDeviceTemplateEquals(0x712B, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Heating circuit #11]");
		t.assertNextDeviceTemplateEquals(0x712C, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Heating circuit #12]");
		t.assertNextDeviceTemplateEquals(0x712D, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Heating circuit #13]");
		t.assertNextDeviceTemplateEquals(0x712E, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Heating circuit #14]");
		t.assertNextDeviceTemplateEquals(0x712F, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Heating circuit #15]");
		t.assertNextDeviceTemplateEquals(0x7130, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [HQM #0]");
		t.assertNextDeviceTemplateEquals(0x7131, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [HQM #1]");
		t.assertNextDeviceTemplateEquals(0x7132, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [HQM #2]");
		t.assertNextDeviceTemplateEquals(0x7133, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [HQM #3]");
		t.assertNextDeviceTemplateEquals(0x7134, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [HQM #4]");
		t.assertNextDeviceTemplateEquals(0x7135, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [HQM #5]");
		t.assertNextDeviceTemplateEquals(0x7136, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [HQM #6]");
		t.assertNextDeviceTemplateEquals(0x7137, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [HQM #7]");
		t.assertNextDeviceTemplateEquals(0x7138, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [HQM #8]");
		t.assertNextDeviceTemplateEquals(0x7139, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [HQM #9]");
		t.assertNextDeviceTemplateEquals(0x713A, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [HQM #10]");
		t.assertNextDeviceTemplateEquals(0x713B, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [HQM #11]");
		t.assertNextDeviceTemplateEquals(0x713C, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [HQM #12]");
		t.assertNextDeviceTemplateEquals(0x713D, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [HQM #13]");
		t.assertNextDeviceTemplateEquals(0x713E, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [HQM #14]");
		t.assertNextDeviceTemplateEquals(0x713F, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [HQM #15]");
		t.assertNextDeviceTemplateEquals(0x7140, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Pro [Controller]");
		t.assertNextDeviceTemplateEquals(0x7150, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Pro [HQM #0]");
		t.assertNextDeviceTemplateEquals(0x7151, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Pro [HQM #1]");
		t.assertNextDeviceTemplateEquals(0x7152, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Pro [HQM #2]");
		t.assertNextDeviceTemplateEquals(0x7153, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Pro [HQM #3]");
		t.assertNextDeviceTemplateEquals(0x7154, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Pro [HQM #4]");
		t.assertNextDeviceTemplateEquals(0x7155, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Pro [HQM #5]");
		t.assertNextDeviceTemplateEquals(0x7156, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Pro [HQM #6]");
		t.assertNextDeviceTemplateEquals(0x7157, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Pro [HQM #7]");
		t.assertNextDeviceTemplateEquals(0x7158, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Pro [HQM #8]");
		t.assertNextDeviceTemplateEquals(0x7159, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Pro [HQM #9]");
		t.assertNextDeviceTemplateEquals(0x715A, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Pro [HQM #10]");
		t.assertNextDeviceTemplateEquals(0x715B, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Pro [HQM #11]");
		t.assertNextDeviceTemplateEquals(0x715C, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Pro [HQM #12]");
		t.assertNextDeviceTemplateEquals(0x715D, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Pro [HQM #13]");
		t.assertNextDeviceTemplateEquals(0x715E, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Pro [HQM #14]");
		t.assertNextDeviceTemplateEquals(0x715F, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Pro [HQM #15]");
		t.assertNextDeviceTemplateEquals(0x7160, 0xFFFF, 0x0000, 0x0000, "SKSC3HE");
		t.assertNextDeviceTemplateEquals(0x7161, 0xFFFF, 0x0000, 0x0000, "SKSC3HE [HC1]");
		t.assertNextDeviceTemplateEquals(0x7162, 0xFFFF, 0x0000, 0x0000, "SKSC3HE [HC2]");
		t.assertNextDeviceTemplateEquals(0x7163, 0xFFFF, 0x0000, 0x0000, "SKSC3HE [HC3]");
		t.assertNextDeviceTemplateEquals(0x7176, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus V2A [Controller]");
		t.assertNextDeviceTemplateEquals(0x7177, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus V2A [Modules]");
		t.assertNextDeviceTemplateEquals(0x7178, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus V2A [Heating circuit 1]");
		t.assertNextDeviceTemplateEquals(0x7179, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus V2A [Heating circuit 2]");
		t.assertNextDeviceTemplateEquals(0x717A, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus V2A [HQM 1]");
		t.assertNextDeviceTemplateEquals(0x717B, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus V2A [HQM 2]");
		t.assertNextDeviceTemplateEquals(0x7210, 0xFFFF, 0x0000, 0x0000, "SKSR 1/2/3");
		t.assertNextDeviceTemplateEquals(0x7211, 0xFFFF, 0x0000, 0x0000, "SKSC3 [HC1]");
		t.assertNextDeviceTemplateEquals(0x7212, 0xFFFF, 0x0000, 0x0000, "SKSC3 [HC2]");
		t.assertNextDeviceTemplateEquals(0x7213, 0xFFFF, 0x0000, 0x0000, "SKSC3 [HC3]");
		t.assertNextDeviceTemplateEquals(0x7221, 0xFFFF, 0x0000, 0x0000, "DrainBloC");
		t.assertNextDeviceTemplateEquals(0x7231, 0xFFFF, 0x0000, 0x0000, "SC25");
		t.assertNextDeviceTemplateEquals(0x7311, 0xFFFF, 0x0000, 0x0000, "DeltaSol M [Controller]");
		t.assertNextDeviceTemplateEquals(0x7312, 0xFFFF, 0x0000, 0x0000, "DeltaSol M [HC1]");
		t.assertNextDeviceTemplateEquals(0x7313, 0xFFFF, 0x0000, 0x0000, "DeltaSol M [HC2]");
		t.assertNextDeviceTemplateEquals(0x7315, 0xFFFF, 0x0000, 0x0000, "DeltaSol M [Volume]");
		t.assertNextDeviceTemplateEquals(0x7316, 0xFFFF, 0x0000, 0x0000, "DeltaSol M [HQM1]");
		t.assertNextDeviceTemplateEquals(0x7317, 0xFFFF, 0x0000, 0x0000, "DeltaSol M [HQM2]");
		t.assertNextDeviceTemplateEquals(0x7321, 0xFFFF, 0x0000, 0x0000, "Vitosolic 200 [Controller]");
		t.assertNextDeviceTemplateEquals(0x7326, 0xFFFF, 0x0000, 0x0000, "Vitosolic 200 [HQM1]");
		t.assertNextDeviceTemplateEquals(0x7327, 0xFFFF, 0x0000, 0x0000, "Vitosolic 200 [HQM2]");
		t.assertNextDeviceTemplateEquals(0x7331, 0xFFFF, 0x0000, 0x0000, "SLR");
		t.assertNextDeviceTemplateEquals(0x7332, 0xFFFF, 0x0000, 0x0000, "SLR-Erweiterungsmodul #01");
		t.assertNextDeviceTemplateEquals(0x7333, 0xFFFF, 0x0000, 0x0000, "SLR-Erweiterungsmodul #02");
		t.assertNextDeviceTemplateEquals(0x7334, 0xFFFF, 0x0000, 0x0000, "SLR-Erweiterungsmodul #03");
		t.assertNextDeviceTemplateEquals(0x7335, 0xFFFF, 0x0000, 0x0000, "SLR-Erweiterungsmodul #04");
		t.assertNextDeviceTemplateEquals(0x7341, 0xFFFF, 0x0000, 0x0000, "SLR XT");
		t.assertNextDeviceTemplateEquals(0x7342, 0xFFFF, 0x0000, 0x0000, "SLR XT-Erweiterungsmodul 1");
		t.assertNextDeviceTemplateEquals(0x7343, 0xFFFF, 0x0000, 0x0000, "SLR XT-Erweiterungsmodul 2");
		t.assertNextDeviceTemplateEquals(0x7344, 0xFFFF, 0x0000, 0x0000, "SLR XT-Erweiterungsmodul 3");
		t.assertNextDeviceTemplateEquals(0x7345, 0xFFFF, 0x0000, 0x0000, "SLR XT-Erweiterungsmodul 4");
		t.assertNextDeviceTemplateEquals(0x7346, 0xFFFF, 0x0000, 0x0000, "SLR XT-Erweiterungsmodul 5");
		t.assertNextDeviceTemplateEquals(0x7411, 0xFFFF, 0x0000, 0x0000, "DeltaSol ES");
		t.assertNextDeviceTemplateEquals(0x7421, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX");
		t.assertNextDeviceTemplateEquals(0x7422, 0xFFFF, 0x0000, 0x0000, "IZEN DTi2");
		t.assertNextDeviceTemplateEquals(0x7428, 0xFFFF, 0x0000, 0x0000, "DeltaSol BXL");
		t.assertNextDeviceTemplateEquals(0x7441, 0xFFFF, 0x0000, 0x0000, "ZEN DT6 [Controller]");
		t.assertNextDeviceTemplateEquals(0x7442, 0xFFFF, 0x0000, 0x0000, "ZEN DT6 [HQM1]");
		t.assertNextDeviceTemplateEquals(0x7451, 0xFFFF, 0x0000, 0x0000, "Kioto SLM");
		t.assertNextDeviceTemplateEquals(0x7511, 0xFFFF, 0x0000, 0x0000, "SOLTEX-Regler [Part 1]");
		t.assertNextDeviceTemplateEquals(0x7512, 0xFFFF, 0x0000, 0x0000, "SOLTEX-Regler [Part 2]");
		t.assertNextDeviceTemplateEquals(0x7521, 0xFFFF, 0x0000, 0x0000, "Regtronic RQ-B");
		t.assertNextDeviceTemplateEquals(0x7522, 0xFFFF, 0x0000, 0x0000, "Regtronic RX-B [Controller]");
		t.assertNextDeviceTemplateEquals(0x7523, 0xFFFF, 0x0000, 0x0000, "Regtronic RX-B [Modules]");
		t.assertNextDeviceTemplateEquals(0x7530, 0xFFFF, 0x0000, 0x0000, "Regtronic RX-B [HQM #0]");
		t.assertNextDeviceTemplateEquals(0x7531, 0xFFFF, 0x0000, 0x0000, "Regtronic RX-B [HQM #1]");
		t.assertNextDeviceTemplateEquals(0x7532, 0xFFFF, 0x0000, 0x0000, "Regtronic RX-B [HQM #2]");
		t.assertNextDeviceTemplateEquals(0x7533, 0xFFFF, 0x0000, 0x0000, "Regtronic RX-B [HQM #3]");
		t.assertNextDeviceTemplateEquals(0x7534, 0xFFFF, 0x0000, 0x0000, "Regtronic RX-B [HQM #4]");
		t.assertNextDeviceTemplateEquals(0x7535, 0xFFFF, 0x0000, 0x0000, "Regtronic RX-B [HQM #5]");
		t.assertNextDeviceTemplateEquals(0x7536, 0xFFFF, 0x0000, 0x0000, "Regtronic RX-B [HQM #6]");
		t.assertNextDeviceTemplateEquals(0x7537, 0xFFFF, 0x0000, 0x0000, "Regtronic RX-B [HQM #7]");
		t.assertNextDeviceTemplateEquals(0x7538, 0xFFFF, 0x0000, 0x0000, "Regtronic RX-B [HQM #8]");
		t.assertNextDeviceTemplateEquals(0x7539, 0xFFFF, 0x0000, 0x0000, "Regtronic RX-B [HQM #9]");
		t.assertNextDeviceTemplateEquals(0x753A, 0xFFFF, 0x0000, 0x0000, "Regtronic RX-B [HQM #10]");
		t.assertNextDeviceTemplateEquals(0x753B, 0xFFFF, 0x0000, 0x0000, "Regtronic RX-B [HQM #11]");
		t.assertNextDeviceTemplateEquals(0x753C, 0xFFFF, 0x0000, 0x0000, "Regtronic RX-B [HQM #12]");
		t.assertNextDeviceTemplateEquals(0x753D, 0xFFFF, 0x0000, 0x0000, "Regtronic RX-B [HQM #13]");
		t.assertNextDeviceTemplateEquals(0x753E, 0xFFFF, 0x0000, 0x0000, "Regtronic RX-B [HQM #14]");
		t.assertNextDeviceTemplateEquals(0x753F, 0xFFFF, 0x0000, 0x0000, "Regtronic RX-B [HQM #15]");
		t.assertNextDeviceTemplateEquals(0x7541, 0xFFFF, 0x0000, 0x0000, "Oventrop RQ-B XXL");
		t.assertNextDeviceTemplateEquals(0x7611, 0xFFFF, 0x0000, 0x0000, "Friwa");
		t.assertNextDeviceTemplateEquals(0x7621, 0xFFFF, 0x0000, 0x0000, "SOLEX [Controller]");
		t.assertNextDeviceTemplateEquals(0x7622, 0xFFFF, 0x0000, 0x0000, "SOLEX [HQM]");
		t.assertNextDeviceTemplateEquals(0x7651, 0xFFFF, 0x0000, 0x0000, "FriWa Kaskadenmaster Version 1");
		t.assertNextDeviceTemplateEquals(0x7711, 0xFFFF, 0x0000, 0x0000, "Multitronic [Controller]");
		t.assertNextDeviceTemplateEquals(0x7712, 0xFFFF, 0x0000, 0x0000, "Multitronic [HQM]");
		t.assertNextDeviceTemplateEquals(0x7721, 0xFFFF, 0x0000, 0x0000, "DeltaSol E [Controller]");
		t.assertNextDeviceTemplateEquals(0x7722, 0xFFFF, 0x0000, 0x0000, "DeltaSol E [HQM]");
		t.assertNextDeviceTemplateEquals(0x7729, 0xFFFF, 0x0000, 0x0000, "DeltaSol E Fahrenheit [Controller]");
		t.assertNextDeviceTemplateEquals(0x772A, 0xFFFF, 0x0000, 0x0000, "DeltaSol E Fahrenheit [HQM]");
		t.assertNextDeviceTemplateEquals(0x7731, 0xFFFF, 0x0000, 0x0000, "SOLTOP DeltaSol S2/S3");
		t.assertNextDeviceTemplateEquals(0x7751, 0xFFFF, 0x0000, 0x0000, "DeDietrich Diemasol C v2007");
		t.assertNextDeviceTemplateEquals(0x7761, 0xFFFF, 0x0000, 0x0000, "DeltaSol Pool");
		t.assertNextDeviceTemplateEquals(0x7762, 0xFFFF, 0x0000, 0x0000, "DeltaSol Pool [HQM]");
		t.assertNextDeviceTemplateEquals(0x7771, 0xFFFF, 0x0000, 0x0000, "DDS-Crawler");
		t.assertNextDeviceTemplateEquals(0x7772, 0xFFFF, 0x0000, 0x0000, "RPT-Testsoftware");
		t.assertNextDeviceTemplateEquals(0x7773, 0xFFFF, 0x0000, 0x0000, "RPT-Steuerbox");
		t.assertNextDeviceTemplateEquals(0x7774, 0xFFFF, 0x0000, 0x0000, "EMZ/CME");
		t.assertNextDeviceTemplateEquals(0x7821, 0xFFFF, 0x0000, 0x0000, "COSMO Multi [Controller]");
		t.assertNextDeviceTemplateEquals(0x7822, 0xFFFF, 0x0000, 0x0000, "COSMO Multi [HQM]");
		t.assertNextDeviceTemplateEquals(0x7831, 0xFFFF, 0x0000, 0x0000, "COSMO Multi HC 1 Concrete drying [Module 1]");
		t.assertNextDeviceTemplateEquals(0x7832, 0xFFFF, 0x0000, 0x0000, "COSMO Multi HC 2 Concrete drying [Module 2]");
		t.assertNextDeviceTemplateEquals(0x7833, 0xFFFF, 0x0000, 0x0000, "COSMO Multi HC 3 Concrete drying [Module 3]");
		t.assertNextDeviceTemplateEquals(0x7834, 0xFFFF, 0x0000, 0x0000, "COSMO Multi HK Estrichtrockung [Lokal]");
		t.assertNextDeviceTemplateEquals(0x7840, 0xFFFF, 0x0000, 0x0000, "COSMO UNO");
		t.assertNextDeviceTemplateEquals(0x7841, 0xFFFF, 0x0000, 0x0000, "COSMO UNO [HQM1]");
		t.assertNextDeviceTemplateEquals(0x7900, 0xFFFF, 0x0000, 0x0000, "R-Wandler");
		t.assertNextDeviceTemplateEquals(0x7910, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [Controller]");
		t.assertNextDeviceTemplateEquals(0x7911, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [Modules]");
		t.assertNextDeviceTemplateEquals(0x7920, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [Heating circuit #0]");
		t.assertNextDeviceTemplateEquals(0x7921, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [Heating circuit #1]");
		t.assertNextDeviceTemplateEquals(0x7922, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [Heating circuit #2]");
		t.assertNextDeviceTemplateEquals(0x7923, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [Heating circuit #3]");
		t.assertNextDeviceTemplateEquals(0x7924, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [Heating circuit #4]");
		t.assertNextDeviceTemplateEquals(0x7925, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [Heating circuit #5]");
		t.assertNextDeviceTemplateEquals(0x7926, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [Heating circuit #6]");
		t.assertNextDeviceTemplateEquals(0x7927, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [Heating circuit #7]");
		t.assertNextDeviceTemplateEquals(0x7928, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [Heating circuit #8]");
		t.assertNextDeviceTemplateEquals(0x7929, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [Heating circuit #9]");
		t.assertNextDeviceTemplateEquals(0x792A, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [Heating circuit #10]");
		t.assertNextDeviceTemplateEquals(0x792B, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [Heating circuit #11]");
		t.assertNextDeviceTemplateEquals(0x792C, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [Heating circuit #12]");
		t.assertNextDeviceTemplateEquals(0x792D, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [Heating circuit #13]");
		t.assertNextDeviceTemplateEquals(0x792E, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [Heating circuit #14]");
		t.assertNextDeviceTemplateEquals(0x792F, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [Heating circuit #15]");
		t.assertNextDeviceTemplateEquals(0x7930, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [HQM #0]");
		t.assertNextDeviceTemplateEquals(0x7931, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [HQM #1]");
		t.assertNextDeviceTemplateEquals(0x7932, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [HQM #2]");
		t.assertNextDeviceTemplateEquals(0x7933, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [HQM #3]");
		t.assertNextDeviceTemplateEquals(0x7934, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [HQM #4]");
		t.assertNextDeviceTemplateEquals(0x7935, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [HQM #5]");
		t.assertNextDeviceTemplateEquals(0x7936, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [HQM #6]");
		t.assertNextDeviceTemplateEquals(0x7937, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [HQM #7]");
		t.assertNextDeviceTemplateEquals(0x7938, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [HQM #8]");
		t.assertNextDeviceTemplateEquals(0x7939, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [HQM #9]");
		t.assertNextDeviceTemplateEquals(0x793A, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [HQM #10]");
		t.assertNextDeviceTemplateEquals(0x793B, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [HQM #11]");
		t.assertNextDeviceTemplateEquals(0x793C, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [HQM #12]");
		t.assertNextDeviceTemplateEquals(0x793D, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [HQM #13]");
		t.assertNextDeviceTemplateEquals(0x793E, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [HQM #14]");
		t.assertNextDeviceTemplateEquals(0x793F, 0xFFFF, 0x0000, 0x0000, "PAW SOLEX SC5.14 [HQM #15]");
		t.assertNextDeviceTemplateEquals(0x7D04, 0xFFFF, 0x0000, 0x0000, "FRISTA-mix");
		t.assertNextDeviceTemplateEquals(0x7E11, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Controller]");
		t.assertNextDeviceTemplateEquals(0x7E12, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Modules]");
		t.assertNextDeviceTemplateEquals(0x7E20, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Heating circuit #0]");
		t.assertNextDeviceTemplateEquals(0x7E21, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Heating circuit #1]");
		t.assertNextDeviceTemplateEquals(0x7E22, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Heating circuit #2]");
		t.assertNextDeviceTemplateEquals(0x7E23, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Heating circuit #3]");
		t.assertNextDeviceTemplateEquals(0x7E24, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Heating circuit #4]");
		t.assertNextDeviceTemplateEquals(0x7E25, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Heating circuit #5]");
		t.assertNextDeviceTemplateEquals(0x7E26, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Heating circuit #6]");
		t.assertNextDeviceTemplateEquals(0x7E27, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Heating circuit #7]");
		t.assertNextDeviceTemplateEquals(0x7E28, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Heating circuit #8]");
		t.assertNextDeviceTemplateEquals(0x7E29, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Heating circuit #9]");
		t.assertNextDeviceTemplateEquals(0x7E2A, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Heating circuit #10]");
		t.assertNextDeviceTemplateEquals(0x7E2B, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Heating circuit #11]");
		t.assertNextDeviceTemplateEquals(0x7E2C, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Heating circuit #12]");
		t.assertNextDeviceTemplateEquals(0x7E2D, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Heating circuit #13]");
		t.assertNextDeviceTemplateEquals(0x7E2E, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Heating circuit #14]");
		t.assertNextDeviceTemplateEquals(0x7E2F, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Heating circuit #15]");
		t.assertNextDeviceTemplateEquals(0x7E30, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [HQM #0]");
		t.assertNextDeviceTemplateEquals(0x7E31, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [HQM #1]");
		t.assertNextDeviceTemplateEquals(0x7E32, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [HQM #2]");
		t.assertNextDeviceTemplateEquals(0x7E33, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [HQM #3]");
		t.assertNextDeviceTemplateEquals(0x7E34, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [HQM #4]");
		t.assertNextDeviceTemplateEquals(0x7E35, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [HQM #5]");
		t.assertNextDeviceTemplateEquals(0x7E36, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [HQM #6]");
		t.assertNextDeviceTemplateEquals(0x7E37, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [HQM #7]");
		t.assertNextDeviceTemplateEquals(0x7E38, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [HQM #8]");
		t.assertNextDeviceTemplateEquals(0x7E39, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [HQM #9]");
		t.assertNextDeviceTemplateEquals(0x7E3A, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [HQM #10]");
		t.assertNextDeviceTemplateEquals(0x7E3B, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [HQM #11]");
		t.assertNextDeviceTemplateEquals(0x7E3C, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [HQM #12]");
		t.assertNextDeviceTemplateEquals(0x7E3D, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [HQM #13]");
		t.assertNextDeviceTemplateEquals(0x7E3E, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [HQM #14]");
		t.assertNextDeviceTemplateEquals(0x7E3F, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [HQM #15]");
		t.assertNextDeviceTemplateEquals(0x7E40, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Module #0]");
		t.assertNextDeviceTemplateEquals(0x7E41, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Module #1]");
		t.assertNextDeviceTemplateEquals(0x7E42, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Module #2]");
		t.assertNextDeviceTemplateEquals(0x7E43, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Module #3]");
		t.assertNextDeviceTemplateEquals(0x7E44, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Module #4]");
		t.assertNextDeviceTemplateEquals(0x7E45, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Module #5]");
		t.assertNextDeviceTemplateEquals(0x7E46, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Module #6]");
		t.assertNextDeviceTemplateEquals(0x7E47, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Module #7]");
		t.assertNextDeviceTemplateEquals(0x7E48, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Module #8]");
		t.assertNextDeviceTemplateEquals(0x7E49, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Module #9]");
		t.assertNextDeviceTemplateEquals(0x7E4A, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Module #10]");
		t.assertNextDeviceTemplateEquals(0x7E4B, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Module #11]");
		t.assertNextDeviceTemplateEquals(0x7E4C, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Module #12]");
		t.assertNextDeviceTemplateEquals(0x7E4D, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Module #13]");
		t.assertNextDeviceTemplateEquals(0x7E4E, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Module #14]");
		t.assertNextDeviceTemplateEquals(0x7E4F, 0xFFFF, 0x0000, 0x0000, "DeltaSol MX [Module #15]");
		t.assertNextDeviceTemplateEquals(0x7E60, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Module #0]");
		t.assertNextDeviceTemplateEquals(0x7E61, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Module #1]");
		t.assertNextDeviceTemplateEquals(0x7E62, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Module #2]");
		t.assertNextDeviceTemplateEquals(0x7E63, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Module #3]");
		t.assertNextDeviceTemplateEquals(0x7E64, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Module #4]");
		t.assertNextDeviceTemplateEquals(0x7E65, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Module #5]");
		t.assertNextDeviceTemplateEquals(0x7E66, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Module #6]");
		t.assertNextDeviceTemplateEquals(0x7E67, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Module #7]");
		t.assertNextDeviceTemplateEquals(0x7E68, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Module #8]");
		t.assertNextDeviceTemplateEquals(0x7E69, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Module #9]");
		t.assertNextDeviceTemplateEquals(0x7E6A, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Module #10]");
		t.assertNextDeviceTemplateEquals(0x7E6B, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Module #11]");
		t.assertNextDeviceTemplateEquals(0x7E6C, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Module #12]");
		t.assertNextDeviceTemplateEquals(0x7E6D, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Module #13]");
		t.assertNextDeviceTemplateEquals(0x7E6E, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Module #14]");
		t.assertNextDeviceTemplateEquals(0x7E6F, 0xFFFF, 0x0000, 0x0000, "DeltaSol BX Plus [Module #15]");
		t.assertNextDeviceTemplateEquals(0x7E71, 0xFFFF, 0x0000, 0x0000, "EMC software");
		t.assertNextDeviceTemplateEquals(0x7F61, 0xFFFF, 0x0000, 0x0000, "IOC-Modul [Messwerte]");
		t.assertNextDeviceTemplateEquals(0x7F62, 0xFFFF, 0x0000, 0x0000, "IOC-Modul [Tagesbilanz]");
		t.assertNextDeviceTemplateEquals(0x7F63, 0xFFFF, 0x0000, 0x0000, "IOC-Modul [Entnahmekreis]");
		t.assertNextDeviceTemplateEquals(0x7F64, 0xFFFF, 0x0000, 0x0000, "IOC-Modul [Debug-Werte]");
		t.assertNextDeviceTemplateEquals(0x7F65, 0xFFFF, 0x0000, 0x0000, "IOC-Modul [Messwerte_1s]");
		t.assertNextDeviceTemplateEquals(0x7F71, 0xFFFF, 0x0000, 0x0000, "DeltaSol FCS");
		t.assertEndOfDeviceTemplateTable();
	}

	class PacketTemplateTester {
		
		int index = 0;
		
		void assertNextPacketTemplateEquals(int destinationAddress, int destinationMask, int sourceAddress, int sourceMask, int command, int fieldCount) {
			PacketTemplate packetTemplate = specFile.getPacketTemplates() [index++];
			assertEquals(destinationAddress, packetTemplate.getDestinationAddress());
			assertEquals(destinationMask, packetTemplate.getDestinationMask());
			assertEquals(sourceAddress, packetTemplate.getSourceAddress());
			assertEquals(sourceMask, packetTemplate.getSourceMask());
			assertEquals(command, packetTemplate.getCommand());
			assertEquals(fieldCount, packetTemplate.getFields().length);
		}

		void assertEndOfPacketTemplateTable() {
			assertEquals(index, specFile.getPacketTemplates().length);
		}

	}

	@Test
	public void testPacketTemplate() throws Exception {
		PacketTemplateTester t = new PacketTemplateTester();
		t.assertNextPacketTemplateEquals(0x0000, 0x0000, 0x4010, 0xFFF0, 0x0100, 7);
		t.assertNextPacketTemplateEquals(0x0000, 0x0000, 0x4420, 0xFFF0, 0x0100, 9);
		t.assertNextPacketTemplateEquals(0x0000, 0x0000, 0x6510, 0xFFF0, 0x0100, 18);
		t.assertNextPacketTemplateEquals(0x0000, 0x0000, 0x6520, 0xFFF0, 0x0100, 6);
		t.assertNextPacketTemplateEquals(0x0000, 0x0000, 0x6650, 0xFFF0, 0x0100, 6);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x0053, 0xFFFF, 0x0100, 18);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1001, 0xFFFF, 0x0100, 32);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1010, 0xFFF0, 0x0100, 19);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1020, 0xFFFF, 0x0100, 17);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1040, 0xFFF0, 0x0100, 21);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1050, 0xFFFF, 0x0100, 40);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1051, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1052, 0xFFFF, 0x0100, 24);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1053, 0xFFFF, 0x0100, 12);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1054, 0xFFFF, 0x0100, 2);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1055, 0xFFFF, 0x0100, 2);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1056, 0xFFFF, 0x0100, 3);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1057, 0xFFFF, 0x0100, 3);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1058, 0xFFFF, 0x0100, 16);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1059, 0xFFFF, 0x0100, 14);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x105A, 0xFFFF, 0x0100, 17);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x105B, 0xFFFF, 0x0100, 10);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x105D, 0xFFFF, 0x0100, 21);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x105E, 0xFFFF, 0x0100, 21);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x105F, 0xFFFF, 0x0100, 13);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1060, 0xFFFF, 0x0100, 86);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1064, 0xFFFC, 0x0100, 7);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1100, 0xFFFF, 0x0100, 52);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1117, 0xFFFF, 0x0100, 21);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1119, 0xFFFF, 0x0100, 6);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x111E, 0xFFFF, 0x0100, 23);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x111F, 0xFFFF, 0x0100, 29);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1120, 0xFFFF, 0x0100, 10);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1121, 0xFFFF, 0x0100, 17);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1122, 0xFFFF, 0x0100, 19);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1123, 0xFFFF, 0x0100, 43);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1127, 0xFFFF, 0x0100, 24);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1140, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1150, 0xFFFF, 0x0100, 23);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1160, 0xFFFF, 0x0100, 47);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1161, 0xFFFF, 0x0100, 30);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1162, 0xFFFF, 0x0100, 8);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1200, 0xFFF0, 0x0100, 3);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1210, 0xFFF0, 0x0100, 2);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1220, 0xFFF0, 0x0100, 8);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1230, 0xFFF0, 0x0100, 8);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1240, 0xFFFF, 0x0100, 34);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1241, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1250, 0xFFFF, 0x0100, 22);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1260, 0xFFFF, 0x0100, 12);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1711, 0xFFFF, 0x0100, 62);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1711, 0xFFFF, 0x0101, 7);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1711, 0xFFFF, 0x0140, 7);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1720, 0xFFF0, 0x0100, 2);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1730, 0xFFF0, 0x0100, 9);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x1740, 0xFFF0, 0x0100, 11);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x2211, 0xFFFF, 0x0100, 19);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x2213, 0xFFFF, 0x0100, 29);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x2231, 0xFFFF, 0x0100, 40);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x2232, 0xFFFF, 0x0100, 6);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x2241, 0xFFFF, 0x0100, 18);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x2251, 0xFFFF, 0x0100, 46);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x2252, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x2261, 0xFFFF, 0x0100, 31);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x2262, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x2271, 0xFFFF, 0x0100, 35);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x2272, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x2360, 0xFFFF, 0x0100, 50);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x2362, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x3011, 0xFFFF, 0x0100, 12);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x3112, 0xFFFF, 0x0100, 9);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x3113, 0xFFFF, 0x0100, 6);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x3114, 0xFFFF, 0x0100, 9);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x3211, 0xFFFF, 0x0100, 8);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x3221, 0xFFFF, 0x0100, 9);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x3231, 0xFFFF, 0x0100, 9);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x3241, 0xFFFF, 0x0100, 6);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x3251, 0xFFFF, 0x0100, 6);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x3271, 0xFFFF, 0x0100, 17);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x3311, 0xFFFF, 0x0100, 12);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4111, 0xFFFF, 0x0100, 8);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4211, 0xFFFF, 0x0100, 10);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4212, 0xFFFF, 0x0100, 12);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4213, 0xFFFF, 0x0100, 13);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4214, 0xFFFF, 0x0100, 13);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4221, 0xFFFF, 0x0100, 20);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4223, 0xFFFF, 0x0100, 20);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4224, 0xFFFF, 0x0100, 20);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4231, 0xFFFF, 0x0100, 21);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4241, 0xFFFF, 0x0100, 43);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4251, 0xFFFF, 0x0100, 21);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4252, 0xFFFF, 0x0100, 28);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4261, 0xFFFF, 0x0100, 37);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4265, 0xFFFF, 0x0100, 14);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4278, 0xFFFF, 0x0100, 20);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4279, 0xFFFF, 0x0100, 20);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x427B, 0xFFFF, 0x0100, 20);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4311, 0xFFFF, 0x0100, 9);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4321, 0xFFFF, 0x0100, 13);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4720, 0xFFFF, 0x0100, 8);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4721, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4730, 0xFFFF, 0x0100, 10);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4731, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x4A00, 0xFFFF, 0x0100, 9);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x5111, 0xFFFF, 0x0100, 12);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x5112, 0xFFFF, 0x0100, 11);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x5121, 0xFFFF, 0x0100, 19);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x5141, 0xFFFF, 0x0100, 9);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x5210, 0xFFFF, 0x0100, 18);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x5221, 0xFFFF, 0x0100, 10);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x5231, 0xFFFF, 0x0100, 17);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x5251, 0xFFFF, 0x0100, 24);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x5311, 0xFFFF, 0x0100, 28);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x5351, 0xFFFF, 0x0100, 23);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x5400, 0xFFFF, 0x0100, 29);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x5410, 0xFFF0, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x5420, 0xFFF0, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x5430, 0xFFF0, 0x0100, 11);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x5510, 0xFFFF, 0x0100, 8);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x5611, 0xFFFF, 0x0100, 11);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x6610, 0xFFFF, 0x0100, 29);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x6620, 0xFFFF, 0x0100, 26);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7101, 0xFFFF, 0x0100, 58);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7112, 0xFFFF, 0x0100, 27);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7112, 0xFFFF, 0x0140, 7);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7113, 0xFFFF, 0x0100, 12);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7120, 0xFFF0, 0x0100, 2);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7130, 0xFFF0, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7140, 0xFFFF, 0x0100, 16);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7150, 0xFFF0, 0x0100, 3);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7160, 0xFFFF, 0x0100, 28);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7161, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7162, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7163, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7176, 0xFFFF, 0x0100, 30);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7177, 0xFFFF, 0x0100, 12);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7178, 0xFFFF, 0x0100, 2);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7179, 0xFFFF, 0x0100, 2);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x717A, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x717B, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7210, 0xFFFF, 0x0100, 20);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7211, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7212, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7213, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7221, 0xFFFF, 0x0100, 17);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7231, 0xFFFF, 0x0100, 44);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7311, 0xFFFF, 0x0100, 32);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7312, 0xFFFE, 0x0100, 6);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7315, 0xFFFF, 0x0100, 11);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7316, 0xFFFE, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7321, 0xFFFF, 0x0100, 32);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7326, 0xFFFE, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7331, 0xFFFF, 0x0100, 47);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7332, 0xFFFF, 0x0100, 11);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7333, 0xFFFF, 0x0100, 11);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7334, 0xFFFF, 0x0100, 11);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7335, 0xFFFF, 0x0100, 11);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7341, 0xFFFF, 0x0100, 56);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7342, 0xFFFF, 0x0100, 11);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7343, 0xFFFF, 0x0100, 11);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7344, 0xFFFF, 0x0100, 11);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7345, 0xFFFF, 0x0100, 11);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7346, 0xFFFF, 0x0100, 11);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7411, 0xFFFF, 0x0100, 31);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7421, 0xFFFF, 0x0100, 57);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7428, 0xFFFF, 0x0100, 41);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7441, 0xFFFF, 0x0100, 22);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7442, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7511, 0xFFFF, 0x0100, 30);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7512, 0xFFFF, 0x0100, 10);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7521, 0xFFFF, 0x0100, 47);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7522, 0xFFFF, 0x0100, 29);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7523, 0xFFFF, 0x0100, 30);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7530, 0xFFF0, 0x0100, 3);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7541, 0xFFFF, 0x0100, 36);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7611, 0xFFFF, 0x0100, 20);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7621, 0xFFFF, 0x0100, 18);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7622, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7651, 0xFFFF, 0x0100, 21);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7711, 0xFFFF, 0x0100, 37);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7712, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7721, 0xFFFF, 0x0100, 37);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7722, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7729, 0xFFFF, 0x0100, 37);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x772A, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7731, 0xFFFF, 0x0100, 14);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7751, 0xFFFF, 0x0100, 25);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7761, 0xFFFF, 0x0100, 61);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7762, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7774, 0xFFFF, 0x0100, 48);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7821, 0xFFFF, 0x0100, 37);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7822, 0xFFFF, 0x0100, 4);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7830, 0xFFF0, 0x0100, 21);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7840, 0xFFFF, 0x0100, 15);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7841, 0xFFFF, 0x0100, 2);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7910, 0xFFFF, 0x0100, 21);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7911, 0xFFFF, 0x0100, 12);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7920, 0xFFF0, 0x0100, 2);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7930, 0xFFF0, 0x0100, 3);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7D04, 0xFFFF, 0x0100, 21);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7E11, 0xFFFF, 0x0100, 62);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7E11, 0xFFFF, 0x0101, 7);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7E11, 0xFFFF, 0x0140, 7);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7E12, 0xFFFF, 0x0100, 30);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7E20, 0xFFF0, 0x0100, 2);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7E30, 0xFFF0, 0x0100, 9);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7E40, 0xFFF0, 0x0100, 11);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7E60, 0xFFF0, 0x0100, 11);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7F61, 0xFFFF, 0x0100, 18);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7F62, 0xFFFF, 0x0100, 19);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7F63, 0xFFFF, 0x0100, 3);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7F64, 0xFFFF, 0x0100, 5);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7F65, 0xFFFF, 0x0100, 14);
		t.assertNextPacketTemplateEquals(0x0010, 0xFFFF, 0x7F71, 0xFFFF, 0x0100, 21);
		t.assertNextPacketTemplateEquals(0x0015, 0xFFFF, 0x105F, 0xFFFF, 0x0100, 13);
		t.assertNextPacketTemplateEquals(0x1260, 0xFFFF, 0x1260, 0xFFF0, 0x0101, 7);
		t.assertNextPacketTemplateEquals(0x1261, 0xFFFF, 0x1261, 0xFFFF, 0x0301, 12);
		t.assertNextPacketTemplateEquals(0x1261, 0xFFFF, 0x1262, 0xFFFF, 0x0301, 12);
		t.assertNextPacketTemplateEquals(0x1261, 0xFFFF, 0x1263, 0xFFFF, 0x0301, 12);
		t.assertNextPacketTemplateEquals(0x1261, 0xFFFF, 0x1264, 0xFFFF, 0x0301, 12);
		t.assertNextPacketTemplateEquals(0x1262, 0xFFFF, 0x1261, 0xFFFF, 0x0301, 12);
		t.assertNextPacketTemplateEquals(0x1262, 0xFFFF, 0x1262, 0xFFFF, 0x0301, 12);
		t.assertNextPacketTemplateEquals(0x1262, 0xFFFF, 0x1263, 0xFFFF, 0x0301, 12);
		t.assertNextPacketTemplateEquals(0x1262, 0xFFFF, 0x1264, 0xFFFF, 0x0301, 12);
		t.assertNextPacketTemplateEquals(0x1263, 0xFFFF, 0x1261, 0xFFFF, 0x0301, 12);
		t.assertNextPacketTemplateEquals(0x1263, 0xFFFF, 0x1262, 0xFFFF, 0x0301, 12);
		t.assertNextPacketTemplateEquals(0x1263, 0xFFFF, 0x1263, 0xFFFF, 0x0301, 12);
		t.assertNextPacketTemplateEquals(0x1263, 0xFFFF, 0x1264, 0xFFFF, 0x0301, 12);
		t.assertNextPacketTemplateEquals(0x1264, 0xFFFF, 0x1261, 0xFFFF, 0x0301, 12);
		t.assertNextPacketTemplateEquals(0x1264, 0xFFFF, 0x1262, 0xFFFF, 0x0301, 12);
		t.assertNextPacketTemplateEquals(0x1264, 0xFFFF, 0x1263, 0xFFFF, 0x0301, 12);
		t.assertNextPacketTemplateEquals(0x1264, 0xFFFF, 0x1264, 0xFFFF, 0x0301, 12);
		t.assertNextPacketTemplateEquals(0x4420, 0xFFF0, 0x0000, 0x0000, 0x0200, 7);
		t.assertNextPacketTemplateEquals(0x5260, 0xFFFF, 0x5260, 0xFFF0, 0x0102, 8);
		t.assertNextPacketTemplateEquals(0x5261, 0xFFFF, 0x5260, 0xFFF0, 0x0301, 15);
		t.assertNextPacketTemplateEquals(0x5360, 0xFFFF, 0x5360, 0xFFF0, 0x0102, 8);
		t.assertNextPacketTemplateEquals(0x5361, 0xFFFF, 0x5360, 0xFFF0, 0x0301, 15);
		t.assertNextPacketTemplateEquals(0x6510, 0xFFF0, 0x0000, 0x0000, 0x0200, 20);
		t.assertNextPacketTemplateEquals(0x6520, 0xFFF0, 0x0000, 0x0000, 0x0200, 28);
		t.assertNextPacketTemplateEquals(0x6650, 0xFFF0, 0x0000, 0x0000, 0x0200, 26);
		t.assertEndOfPacketTemplateTable();
	}
	
	class PacketTemplateFieldTester {
		
		PacketTemplate packetTemplate;

		int index = 0;
		
		PacketTemplateFieldTester(PacketTemplate packetTemplate) {
			this.packetTemplate = packetTemplate;
		}
		
		void assertNextPacketTemplateFieldEquals(String fieldId, String nameEn, String nameDe, String nameFr, String unitCode, int precision, Type type, int partCount) {
			PacketTemplateField field = packetTemplate.getFields() [index++];
			assertEquals(fieldId, field.getIdText());
			assertEquals(nameEn, field.getNameLocalizedText(Language.En));
			assertEquals(nameDe, field.getNameLocalizedText(Language.De));
			assertEquals(nameFr, field.getNameLocalizedText(Language.Fr));
			assertEquals(unitCode, field.getUnit().getUnitCodeText());
			assertEquals(precision, field.getPrecision());
			assertEquals(type, field.getType());
			assertEquals(partCount, field.getParts().length);
		}
		
		void assertEndOfPacketTemplateFieldTable() {
			assertEquals(index, packetTemplate.getFields().length);
		}
		
	}
	
	@Test
	public void testPacketTemplateFields() throws Exception {
		PacketTemplateFieldTester t = new PacketTemplateFieldTester(specFile.findPacketTemplate(0x0010, 0x0053, 0x0100));
		t.assertNextPacketTemplateFieldEquals("000_4_0", "Resistor sensor 1", "Resistor Sensor 1", "Résistance sonde 1", "Ohms", 3, Type.Number, 4);
		t.assertNextPacketTemplateFieldEquals("004_4_0", "Resistor sensor 2", "Resistor Sensor 2", "Résistance sonde 2", "Ohms", 3, Type.Number, 4);
		t.assertNextPacketTemplateFieldEquals("008_4_0", "Resistor sensor 3", "Resistor Sensor 3", "Résistance sonde 3", "Ohms", 3, Type.Number, 4);
		t.assertNextPacketTemplateFieldEquals("012_4_0", "Current sensor 4", "Current Sensor 4", "Sonde de courant 4", "Milliamperes", 3, Type.Number, 4);
		t.assertNextPacketTemplateFieldEquals("034_2_0", "Temperature Sensor 1", "Temperature Sensor 1", "Température Sonde 1", "DegreesCelsius", 1, Type.Number, 2);
		t.assertNextPacketTemplateFieldEquals("036_2_0", "Temperature Sensor 2", "Temperature Sensor 2", "Température Sonde 2", "DegreesCelsius", 1, Type.Number, 2);
		t.assertNextPacketTemplateFieldEquals("038_2_0", "Temperature Sensor 3", "Temperature Sensor 3", "Température Sonde 3", "DegreesCelsius", 1, Type.Number, 2);
		t.assertNextPacketTemplateFieldEquals("016_4_0", "Impulse Counter Sensor 1", "Impulse Counter Sensor 1", "Impulse Counter Sensor 1", "None", 0, Type.Number, 4);
		t.assertNextPacketTemplateFieldEquals("020_4_0", "Impulse Counter Sensor 2", "Impulse Counter Sensor 2", "Impulse Counter Sensor 2", "None", 0, Type.Number, 4);
		t.assertNextPacketTemplateFieldEquals("024_4_0", "Impulse Counter Sensor 3", "Impulse Counter Sensor 3", "Impulse Counter Sensor 3", "None", 0, Type.Number, 4);
		t.assertNextPacketTemplateFieldEquals("040_2_0", "Irradiation Sensor 4", "Irradiation Sensor 4", "Irradiation sonde 4", "WattsPerSquareMeter", 0, Type.Number, 2);
		t.assertNextPacketTemplateFieldEquals("044_4_0", "Last Impulse Interval Sensor 1", "Last Impulse Interval Sensor 1", "Last Impulse Interval Sonde 1", "Milliseconds", 0, Type.Number, 4);
		t.assertNextPacketTemplateFieldEquals("048_4_0", "Last Impulse Interval Sensor 2", "Last Impulse Interval Sensor 2", "Last Impulse Interval Sonde 2", "Milliseconds", 0, Type.Number, 4);
		t.assertNextPacketTemplateFieldEquals("052_4_0", "Last Impulse Interval Sensor 3", "Last Impulse Interval Sensor 3", "Last Impulse Interval Sonde 3", "Milliseconds", 0, Type.Number, 4);
		t.assertNextPacketTemplateFieldEquals("056_4_0", "Current Impulse Interval Sensor 1", "Current Impulse Interval Sensor 1", "Current Impulse Interval Sonde 1", "Milliseconds", 0, Type.Number, 4);
		t.assertNextPacketTemplateFieldEquals("060_4_0", "Current Impulse Interval Sensor 2", "Current Impulse Interval Sensor 2", "Current Impulse Interval Sonde 2", "Milliseconds", 0, Type.Number, 4);
		t.assertNextPacketTemplateFieldEquals("064_4_0", "Current Impulse Interval Sensor 3", "Current Impulse Interval Sensor 3", "Current Impulse Interval Sonde 3", "Milliseconds", 0, Type.Number, 4);
		t.assertNextPacketTemplateFieldEquals("080_4_0", "Heat quantity", "Wärmemenge", "Quantité de chaleur", "WattHours", 0, Type.Number, 4);
		t.assertEndOfPacketTemplateFieldTable();
	}
	
	class EnumVariantTester {
		
		int index = 0;
		
		void assertNextEnumVariantEquals(String enumVariantCode, String textEn, String textDe) {
			EnumVariant enumVariant = specFile.getEnumVariants() [index++];
			assertEquals(enumVariantCode, enumVariant.getEnumVariantCode());
			assertEquals(textEn, enumVariant.getText(Language.En));
			assertEquals(textDe, enumVariant.getText(Language.De));
		}

		void assertEndOfEnumVariantTable() {
			assertEquals(index, specFile.getEnumVariants().length);
		}

	}

	@Test
	public void testEnumVariants() throws Exception {
		EnumVariantTester t = new EnumVariantTester();
		t.assertNextEnumVariantEquals("Free", "Free", "Frei");
		t.assertNextEnumVariantEquals("Runtime", "Runtime", "Laufzeit");
		t.assertNextEnumVariantEquals("Deactivated", "Deactivated", "Deaktiviert");
		t.assertNextEnumVariantEquals("Defective", "Defective", "Defekt");
		t.assertNextEnumVariantEquals("AutoAdjustment", "Auto adjust.", "Autojust.");
		t.assertNextEnumVariantEquals("RoomThermostatOff", "RTH off", "RTH aus");
		t.assertNextEnumVariantEquals("ChimneySweeper", "Chimney sw.", "Schornsteinfeger");
		t.assertNextEnumVariantEquals("DhwPriority", "DHW priority", "BW-Vorrang");
		t.assertNextEnumVariantEquals("Antifreeze", "Antifreeze", "Frostschutz");
		t.assertNextEnumVariantEquals("Party", "Party", "Party");
		t.assertNextEnumVariantEquals("Summer", "Summer", "Sommer");
		t.assertNextEnumVariantEquals("RemoteControlOff", "RC off", "FV aus");
		t.assertNextEnumVariantEquals("HeatingCircuitOff", "HC off", "HK aus");
		t.assertNextEnumVariantEquals("NightOperation", "Night oper.", "Nachtbetr.");
		t.assertNextEnumVariantEquals("DayOperation", "Day oper.", "Tagbetr.");
		t.assertNextEnumVariantEquals("Holiday", "Holiday", "Urlaub");
		t.assertNextEnumVariantEquals("Screed", "Screed", "Estrich");
		t.assertNextEnumVariantEquals("BlockingProtection", "Blocking protection", "Blockierschutz");
		t.assertNextEnumVariantEquals("Cooling", "Cooling", "Kühlung");
		t.assertNextEnumVariantEquals("HeatDump", "Heat dump", "Überwärmeabfuhr");
		t.assertNextEnumVariantEquals("Break", "Break", "Pause");
		
		t.assertNextEnumVariantEquals("Okay", "Okay", "Okay");
		t.assertNextEnumVariantEquals("Error", "Error", "Fehler");
		
		t.assertEndOfEnumVariantTable();
	}
	
	class EnumTester {
		
		int index = 0;
		
		void assertNextEnumEquals(int enumId, int variantsCount) {
			Enum enum_ = specFile.getEnums() [index++];
			assertEquals(enumId, enum_.getEnumId());
			assertEquals(variantsCount, enum_.getValues().length);
			assertEquals(variantsCount, enum_.getEnumVariants().length);
		}

		void assertEndOfEnumTable() {
			assertEquals(index, specFile.getEnums().length);
		}

	}

	@Test
	public void testEnums() throws Exception {
		EnumTester t = new EnumTester();
		t.assertNextEnumEquals(0xa00705bd, 21);
		t.assertNextEnumEquals(0x537e18fa, 2);
		t.assertEndOfEnumTable();
	}

	@Test
	public void testGetEnumById() throws Exception {
		Enum enum0 = specFile.getEnumById(0);
		assertNull(enum0);
		
		Enum enumMxHeatingCircuitOperatingState = specFile.getEnumById(0xa00705bd);
		assertNotNull(enumMxHeatingCircuitOperatingState);
		
		Throwable caught;
		try {
			specFile.getEnumById(-1);
			caught = null;
		} catch (Throwable t) {
			caught = t;
		}
		
		assertNotNull(caught);
		assertEquals("Unsupported enum ID", caught.getMessage());
	}
	
	@Test
	public void testEnumGetEnumVariantForRawValue() throws Exception {
		Enum enumMxHeatingCircuitOperatingState = specFile.getEnumById(0xa00705bd);
		assertNotNull(enumMxHeatingCircuitOperatingState);

		EnumVariant enumVariant1 = enumMxHeatingCircuitOperatingState.getEnumVariantForValue(13);
		
		assertEquals("NightOperation", enumVariant1.getEnumVariantCode());
		
		EnumVariant enumVariant2 = enumMxHeatingCircuitOperatingState.getEnumVariantForValue(-1);
		
		assertNull(enumVariant2);
	}
}
